/* 
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.39) is used. For example, calling `/info` is the same as calling `/v1.39/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.39
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VMware.ScriptRuntimeService.Docker.Bindings.Client;
using VMware.ScriptRuntimeService.Docker.Bindings.Model;

namespace VMware.ScriptRuntimeService.Docker.Bindings.Api
{
   /// <summary>
   /// Represents a collection of functions to interact with the API endpoints
   /// </summary>
   public partial class ContainerApi : IContainerApi
   {
      private ExceptionFactory _exceptionFactory = (name, response) => null;

      /// <summary>
      /// Initializes a new instance of the <see cref="ContainerApi"/> class.
      /// </summary>
      /// <returns></returns>
      public ContainerApi(String basePath)
      {
         this.Configuration = new Configuration { BasePath = basePath };

         ExceptionFactory = Configuration.DefaultExceptionFactory;
      }

      /// <summary>
      /// Initializes a new instance of the <see cref="ContainerApi"/> class
      /// using Configuration object
      /// </summary>
      /// <param name="configuration">An instance of Configuration</param>
      /// <returns></returns>
      public ContainerApi(Configuration configuration = null)
      {
         if (configuration == null) // use the default one in Configuration
            this.Configuration = Configuration.Default;
         else
            this.Configuration = configuration;

         ExceptionFactory = Configuration.DefaultExceptionFactory;
      }

      /// <summary>
      /// Gets the base path of the API client.
      /// </summary>
      /// <value>The base path</value>
      public String GetBasePath()
      {
         return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
      }

      /// <summary>
      /// Sets the base path of the API client.
      /// </summary>
      /// <value>The base path</value>
      [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
      public void SetBasePath(String basePath)
      {
         // do nothing
      }

      /// <summary>
      /// Gets or sets the configuration object
      /// </summary>
      /// <value>An instance of the Configuration</value>
      public Configuration Configuration { get; set; }

      /// <summary>
      /// Provides a factory method hook for the creation of exceptions.
      /// </summary>
      public ExceptionFactory ExceptionFactory {
         get {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
            {
               throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            }
            return _exceptionFactory;
         }
         set { _exceptionFactory = value; }
      }

      /// <summary>
      /// Gets the default header.
      /// </summary>
      /// <returns>Dictionary of HTTP header</returns>
      [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
      public IDictionary<String, String> DefaultHeader()
      {
         return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
      }

      /// <summary>
      /// Add default header.
      /// </summary>
      /// <param name="key">Header field name.</param>
      /// <param name="value">Header field value.</param>
      /// <returns></returns>
      [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
      public void AddDefaultHeader(string key, string value)
      {
         this.Configuration.AddDefaultHeader(key, value);
      }

      /// <summary>
      /// Get an archive of a filesystem resource in a container Get a tar archive of a resource in the filesystem of container id.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Resource in the container’s filesystem to archive.</param>
      /// <returns></returns>
      public void ContainerArchive(string id, string path)
      {
         ContainerArchiveWithHttpInfo(id, path);
      }

      /// <summary>
      /// Get an archive of a filesystem resource in a container Get a tar archive of a resource in the filesystem of container id.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Resource in the container’s filesystem to archive.</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerArchiveWithHttpInfo(string id, string path)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerArchive");
         // verify the required parameter 'path' is set
         if (path == null)
            throw new ApiException(400, "Missing required parameter 'path' when calling ContainerApi->ContainerArchive");

         var localVarPath = "/containers/{id}/archive";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-tar"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerArchive", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Get an archive of a filesystem resource in a container Get a tar archive of a resource in the filesystem of container id.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Resource in the container’s filesystem to archive.</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerArchiveAsync(string id, string path)
      {
         await ContainerArchiveAsyncWithHttpInfo(id, path);

      }

      /// <summary>
      /// Get an archive of a filesystem resource in a container Get a tar archive of a resource in the filesystem of container id.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Resource in the container’s filesystem to archive.</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerArchiveAsyncWithHttpInfo(string id, string path)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerArchive");
         // verify the required parameter 'path' is set
         if (path == null)
            throw new ApiException(400, "Missing required parameter 'path' when calling ContainerApi->ContainerArchive");

         var localVarPath = "/containers/{id}/archive";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/x-tar"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerArchive", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Get information about files in a container A response header &#x60;X-Docker-Container-Path-Stat&#x60; is return containing a base64 - encoded JSON object with some filesystem header information about the path.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Resource in the container’s filesystem to archive.</param>
      /// <returns></returns>
      public void ContainerArchiveInfo(string id, string path)
      {
         ContainerArchiveInfoWithHttpInfo(id, path);
      }

      /// <summary>
      /// Get information about files in a container A response header &#x60;X-Docker-Container-Path-Stat&#x60; is return containing a base64 - encoded JSON object with some filesystem header information about the path.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Resource in the container’s filesystem to archive.</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerArchiveInfoWithHttpInfo(string id, string path)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerArchiveInfo");
         // verify the required parameter 'path' is set
         if (path == null)
            throw new ApiException(400, "Missing required parameter 'path' when calling ContainerApi->ContainerArchiveInfo");

         var localVarPath = "/containers/{id}/archive";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerArchiveInfo", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Get information about files in a container A response header &#x60;X-Docker-Container-Path-Stat&#x60; is return containing a base64 - encoded JSON object with some filesystem header information about the path.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Resource in the container’s filesystem to archive.</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerArchiveInfoAsync(string id, string path)
      {
         await ContainerArchiveInfoAsyncWithHttpInfo(id, path);

      }

      /// <summary>
      /// Get information about files in a container A response header &#x60;X-Docker-Container-Path-Stat&#x60; is return containing a base64 - encoded JSON object with some filesystem header information about the path.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Resource in the container’s filesystem to archive.</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerArchiveInfoAsyncWithHttpInfo(string id, string path)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerArchiveInfo");
         // verify the required parameter 'path' is set
         if (path == null)
            throw new ApiException(400, "Missing required parameter 'path' when calling ContainerApi->ContainerArchiveInfo");

         var localVarPath = "/containers/{id}/archive";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerArchiveInfo", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Attach to a container Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the &#x60;stream&#x60; or &#x60;logs&#x60; parameter must be &#x60;true&#x60; for this endpoint to do anything.  See [the documentation for the &#x60;docker attach&#x60; command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport &#x60;stdin&#x60;, &#x60;stdout&#x60;, and &#x60;stderr&#x60; on the same socket.  This is the response from the daemon for an attach request:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] &#x60;&#x60;&#x60;  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  &#x60;&#x60;&#x60; POST /containers/16253994b7c4/attach?stream&#x3D;1&amp;stdout&#x3D;1 HTTP/1.1 Upgrade: tcp Connection: Upgrade &#x60;&#x60;&#x60;  The Docker daemon will respond with a &#x60;101 UPGRADED&#x60; response, and will similarly follow with the raw stream:  &#x60;&#x60;&#x60; HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] &#x60;&#x60;&#x60;  ### Stream format  When the TTY setting is disabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out &#x60;stdout&#x60; and &#x60;stderr&#x60;. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (&#x60;stdout&#x60; or &#x60;stderr&#x60;). It also contains the size of the associated frame encoded in the last four bytes (&#x60;uint32&#x60;).  It is encoded on the first eight bytes like this:  &#x60;&#x60;&#x60;go header :&#x3D; [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} &#x60;&#x60;&#x60;  &#x60;STREAM_TYPE&#x60; can be:  - 0: &#x60;stdin&#x60; (is written on &#x60;stdout&#x60;) - 1: &#x60;stdout&#x60; - 2: &#x60;stderr&#x60;  &#x60;SIZE1, SIZE2, SIZE3, SIZE4&#x60; are the four bytes of the &#x60;uint32&#x60; size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of &#x60;STREAM_TYPE&#x60;.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose &#x60;stdout&#x60; or &#x60;stderr&#x60; depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client&#39;s &#x60;stdin&#x60;. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)</param>
      /// <param name="logs">Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.  (optional, default to false)</param>
      /// <param name="stream">Stream attached streams from the time the request was made onwards (optional, default to false)</param>
      /// <param name="stdin">Attach to &#x60;stdin&#x60; (optional, default to false)</param>
      /// <param name="stdout">Attach to &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Attach to &#x60;stderr&#x60; (optional, default to false)</param>
      /// <returns></returns>
      public void ContainerAttach(string id, string detachKeys = null, bool? logs = null, bool? stream = null, bool? stdin = null, bool? stdout = null, bool? stderr = null)
      {
         ContainerAttachWithHttpInfo(id, detachKeys, logs, stream, stdin, stdout, stderr);
      }

      /// <summary>
      /// Attach to a container Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the &#x60;stream&#x60; or &#x60;logs&#x60; parameter must be &#x60;true&#x60; for this endpoint to do anything.  See [the documentation for the &#x60;docker attach&#x60; command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport &#x60;stdin&#x60;, &#x60;stdout&#x60;, and &#x60;stderr&#x60; on the same socket.  This is the response from the daemon for an attach request:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] &#x60;&#x60;&#x60;  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  &#x60;&#x60;&#x60; POST /containers/16253994b7c4/attach?stream&#x3D;1&amp;stdout&#x3D;1 HTTP/1.1 Upgrade: tcp Connection: Upgrade &#x60;&#x60;&#x60;  The Docker daemon will respond with a &#x60;101 UPGRADED&#x60; response, and will similarly follow with the raw stream:  &#x60;&#x60;&#x60; HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] &#x60;&#x60;&#x60;  ### Stream format  When the TTY setting is disabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out &#x60;stdout&#x60; and &#x60;stderr&#x60;. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (&#x60;stdout&#x60; or &#x60;stderr&#x60;). It also contains the size of the associated frame encoded in the last four bytes (&#x60;uint32&#x60;).  It is encoded on the first eight bytes like this:  &#x60;&#x60;&#x60;go header :&#x3D; [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} &#x60;&#x60;&#x60;  &#x60;STREAM_TYPE&#x60; can be:  - 0: &#x60;stdin&#x60; (is written on &#x60;stdout&#x60;) - 1: &#x60;stdout&#x60; - 2: &#x60;stderr&#x60;  &#x60;SIZE1, SIZE2, SIZE3, SIZE4&#x60; are the four bytes of the &#x60;uint32&#x60; size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of &#x60;STREAM_TYPE&#x60;.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose &#x60;stdout&#x60; or &#x60;stderr&#x60; depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client&#39;s &#x60;stdin&#x60;. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)</param>
      /// <param name="logs">Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.  (optional, default to false)</param>
      /// <param name="stream">Stream attached streams from the time the request was made onwards (optional, default to false)</param>
      /// <param name="stdin">Attach to &#x60;stdin&#x60; (optional, default to false)</param>
      /// <param name="stdout">Attach to &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Attach to &#x60;stderr&#x60; (optional, default to false)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerAttachWithHttpInfo(string id, string detachKeys = null, bool? logs = null, bool? stream = null, bool? stdin = null, bool? stdout = null, bool? stderr = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerAttach");

         var localVarPath = "/containers/{id}/attach";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.docker.raw-stream"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (detachKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detachKeys", detachKeys)); // query parameter
         if (logs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logs", logs)); // query parameter
         if (stream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stream", stream)); // query parameter
         if (stdin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdin", stdin)); // query parameter
         if (stdout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdout", stdout)); // query parameter
         if (stderr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stderr", stderr)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerAttach", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Attach to a container Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the &#x60;stream&#x60; or &#x60;logs&#x60; parameter must be &#x60;true&#x60; for this endpoint to do anything.  See [the documentation for the &#x60;docker attach&#x60; command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport &#x60;stdin&#x60;, &#x60;stdout&#x60;, and &#x60;stderr&#x60; on the same socket.  This is the response from the daemon for an attach request:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] &#x60;&#x60;&#x60;  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  &#x60;&#x60;&#x60; POST /containers/16253994b7c4/attach?stream&#x3D;1&amp;stdout&#x3D;1 HTTP/1.1 Upgrade: tcp Connection: Upgrade &#x60;&#x60;&#x60;  The Docker daemon will respond with a &#x60;101 UPGRADED&#x60; response, and will similarly follow with the raw stream:  &#x60;&#x60;&#x60; HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] &#x60;&#x60;&#x60;  ### Stream format  When the TTY setting is disabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out &#x60;stdout&#x60; and &#x60;stderr&#x60;. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (&#x60;stdout&#x60; or &#x60;stderr&#x60;). It also contains the size of the associated frame encoded in the last four bytes (&#x60;uint32&#x60;).  It is encoded on the first eight bytes like this:  &#x60;&#x60;&#x60;go header :&#x3D; [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} &#x60;&#x60;&#x60;  &#x60;STREAM_TYPE&#x60; can be:  - 0: &#x60;stdin&#x60; (is written on &#x60;stdout&#x60;) - 1: &#x60;stdout&#x60; - 2: &#x60;stderr&#x60;  &#x60;SIZE1, SIZE2, SIZE3, SIZE4&#x60; are the four bytes of the &#x60;uint32&#x60; size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of &#x60;STREAM_TYPE&#x60;.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose &#x60;stdout&#x60; or &#x60;stderr&#x60; depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client&#39;s &#x60;stdin&#x60;. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)</param>
      /// <param name="logs">Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.  (optional, default to false)</param>
      /// <param name="stream">Stream attached streams from the time the request was made onwards (optional, default to false)</param>
      /// <param name="stdin">Attach to &#x60;stdin&#x60; (optional, default to false)</param>
      /// <param name="stdout">Attach to &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Attach to &#x60;stderr&#x60; (optional, default to false)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerAttachAsync(string id, string detachKeys = null, bool? logs = null, bool? stream = null, bool? stdin = null, bool? stdout = null, bool? stderr = null)
      {
         await ContainerAttachAsyncWithHttpInfo(id, detachKeys, logs, stream, stdin, stdout, stderr);

      }

      /// <summary>
      /// Attach to a container Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the &#x60;stream&#x60; or &#x60;logs&#x60; parameter must be &#x60;true&#x60; for this endpoint to do anything.  See [the documentation for the &#x60;docker attach&#x60; command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport &#x60;stdin&#x60;, &#x60;stdout&#x60;, and &#x60;stderr&#x60; on the same socket.  This is the response from the daemon for an attach request:  &#x60;&#x60;&#x60; HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] &#x60;&#x60;&#x60;  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  &#x60;&#x60;&#x60; POST /containers/16253994b7c4/attach?stream&#x3D;1&amp;stdout&#x3D;1 HTTP/1.1 Upgrade: tcp Connection: Upgrade &#x60;&#x60;&#x60;  The Docker daemon will respond with a &#x60;101 UPGRADED&#x60; response, and will similarly follow with the raw stream:  &#x60;&#x60;&#x60; HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] &#x60;&#x60;&#x60;  ### Stream format  When the TTY setting is disabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out &#x60;stdout&#x60; and &#x60;stderr&#x60;. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (&#x60;stdout&#x60; or &#x60;stderr&#x60;). It also contains the size of the associated frame encoded in the last four bytes (&#x60;uint32&#x60;).  It is encoded on the first eight bytes like this:  &#x60;&#x60;&#x60;go header :&#x3D; [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} &#x60;&#x60;&#x60;  &#x60;STREAM_TYPE&#x60; can be:  - 0: &#x60;stdin&#x60; (is written on &#x60;stdout&#x60;) - 1: &#x60;stdout&#x60; - 2: &#x60;stderr&#x60;  &#x60;SIZE1, SIZE2, SIZE3, SIZE4&#x60; are the four bytes of the &#x60;uint32&#x60; size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of &#x60;STREAM_TYPE&#x60;.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose &#x60;stdout&#x60; or &#x60;stderr&#x60; depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [&#x60;POST /containers/create&#x60;](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client&#39;s &#x60;stdin&#x60;. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)</param>
      /// <param name="logs">Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.  (optional, default to false)</param>
      /// <param name="stream">Stream attached streams from the time the request was made onwards (optional, default to false)</param>
      /// <param name="stdin">Attach to &#x60;stdin&#x60; (optional, default to false)</param>
      /// <param name="stdout">Attach to &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Attach to &#x60;stderr&#x60; (optional, default to false)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerAttachAsyncWithHttpInfo(string id, string detachKeys = null, bool? logs = null, bool? stream = null, bool? stdin = null, bool? stdout = null, bool? stderr = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerAttach");

         var localVarPath = "/containers/{id}/attach";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.docker.raw-stream"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (detachKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detachKeys", detachKeys)); // query parameter
         if (logs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logs", logs)); // query parameter
         if (stream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stream", stream)); // query parameter
         if (stdin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdin", stdin)); // query parameter
         if (stdout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdout", stdout)); // query parameter
         if (stderr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stderr", stderr)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerAttach", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Attach to a container via a websocket 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. (optional)</param>
      /// <param name="logs">Return logs (optional, default to false)</param>
      /// <param name="stream">Return stream (optional, default to false)</param>
      /// <param name="stdin">Attach to &#x60;stdin&#x60; (optional, default to false)</param>
      /// <param name="stdout">Attach to &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Attach to &#x60;stderr&#x60; (optional, default to false)</param>
      /// <returns></returns>
      public void ContainerAttachWebsocket(string id, string detachKeys = null, bool? logs = null, bool? stream = null, bool? stdin = null, bool? stdout = null, bool? stderr = null)
      {
         ContainerAttachWebsocketWithHttpInfo(id, detachKeys, logs, stream, stdin, stdout, stderr);
      }

      /// <summary>
      /// Attach to a container via a websocket 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. (optional)</param>
      /// <param name="logs">Return logs (optional, default to false)</param>
      /// <param name="stream">Return stream (optional, default to false)</param>
      /// <param name="stdin">Attach to &#x60;stdin&#x60; (optional, default to false)</param>
      /// <param name="stdout">Attach to &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Attach to &#x60;stderr&#x60; (optional, default to false)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerAttachWebsocketWithHttpInfo(string id, string detachKeys = null, bool? logs = null, bool? stream = null, bool? stdin = null, bool? stdout = null, bool? stderr = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerAttachWebsocket");

         var localVarPath = "/containers/{id}/attach/ws";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (detachKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detachKeys", detachKeys)); // query parameter
         if (logs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logs", logs)); // query parameter
         if (stream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stream", stream)); // query parameter
         if (stdin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdin", stdin)); // query parameter
         if (stdout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdout", stdout)); // query parameter
         if (stderr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stderr", stderr)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerAttachWebsocket", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Attach to a container via a websocket 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. (optional)</param>
      /// <param name="logs">Return logs (optional, default to false)</param>
      /// <param name="stream">Return stream (optional, default to false)</param>
      /// <param name="stdin">Attach to &#x60;stdin&#x60; (optional, default to false)</param>
      /// <param name="stdout">Attach to &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Attach to &#x60;stderr&#x60; (optional, default to false)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerAttachWebsocketAsync(string id, string detachKeys = null, bool? logs = null, bool? stream = null, bool? stdin = null, bool? stdout = null, bool? stderr = null)
      {
         await ContainerAttachWebsocketAsyncWithHttpInfo(id, detachKeys, logs, stream, stdin, stdout, stderr);

      }

      /// <summary>
      /// Attach to a container via a websocket 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. (optional)</param>
      /// <param name="logs">Return logs (optional, default to false)</param>
      /// <param name="stream">Return stream (optional, default to false)</param>
      /// <param name="stdin">Attach to &#x60;stdin&#x60; (optional, default to false)</param>
      /// <param name="stdout">Attach to &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Attach to &#x60;stderr&#x60; (optional, default to false)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerAttachWebsocketAsyncWithHttpInfo(string id, string detachKeys = null, bool? logs = null, bool? stream = null, bool? stdin = null, bool? stdout = null, bool? stderr = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerAttachWebsocket");

         var localVarPath = "/containers/{id}/attach/ws";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (detachKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detachKeys", detachKeys)); // query parameter
         if (logs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "logs", logs)); // query parameter
         if (stream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stream", stream)); // query parameter
         if (stdin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdin", stdin)); // query parameter
         if (stdout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdout", stdout)); // query parameter
         if (stderr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stderr", stderr)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerAttachWebsocket", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Get changes on a container’s filesystem Returns which files in a container&#39;s filesystem have been added, deleted, or modified. The &#x60;Kind&#x60; of modification can be one of:  - &#x60;0&#x60;: Modified - &#x60;1&#x60;: Added - &#x60;2&#x60;: Deleted 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>List&lt;Object&gt;</returns>
      public List<Object> ContainerChanges(string id)
      {
         ApiResponse<List<Object>> localVarResponse = ContainerChangesWithHttpInfo(id);
         return localVarResponse.Data;
      }

      /// <summary>
      /// Get changes on a container’s filesystem Returns which files in a container&#39;s filesystem have been added, deleted, or modified. The &#x60;Kind&#x60; of modification can be one of:  - &#x60;0&#x60;: Modified - &#x60;1&#x60;: Added - &#x60;2&#x60;: Deleted 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>ApiResponse of List&lt;Object&gt;</returns>
      public ApiResponse<List<Object>> ContainerChangesWithHttpInfo(string id)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerChanges");

         var localVarPath = "/containers/{id}/changes";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerChanges", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<List<Object>>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (List<Object>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
      }

      /// <summary>
      /// Get changes on a container’s filesystem Returns which files in a container&#39;s filesystem have been added, deleted, or modified. The &#x60;Kind&#x60; of modification can be one of:  - &#x60;0&#x60;: Modified - &#x60;1&#x60;: Added - &#x60;2&#x60;: Deleted 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>Task of List&lt;Object&gt;</returns>
      public async System.Threading.Tasks.Task<List<Object>> ContainerChangesAsync(string id)
      {
         ApiResponse<List<Object>> localVarResponse = await ContainerChangesAsyncWithHttpInfo(id);
         return localVarResponse.Data;

      }

      /// <summary>
      /// Get changes on a container’s filesystem Returns which files in a container&#39;s filesystem have been added, deleted, or modified. The &#x60;Kind&#x60; of modification can be one of:  - &#x60;0&#x60;: Modified - &#x60;1&#x60;: Added - &#x60;2&#x60;: Deleted 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> ContainerChangesAsyncWithHttpInfo(string id)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerChanges");

         var localVarPath = "/containers/{id}/changes";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerChanges", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<List<Object>>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (List<Object>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
      }

      /// <summary>
      /// Create a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="body">Container to create</param>
      /// <param name="name">Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9_-]+&#x60;. (optional)</param>
      /// <returns>ContainerCreateResponse</returns>
      public ContainerCreateResponse ContainerCreate(object body, string name = null)
      {
         ApiResponse<ContainerCreateResponse> localVarResponse = ContainerCreateWithHttpInfo(body, name);
         return localVarResponse.Data;
      }

      /// <summary>
      /// Create a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="body">Container to create</param>
      /// <param name="name">Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9_-]+&#x60;. (optional)</param>
      /// <returns>ApiResponse of ContainerCreateResponse</returns>
      public ApiResponse<ContainerCreateResponse> ContainerCreateWithHttpInfo(object body, string name = null)
      {
         // verify the required parameter 'body' is set
         if (body == null)
            throw new ApiException(400, "Missing required parameter 'body' when calling ContainerApi->ContainerCreate");

         var localVarPath = "/containers/create";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/octet-stream"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
         if (body != null && body.GetType() != typeof(byte[]))
         {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
         }
         else
         {
            localVarPostBody = body; // byte array
         }


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerCreate", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerCreateResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerCreateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerCreateResponse)));
      }

      /// <summary>
      /// Create a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="body">Container to create</param>
      /// <param name="name">Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9_-]+&#x60;. (optional)</param>
      /// <returns>Task of ContainerCreateResponse</returns>
      public async System.Threading.Tasks.Task<ContainerCreateResponse> ContainerCreateAsync(object body, string name = null)
      {
         ApiResponse<ContainerCreateResponse> localVarResponse = await ContainerCreateAsyncWithHttpInfo(body, name);
         return localVarResponse.Data;

      }

      /// <summary>
      /// Create a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="body">Container to create</param>
      /// <param name="name">Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9_-]+&#x60;. (optional)</param>
      /// <returns>Task of ApiResponse (ContainerCreateResponse)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<ContainerCreateResponse>> ContainerCreateAsyncWithHttpInfo(object body, string name = null)
      {
         // verify the required parameter 'body' is set
         if (body == null)
            throw new ApiException(400, "Missing required parameter 'body' when calling ContainerApi->ContainerCreate");

         var localVarPath = "/containers/create";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/octet-stream"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
         if (body != null && body.GetType() != typeof(byte[]))
         {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
         }
         else
         {
            localVarPostBody = body; // byte array
         }


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerCreate", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerCreateResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerCreateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerCreateResponse)));
      }

      /// <summary>
      /// Remove a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="v">Remove the volumes associated with the container. (optional, default to false)</param>
      /// <param name="force">If the container is running, kill it before removing it. (optional, default to false)</param>
      /// <param name="link">Remove the specified link associated with the container. (optional, default to false)</param>
      /// <returns></returns>
      public void ContainerDelete(string id, bool? v = null, bool? force = null, bool? link = null)
      {
         ContainerDeleteWithHttpInfo(id, v, force, link);
      }

      /// <summary>
      /// Remove a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="v">Remove the volumes associated with the container. (optional, default to false)</param>
      /// <param name="force">If the container is running, kill it before removing it. (optional, default to false)</param>
      /// <param name="link">Remove the specified link associated with the container. (optional, default to false)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerDeleteWithHttpInfo(string id, bool? v = null, bool? force = null, bool? link = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerDelete");

         var localVarPath = "/containers/{id}";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (v != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "v", v)); // query parameter
         if (force != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
         if (link != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "link", link)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerDelete", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Remove a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="v">Remove the volumes associated with the container. (optional, default to false)</param>
      /// <param name="force">If the container is running, kill it before removing it. (optional, default to false)</param>
      /// <param name="link">Remove the specified link associated with the container. (optional, default to false)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerDeleteAsync(string id, bool? v = null, bool? force = null, bool? link = null)
      {
         await ContainerDeleteAsyncWithHttpInfo(id, v, force, link);

      }

      /// <summary>
      /// Remove a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="v">Remove the volumes associated with the container. (optional, default to false)</param>
      /// <param name="force">If the container is running, kill it before removing it. (optional, default to false)</param>
      /// <param name="link">Remove the specified link associated with the container. (optional, default to false)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerDeleteAsyncWithHttpInfo(string id, bool? v = null, bool? force = null, bool? link = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerDelete");

         var localVarPath = "/containers/{id}";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (v != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "v", v)); // query parameter
         if (force != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "force", force)); // query parameter
         if (link != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "link", link)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerDelete", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Export a container Export the contents of a container as a tarball.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns></returns>
      public void ContainerExport(string id)
      {
         ContainerExportWithHttpInfo(id);
      }

      /// <summary>
      /// Export a container Export the contents of a container as a tarball.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerExportWithHttpInfo(string id)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerExport");

         var localVarPath = "/containers/{id}/export";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerExport", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Export a container Export the contents of a container as a tarball.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerExportAsync(string id)
      {
         await ContainerExportAsyncWithHttpInfo(id);

      }

      /// <summary>
      /// Export a container Export the contents of a container as a tarball.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerExportAsyncWithHttpInfo(string id)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerExport");

         var localVarPath = "/containers/{id}/export";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerExport", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Inspect a container Return low-level information about a container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60; (optional, default to false)</param>
      /// <returns>ContainerInspectResponse</returns>
      public ContainerInspectResponse ContainerInspect(string id, bool? size = null)
      {
         ApiResponse<ContainerInspectResponse> localVarResponse = ContainerInspectWithHttpInfo(id, size);
         return localVarResponse.Data;
      }

      /// <summary>
      /// Inspect a container Return low-level information about a container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60; (optional, default to false)</param>
      /// <returns>ApiResponse of ContainerInspectResponse</returns>
      public ApiResponse<ContainerInspectResponse> ContainerInspectWithHttpInfo(string id, bool? size = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerInspect");

         var localVarPath = "/containers/{id}/json";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerInspect", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerInspectResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerInspectResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerInspectResponse)));
      }

      /// <summary>
      /// Inspect a container Return low-level information about a container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60; (optional, default to false)</param>
      /// <returns>Task of ContainerInspectResponse</returns>
      public async System.Threading.Tasks.Task<ContainerInspectResponse> ContainerInspectAsync(string id, bool? size = null)
      {
         ApiResponse<ContainerInspectResponse> localVarResponse = await ContainerInspectAsyncWithHttpInfo(id, size);
         return localVarResponse.Data;

      }

      /// <summary>
      /// Inspect a container Return low-level information about a container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60; (optional, default to false)</param>
      /// <returns>Task of ApiResponse (ContainerInspectResponse)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<ContainerInspectResponse>> ContainerInspectAsyncWithHttpInfo(string id, bool? size = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerInspect");

         var localVarPath = "/containers/{id}/json";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerInspect", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerInspectResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerInspectResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerInspectResponse)));
      }

      /// <summary>
      /// Kill a container Send a POSIX signal to a container, defaulting to killing to the container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="signal">Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;) (optional, default to SIGKILL)</param>
      /// <returns></returns>
      public void ContainerKill(string id, string signal = null)
      {
         ContainerKillWithHttpInfo(id, signal);
      }

      /// <summary>
      /// Kill a container Send a POSIX signal to a container, defaulting to killing to the container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="signal">Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;) (optional, default to SIGKILL)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerKillWithHttpInfo(string id, string signal = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerKill");

         var localVarPath = "/containers/{id}/kill";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (signal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signal", signal)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerKill", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Kill a container Send a POSIX signal to a container, defaulting to killing to the container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="signal">Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;) (optional, default to SIGKILL)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerKillAsync(string id, string signal = null)
      {
         await ContainerKillAsyncWithHttpInfo(id, signal);

      }

      /// <summary>
      /// Kill a container Send a POSIX signal to a container, defaulting to killing to the container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="signal">Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;) (optional, default to SIGKILL)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerKillAsyncWithHttpInfo(string id, string signal = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerKill");

         var localVarPath = "/containers/{id}/kill";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (signal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "signal", signal)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerKill", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// List containers Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="all">Return all containers. By default, only running containers are shown (optional, default to false)</param>
      /// <param name="limit">Return this number of most recently created containers, including non-running ones. (optional)</param>
      /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. (optional, default to false)</param>
      /// <param name="filters">Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers. Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;)  (optional)</param>
      /// <returns>ContainerSummary</returns>
      public ContainerSummary ContainerList(bool? all = null, int? limit = null, bool? size = null, string filters = null)
      {
         ApiResponse<ContainerSummary> localVarResponse = ContainerListWithHttpInfo(all, limit, size, filters);
         return localVarResponse.Data;
      }

      /// <summary>
      /// List containers Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="all">Return all containers. By default, only running containers are shown (optional, default to false)</param>
      /// <param name="limit">Return this number of most recently created containers, including non-running ones. (optional)</param>
      /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. (optional, default to false)</param>
      /// <param name="filters">Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers. Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;)  (optional)</param>
      /// <returns>ApiResponse of ContainerSummary</returns>
      public ApiResponse<ContainerSummary> ContainerListWithHttpInfo(bool? all = null, int? limit = null, bool? size = null, string filters = null)
      {

         var localVarPath = "/containers/json";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
         if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
         if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
         if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerList", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerSummary>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerSummary)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerSummary)));
      }

      /// <summary>
      /// List containers Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="all">Return all containers. By default, only running containers are shown (optional, default to false)</param>
      /// <param name="limit">Return this number of most recently created containers, including non-running ones. (optional)</param>
      /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. (optional, default to false)</param>
      /// <param name="filters">Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers. Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;)  (optional)</param>
      /// <returns>Task of ContainerSummary</returns>
      public async System.Threading.Tasks.Task<ContainerSummary> ContainerListAsync(bool? all = null, int? limit = null, bool? size = null, string filters = null)
      {
         ApiResponse<ContainerSummary> localVarResponse = await ContainerListAsyncWithHttpInfo(all, limit, size, filters);
         return localVarResponse.Data;

      }

      /// <summary>
      /// List containers Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="all">Return all containers. By default, only running containers are shown (optional, default to false)</param>
      /// <param name="limit">Return this number of most recently created containers, including non-running ones. (optional)</param>
      /// <param name="size">Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. (optional, default to false)</param>
      /// <param name="filters">Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers. Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;)  (optional)</param>
      /// <returns>Task of ApiResponse (ContainerSummary)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<ContainerSummary>> ContainerListAsyncWithHttpInfo(bool? all = null, int? limit = null, bool? size = null, string filters = null)
      {

         var localVarPath = "/containers/json";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
         if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
         if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
         if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerList", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerSummary>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerSummary)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerSummary)));
      }

      /// <summary>
      /// Get container logs Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a container.  Note: This endpoint works only for containers with the &#x60;json-file&#x60; or &#x60;journald&#x60; logging driver. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="follow">Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)</param>
      /// <param name="stdout">Return logs from &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Return logs from &#x60;stderr&#x60; (optional, default to false)</param>
      /// <param name="since">Only return logs since this time, as a UNIX timestamp (optional, default to 0)</param>
      /// <param name="until">Only return logs before this time, as a UNIX timestamp (optional, default to 0)</param>
      /// <param name="timestamps">Add timestamps to every log line (optional, default to false)</param>
      /// <param name="tail">Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)</param>
      /// <returns>string</returns>
      public string ContainerLogs(string id, bool? follow = null, bool? stdout = null, bool? stderr = null, int? since = null, int? until = null, bool? timestamps = null, string tail = null)
      {
         ApiResponse<string> localVarResponse = ContainerLogsWithHttpInfo(id, follow, stdout, stderr, since, until, timestamps, tail);
         return localVarResponse.Data;
      }

      /// <summary>
      /// Get container logs Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a container.  Note: This endpoint works only for containers with the &#x60;json-file&#x60; or &#x60;journald&#x60; logging driver. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="follow">Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)</param>
      /// <param name="stdout">Return logs from &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Return logs from &#x60;stderr&#x60; (optional, default to false)</param>
      /// <param name="since">Only return logs since this time, as a UNIX timestamp (optional, default to 0)</param>
      /// <param name="until">Only return logs before this time, as a UNIX timestamp (optional, default to 0)</param>
      /// <param name="timestamps">Add timestamps to every log line (optional, default to false)</param>
      /// <param name="tail">Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)</param>
      /// <returns>ApiResponse of string</returns>
      public ApiResponse<string> ContainerLogsWithHttpInfo(string id, bool? follow = null, bool? stdout = null, bool? stderr = null, int? since = null, int? until = null, bool? timestamps = null, string tail = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerLogs");

         var localVarPath = "/containers/{id}/logs";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (follow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "follow", follow)); // query parameter
         if (stdout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdout", stdout)); // query parameter
         if (stderr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stderr", stderr)); // query parameter
         if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
         if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
         if (timestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamps", timestamps)); // query parameter
         if (tail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tail", tail)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerLogs", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<string>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (string)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
      }

      /// <summary>
      /// Get container logs Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a container.  Note: This endpoint works only for containers with the &#x60;json-file&#x60; or &#x60;journald&#x60; logging driver. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="follow">Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)</param>
      /// <param name="stdout">Return logs from &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Return logs from &#x60;stderr&#x60; (optional, default to false)</param>
      /// <param name="since">Only return logs since this time, as a UNIX timestamp (optional, default to 0)</param>
      /// <param name="until">Only return logs before this time, as a UNIX timestamp (optional, default to 0)</param>
      /// <param name="timestamps">Add timestamps to every log line (optional, default to false)</param>
      /// <param name="tail">Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)</param>
      /// <returns>Task of string</returns>
      public async System.Threading.Tasks.Task<string> ContainerLogsAsync(string id, bool? follow = null, bool? stdout = null, bool? stderr = null, int? since = null, int? until = null, bool? timestamps = null, string tail = null)
      {
         ApiResponse<string> localVarResponse = await ContainerLogsAsyncWithHttpInfo(id, follow, stdout, stderr, since, until, timestamps, tail);
         return localVarResponse.Data;

      }

      /// <summary>
      /// Get container logs Get &#x60;stdout&#x60; and &#x60;stderr&#x60; logs from a container.  Note: This endpoint works only for containers with the &#x60;json-file&#x60; or &#x60;journald&#x60; logging driver. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="follow">Return the logs as a stream.  This will return a &#x60;101&#x60; HTTP response with a &#x60;Connection: upgrade&#x60; header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).  (optional, default to false)</param>
      /// <param name="stdout">Return logs from &#x60;stdout&#x60; (optional, default to false)</param>
      /// <param name="stderr">Return logs from &#x60;stderr&#x60; (optional, default to false)</param>
      /// <param name="since">Only return logs since this time, as a UNIX timestamp (optional, default to 0)</param>
      /// <param name="until">Only return logs before this time, as a UNIX timestamp (optional, default to 0)</param>
      /// <param name="timestamps">Add timestamps to every log line (optional, default to false)</param>
      /// <param name="tail">Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. (optional, default to all)</param>
      /// <returns>Task of ApiResponse (string)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<string>> ContainerLogsAsyncWithHttpInfo(string id, bool? follow = null, bool? stdout = null, bool? stderr = null, int? since = null, int? until = null, bool? timestamps = null, string tail = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerLogs");

         var localVarPath = "/containers/{id}/logs";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (follow != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "follow", follow)); // query parameter
         if (stdout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stdout", stdout)); // query parameter
         if (stderr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stderr", stderr)); // query parameter
         if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
         if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
         if (timestamps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamps", timestamps)); // query parameter
         if (tail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tail", tail)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerLogs", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<string>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (string)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
      }

      /// <summary>
      /// Pause a container Use the cgroups freezer to suspend all processes in a container.  Traditionally, when suspending a process the &#x60;SIGSTOP&#x60; signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns></returns>
      public void ContainerPause(string id)
      {
         ContainerPauseWithHttpInfo(id);
      }

      /// <summary>
      /// Pause a container Use the cgroups freezer to suspend all processes in a container.  Traditionally, when suspending a process the &#x60;SIGSTOP&#x60; signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerPauseWithHttpInfo(string id)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerPause");

         var localVarPath = "/containers/{id}/pause";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerPause", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Pause a container Use the cgroups freezer to suspend all processes in a container.  Traditionally, when suspending a process the &#x60;SIGSTOP&#x60; signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerPauseAsync(string id)
      {
         await ContainerPauseAsyncWithHttpInfo(id);

      }

      /// <summary>
      /// Pause a container Use the cgroups freezer to suspend all processes in a container.  Traditionally, when suspending a process the &#x60;SIGSTOP&#x60; signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerPauseAsyncWithHttpInfo(string id)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerPause");

         var localVarPath = "/containers/{id}/pause";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerPause", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Delete stopped containers 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="filters">Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)</param>
      /// <returns>ContainerPruneResponse</returns>
      public ContainerPruneResponse ContainerPrune(string filters = null)
      {
         ApiResponse<ContainerPruneResponse> localVarResponse = ContainerPruneWithHttpInfo(filters);
         return localVarResponse.Data;
      }

      /// <summary>
      /// Delete stopped containers 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="filters">Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)</param>
      /// <returns>ApiResponse of ContainerPruneResponse</returns>
      public ApiResponse<ContainerPruneResponse> ContainerPruneWithHttpInfo(string filters = null)
      {

         var localVarPath = "/containers/prune";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerPrune", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerPruneResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerPruneResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerPruneResponse)));
      }

      /// <summary>
      /// Delete stopped containers 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="filters">Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)</param>
      /// <returns>Task of ContainerPruneResponse</returns>
      public async System.Threading.Tasks.Task<ContainerPruneResponse> ContainerPruneAsync(string filters = null)
      {
         ApiResponse<ContainerPruneResponse> localVarResponse = await ContainerPruneAsyncWithHttpInfo(filters);
         return localVarResponse.Data;

      }

      /// <summary>
      /// Delete stopped containers 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="filters">Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels.  (optional)</param>
      /// <returns>Task of ApiResponse (ContainerPruneResponse)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<ContainerPruneResponse>> ContainerPruneAsyncWithHttpInfo(string filters = null)
      {

         var localVarPath = "/containers/prune";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (filters != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerPrune", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerPruneResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerPruneResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerPruneResponse)));
      }

      /// <summary>
      /// Rename a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="name">New name for the container</param>
      /// <returns></returns>
      public void ContainerRename(string id, string name)
      {
         ContainerRenameWithHttpInfo(id, name);
      }

      /// <summary>
      /// Rename a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="name">New name for the container</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerRenameWithHttpInfo(string id, string name)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerRename");
         // verify the required parameter 'name' is set
         if (name == null)
            throw new ApiException(400, "Missing required parameter 'name' when calling ContainerApi->ContainerRename");

         var localVarPath = "/containers/{id}/rename";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerRename", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Rename a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="name">New name for the container</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerRenameAsync(string id, string name)
      {
         await ContainerRenameAsyncWithHttpInfo(id, name);

      }

      /// <summary>
      /// Rename a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="name">New name for the container</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerRenameAsyncWithHttpInfo(string id, string name)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerRename");
         // verify the required parameter 'name' is set
         if (name == null)
            throw new ApiException(400, "Missing required parameter 'name' when calling ContainerApi->ContainerRename");

         var localVarPath = "/containers/{id}/rename";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerRename", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Resize a container TTY Resize the TTY for a container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="h">Height of the tty session in characters (optional)</param>
      /// <param name="w">Width of the tty session in characters (optional)</param>
      /// <returns></returns>
      public void ContainerResize(string id, int? h = null, int? w = null)
      {
         ContainerResizeWithHttpInfo(id, h, w);
      }

      /// <summary>
      /// Resize a container TTY Resize the TTY for a container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="h">Height of the tty session in characters (optional)</param>
      /// <param name="w">Width of the tty session in characters (optional)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerResizeWithHttpInfo(string id, int? h = null, int? w = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerResize");

         var localVarPath = "/containers/{id}/resize";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (h != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "h", h)); // query parameter
         if (w != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "w", w)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerResize", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Resize a container TTY Resize the TTY for a container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="h">Height of the tty session in characters (optional)</param>
      /// <param name="w">Width of the tty session in characters (optional)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerResizeAsync(string id, int? h = null, int? w = null)
      {
         await ContainerResizeAsyncWithHttpInfo(id, h, w);

      }

      /// <summary>
      /// Resize a container TTY Resize the TTY for a container.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="h">Height of the tty session in characters (optional)</param>
      /// <param name="w">Width of the tty session in characters (optional)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerResizeAsyncWithHttpInfo(string id, int? h = null, int? w = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerResize");

         var localVarPath = "/containers/{id}/resize";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (h != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "h", h)); // query parameter
         if (w != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "w", w)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerResize", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Restart a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="t">Number of seconds to wait before killing the container (optional)</param>
      /// <returns></returns>
      public void ContainerRestart(string id, int? t = null)
      {
         ContainerRestartWithHttpInfo(id, t);
      }

      /// <summary>
      /// Restart a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="t">Number of seconds to wait before killing the container (optional)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerRestartWithHttpInfo(string id, int? t = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerRestart");

         var localVarPath = "/containers/{id}/restart";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerRestart", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Restart a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="t">Number of seconds to wait before killing the container (optional)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerRestartAsync(string id, int? t = null)
      {
         await ContainerRestartAsyncWithHttpInfo(id, t);

      }

      /// <summary>
      /// Restart a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="t">Number of seconds to wait before killing the container (optional)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerRestartAsyncWithHttpInfo(string id, int? t = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerRestart");

         var localVarPath = "/containers/{id}/restart";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerRestart", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Start a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)</param>
      /// <returns></returns>
      public void ContainerStart(string id, string detachKeys = null)
      {
         ContainerStartWithHttpInfo(id, detachKeys);
      }

      /// <summary>
      /// Start a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerStartWithHttpInfo(string id, string detachKeys = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerStart");

         var localVarPath = "/containers/{id}/start";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (detachKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detachKeys", detachKeys)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerStart", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Start a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerStartAsync(string id, string detachKeys = null)
      {
         await ContainerStartAsyncWithHttpInfo(id, detachKeys);

      }

      /// <summary>
      /// Start a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="detachKeys">Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. (optional)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerStartAsyncWithHttpInfo(string id, string detachKeys = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerStart");

         var localVarPath = "/containers/{id}/start";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (detachKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "detachKeys", detachKeys)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerStart", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Get container stats based on resource usage This endpoint returns a live stream of a container’s resource usage statistics.  The &#x60;precpu_stats&#x60; is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the &#x60;cpu_stats&#x60; field.  If either &#x60;precpu_stats.online_cpus&#x60; or &#x60;cpu_stats.online_cpus&#x60; is nil then for compatibility with older daemons the length of the corresponding &#x60;cpu_usage.percpu_usage&#x60; array should be used. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="stream">Stream the output. If false, the stats will be output once and then it will disconnect. (optional, default to true)</param>
      /// <returns>Object</returns>
      public Object ContainerStats(string id, bool? stream = null)
      {
         ApiResponse<Object> localVarResponse = ContainerStatsWithHttpInfo(id, stream);
         return localVarResponse.Data;
      }

      /// <summary>
      /// Get container stats based on resource usage This endpoint returns a live stream of a container’s resource usage statistics.  The &#x60;precpu_stats&#x60; is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the &#x60;cpu_stats&#x60; field.  If either &#x60;precpu_stats.online_cpus&#x60; or &#x60;cpu_stats.online_cpus&#x60; is nil then for compatibility with older daemons the length of the corresponding &#x60;cpu_usage.percpu_usage&#x60; array should be used. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="stream">Stream the output. If false, the stats will be output once and then it will disconnect. (optional, default to true)</param>
      /// <returns>ApiResponse of Object</returns>
      public ApiResponse<Object> ContainerStatsWithHttpInfo(string id, bool? stream = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerStats");

         var localVarPath = "/containers/{id}/stats";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (stream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stream", stream)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerStats", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
      }

      /// <summary>
      /// Get container stats based on resource usage This endpoint returns a live stream of a container’s resource usage statistics.  The &#x60;precpu_stats&#x60; is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the &#x60;cpu_stats&#x60; field.  If either &#x60;precpu_stats.online_cpus&#x60; or &#x60;cpu_stats.online_cpus&#x60; is nil then for compatibility with older daemons the length of the corresponding &#x60;cpu_usage.percpu_usage&#x60; array should be used. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="stream">Stream the output. If false, the stats will be output once and then it will disconnect. (optional, default to true)</param>
      /// <returns>Task of Object</returns>
      public async System.Threading.Tasks.Task<Object> ContainerStatsAsync(string id, bool? stream = null)
      {
         ApiResponse<Object> localVarResponse = await ContainerStatsAsyncWithHttpInfo(id, stream);
         return localVarResponse.Data;

      }

      /// <summary>
      /// Get container stats based on resource usage This endpoint returns a live stream of a container’s resource usage statistics.  The &#x60;precpu_stats&#x60; is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the &#x60;cpu_stats&#x60; field.  If either &#x60;precpu_stats.online_cpus&#x60; or &#x60;cpu_stats.online_cpus&#x60; is nil then for compatibility with older daemons the length of the corresponding &#x60;cpu_usage.percpu_usage&#x60; array should be used. 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="stream">Stream the output. If false, the stats will be output once and then it will disconnect. (optional, default to true)</param>
      /// <returns>Task of ApiResponse (Object)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerStatsAsyncWithHttpInfo(string id, bool? stream = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerStats");

         var localVarPath = "/containers/{id}/stats";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (stream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stream", stream)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerStats", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
      }

      /// <summary>
      /// Stop a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="t">Number of seconds to wait before killing the container (optional)</param>
      /// <returns></returns>
      public void ContainerStop(string id, int? t = null)
      {
         ContainerStopWithHttpInfo(id, t);
      }

      /// <summary>
      /// Stop a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="t">Number of seconds to wait before killing the container (optional)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerStopWithHttpInfo(string id, int? t = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerStop");

         var localVarPath = "/containers/{id}/stop";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerStop", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Stop a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="t">Number of seconds to wait before killing the container (optional)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerStopAsync(string id, int? t = null)
      {
         await ContainerStopAsyncWithHttpInfo(id, t);

      }

      /// <summary>
      /// Stop a container 
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="t">Number of seconds to wait before killing the container (optional)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerStopAsyncWithHttpInfo(string id, int? t = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerStop");

         var localVarPath = "/containers/{id}/stop";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (t != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "t", t)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerStop", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// List processes running inside a container On Unix systems, this is done by running the &#x60;ps&#x60; command. This endpoint is not supported on Windows.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="psArgs">The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60; (optional, default to -ef)</param>
      /// <returns>ContainerTopResponse</returns>
      public ContainerTopResponse ContainerTop(string id, string psArgs = null)
      {
         ApiResponse<ContainerTopResponse> localVarResponse = ContainerTopWithHttpInfo(id, psArgs);
         return localVarResponse.Data;
      }

      /// <summary>
      /// List processes running inside a container On Unix systems, this is done by running the &#x60;ps&#x60; command. This endpoint is not supported on Windows.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="psArgs">The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60; (optional, default to -ef)</param>
      /// <returns>ApiResponse of ContainerTopResponse</returns>
      public ApiResponse<ContainerTopResponse> ContainerTopWithHttpInfo(string id, string psArgs = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerTop");

         var localVarPath = "/containers/{id}/top";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (psArgs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ps_args", psArgs)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerTop", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerTopResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerTopResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerTopResponse)));
      }

      /// <summary>
      /// List processes running inside a container On Unix systems, this is done by running the &#x60;ps&#x60; command. This endpoint is not supported on Windows.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="psArgs">The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60; (optional, default to -ef)</param>
      /// <returns>Task of ContainerTopResponse</returns>
      public async System.Threading.Tasks.Task<ContainerTopResponse> ContainerTopAsync(string id, string psArgs = null)
      {
         ApiResponse<ContainerTopResponse> localVarResponse = await ContainerTopAsyncWithHttpInfo(id, psArgs);
         return localVarResponse.Data;

      }

      /// <summary>
      /// List processes running inside a container On Unix systems, this is done by running the &#x60;ps&#x60; command. This endpoint is not supported on Windows.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="psArgs">The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60; (optional, default to -ef)</param>
      /// <returns>Task of ApiResponse (ContainerTopResponse)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<ContainerTopResponse>> ContainerTopAsyncWithHttpInfo(string id, string psArgs = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerTop");

         var localVarPath = "/containers/{id}/top";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (psArgs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ps_args", psArgs)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerTop", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerTopResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerTopResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerTopResponse)));
      }

      /// <summary>
      /// Unpause a container Resume a container which has been paused.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns></returns>
      public void ContainerUnpause(string id)
      {
         ContainerUnpauseWithHttpInfo(id);
      }

      /// <summary>
      /// Unpause a container Resume a container which has been paused.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> ContainerUnpauseWithHttpInfo(string id)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerUnpause");

         var localVarPath = "/containers/{id}/unpause";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerUnpause", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Unpause a container Resume a container which has been paused.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task ContainerUnpauseAsync(string id)
      {
         await ContainerUnpauseAsyncWithHttpInfo(id);

      }

      /// <summary>
      /// Unpause a container Resume a container which has been paused.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> ContainerUnpauseAsyncWithHttpInfo(string id)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerUnpause");

         var localVarPath = "/containers/{id}/unpause";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerUnpause", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Update a container Change various configuration options of a container without having to recreate it.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="update"></param>
      /// <returns>ContainerUpdateResponse</returns>
      public ContainerUpdateResponse ContainerUpdate(string id, object update)
      {
         ApiResponse<ContainerUpdateResponse> localVarResponse = ContainerUpdateWithHttpInfo(id, update);
         return localVarResponse.Data;
      }

      /// <summary>
      /// Update a container Change various configuration options of a container without having to recreate it.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="update"></param>
      /// <returns>ApiResponse of ContainerUpdateResponse</returns>
      public ApiResponse<ContainerUpdateResponse> ContainerUpdateWithHttpInfo(string id, object update)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerUpdate");
         // verify the required parameter 'update' is set
         if (update == null)
            throw new ApiException(400, "Missing required parameter 'update' when calling ContainerApi->ContainerUpdate");

         var localVarPath = "/containers/{id}/update";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (update != null && update.GetType() != typeof(byte[]))
         {
            localVarPostBody = this.Configuration.ApiClient.Serialize(update); // http body (model) parameter
         }
         else
         {
            localVarPostBody = update; // byte array
         }


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerUpdate", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerUpdateResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerUpdateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerUpdateResponse)));
      }

      /// <summary>
      /// Update a container Change various configuration options of a container without having to recreate it.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="update"></param>
      /// <returns>Task of ContainerUpdateResponse</returns>
      public async System.Threading.Tasks.Task<ContainerUpdateResponse> ContainerUpdateAsync(string id, object update)
      {
         ApiResponse<ContainerUpdateResponse> localVarResponse = await ContainerUpdateAsyncWithHttpInfo(id, update);
         return localVarResponse.Data;

      }

      /// <summary>
      /// Update a container Change various configuration options of a container without having to recreate it.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="update"></param>
      /// <returns>Task of ApiResponse (ContainerUpdateResponse)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<ContainerUpdateResponse>> ContainerUpdateAsyncWithHttpInfo(string id, object update)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerUpdate");
         // verify the required parameter 'update' is set
         if (update == null)
            throw new ApiException(400, "Missing required parameter 'update' when calling ContainerApi->ContainerUpdate");

         var localVarPath = "/containers/{id}/update";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (update != null && update.GetType() != typeof(byte[]))
         {
            localVarPostBody = this.Configuration.ApiClient.Serialize(update); // http body (model) parameter
         }
         else
         {
            localVarPostBody = update; // byte array
         }


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerUpdate", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerUpdateResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerUpdateResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerUpdateResponse)));
      }

      /// <summary>
      /// Wait for a container Block until a container stops, then returns the exit code.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="condition">Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;. (optional, default to not-running)</param>
      /// <returns>ContainerWaitResponse</returns>
      public ContainerWaitResponse ContainerWait(string id, string condition = null)
      {
         ApiResponse<ContainerWaitResponse> localVarResponse = ContainerWaitWithHttpInfo(id, condition);
         return localVarResponse.Data;
      }

      /// <summary>
      /// Wait for a container Block until a container stops, then returns the exit code.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="condition">Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;. (optional, default to not-running)</param>
      /// <returns>ApiResponse of ContainerWaitResponse</returns>
      public ApiResponse<ContainerWaitResponse> ContainerWaitWithHttpInfo(string id, string condition = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerWait");

         var localVarPath = "/containers/{id}/wait";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (condition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "condition", condition)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerWait", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerWaitResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerWaitResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerWaitResponse)));
      }

      /// <summary>
      /// Wait for a container Block until a container stops, then returns the exit code.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="condition">Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;. (optional, default to not-running)</param>
      /// <returns>Task of ContainerWaitResponse</returns>
      public async System.Threading.Tasks.Task<ContainerWaitResponse> ContainerWaitAsync(string id, string condition = null)
      {
         ApiResponse<ContainerWaitResponse> localVarResponse = await ContainerWaitAsyncWithHttpInfo(id, condition);
         return localVarResponse.Data;

      }

      /// <summary>
      /// Wait for a container Block until a container stops, then returns the exit code.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="condition">Wait until a container state reaches the given condition, either &#39;not-running&#39; (default), &#39;next-exit&#39;, or &#39;removed&#39;. (optional, default to not-running)</param>
      /// <returns>Task of ApiResponse (ContainerWaitResponse)</returns>
      public async System.Threading.Tasks.Task<ApiResponse<ContainerWaitResponse>> ContainerWaitAsyncWithHttpInfo(string id, string condition = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->ContainerWait");

         var localVarPath = "/containers/{id}/wait";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (condition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "condition", condition)); // query parameter


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("ContainerWait", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<ContainerWaitResponse>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             (ContainerWaitResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerWaitResponse)));
      }

      /// <summary>
      /// Extract an archive of files or folders to a directory in a container Upload a tar archive to be extracted to a path in the filesystem of container id.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Path to a directory in the container to extract the archive’s contents into. </param>
      /// <param name="inputStream">The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.</param>
      /// <param name="noOverwriteDirNonDir">If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. (optional)</param>
      /// <param name="copyUIDGID">If “1”, “true”, then it will copy UID/GID maps to the dest file or dir (optional)</param>
      /// <returns></returns>
      public void PutContainerArchive(string id, string path, byte[] inputStream, string noOverwriteDirNonDir = null, string copyUIDGID = null)
      {
         PutContainerArchiveWithHttpInfo(id, path, inputStream, noOverwriteDirNonDir, copyUIDGID);
      }

      /// <summary>
      /// Extract an archive of files or folders to a directory in a container Upload a tar archive to be extracted to a path in the filesystem of container id.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Path to a directory in the container to extract the archive’s contents into. </param>
      /// <param name="inputStream">The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.</param>
      /// <param name="noOverwriteDirNonDir">If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. (optional)</param>
      /// <param name="copyUIDGID">If “1”, “true”, then it will copy UID/GID maps to the dest file or dir (optional)</param>
      /// <returns>ApiResponse of Object(void)</returns>
      public ApiResponse<Object> PutContainerArchiveWithHttpInfo(string id, string path, byte[] inputStream, string noOverwriteDirNonDir = null, string copyUIDGID = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->PutContainerArchive");
         // verify the required parameter 'path' is set
         if (path == null)
            throw new ApiException(400, "Missing required parameter 'path' when calling ContainerApi->PutContainerArchive");
         // verify the required parameter 'inputStream' is set
         if (inputStream == null)
            throw new ApiException(400, "Missing required parameter 'inputStream' when calling ContainerApi->PutContainerArchive");

         var localVarPath = "/containers/{id}/archive";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/x-tar",
                "application/octet-stream"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
         if (noOverwriteDirNonDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "noOverwriteDirNonDir", noOverwriteDirNonDir)); // query parameter
         if (copyUIDGID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyUIDGID", copyUIDGID)); // query parameter
         if (inputStream != null && inputStream.GetType() != typeof(byte[]))
         {
            localVarPostBody = this.Configuration.ApiClient.Serialize(inputStream); // http body (model) parameter
         }
         else
         {
            localVarPostBody = inputStream; // byte array
         }


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
             Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("PutContainerArchive", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

      /// <summary>
      /// Extract an archive of files or folders to a directory in a container Upload a tar archive to be extracted to a path in the filesystem of container id.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Path to a directory in the container to extract the archive’s contents into. </param>
      /// <param name="inputStream">The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.</param>
      /// <param name="noOverwriteDirNonDir">If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. (optional)</param>
      /// <param name="copyUIDGID">If “1”, “true”, then it will copy UID/GID maps to the dest file or dir (optional)</param>
      /// <returns>Task of void</returns>
      public async System.Threading.Tasks.Task PutContainerArchiveAsync(string id, string path, byte[] inputStream, string noOverwriteDirNonDir = null, string copyUIDGID = null)
      {
         await PutContainerArchiveAsyncWithHttpInfo(id, path, inputStream, noOverwriteDirNonDir, copyUIDGID);

      }

      /// <summary>
      /// Extract an archive of files or folders to a directory in a container Upload a tar archive to be extracted to a path in the filesystem of container id.
      /// </summary>
      /// <exception cref="ApiException">Thrown when fails to make API call</exception>
      /// <param name="id">ID or name of the container</param>
      /// <param name="path">Path to a directory in the container to extract the archive’s contents into. </param>
      /// <param name="inputStream">The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.</param>
      /// <param name="noOverwriteDirNonDir">If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. (optional)</param>
      /// <param name="copyUIDGID">If “1”, “true”, then it will copy UID/GID maps to the dest file or dir (optional)</param>
      /// <returns>Task of ApiResponse</returns>
      public async System.Threading.Tasks.Task<ApiResponse<Object>> PutContainerArchiveAsyncWithHttpInfo(string id, string path, byte[] inputStream, string noOverwriteDirNonDir = null, string copyUIDGID = null)
      {
         // verify the required parameter 'id' is set
         if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ContainerApi->PutContainerArchive");
         // verify the required parameter 'path' is set
         if (path == null)
            throw new ApiException(400, "Missing required parameter 'path' when calling ContainerApi->PutContainerArchive");
         // verify the required parameter 'inputStream' is set
         if (inputStream == null)
            throw new ApiException(400, "Missing required parameter 'inputStream' when calling ContainerApi->PutContainerArchive");

         var localVarPath = "/containers/{id}/archive";
         var localVarPathParams = new Dictionary<String, String>();
         var localVarQueryParams = new List<KeyValuePair<String, String>>();
         var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
         var localVarFormParams = new Dictionary<String, String>();
         var localVarFileParams = new Dictionary<String, FileParameter>();
         Object localVarPostBody = null;

         // to determine the Content-Type header
         String[] localVarHttpContentTypes = new String[] {
                "application/x-tar",
                "application/octet-stream"
            };
         String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

         // to determine the Accept header
         String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
         String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
         if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

         if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
         if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
         if (noOverwriteDirNonDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "noOverwriteDirNonDir", noOverwriteDirNonDir)); // query parameter
         if (copyUIDGID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "copyUIDGID", copyUIDGID)); // query parameter
         if (inputStream != null && inputStream.GetType() != typeof(byte[]))
         {
            localVarPostBody = this.Configuration.ApiClient.Serialize(inputStream); // http body (model) parameter
         }
         else
         {
            localVarPostBody = inputStream; // byte array
         }


         // make the HTTP request
         IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
             Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
             localVarPathParams, localVarHttpContentType);

         int localVarStatusCode = (int)localVarResponse.StatusCode;

         if (ExceptionFactory != null)
         {
            Exception exception = ExceptionFactory("PutContainerArchive", localVarResponse);
            if (exception != null) throw exception;
         }

         return new ApiResponse<Object>(localVarStatusCode,
             localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
             null);
      }

   }
}
