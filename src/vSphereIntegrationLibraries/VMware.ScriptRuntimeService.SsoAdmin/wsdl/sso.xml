<?xml version="1.0" encoding="UTF-8" ?>
<definitions
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>
   <doc-templates>
   </doc-templates>
   <version-types>
      <version-type name="vmodl.query.version.version1"
         type-id="vmodl.query.version.version1"
         vmodl-name="vmodl.query.version.version1"
         service-namespace=""
      >
         <compatible-version-id>interface vmodl.version.version0</compatible-version-id>
      </version-type>
      <version-type name="vmodl.query.version.version2"
         type-id="vmodl.query.version.version2"
         vmodl-name="vmodl.query.version.version2"
         display-name="vSphere API 4.0"
         service-namespace=""
      >
         <compatible-version-id>interface vmodl.version.version1</compatible-version-id>
         <compatible-version-id>interface vmodl.query.version.version1</compatible-version-id>
      </version-type>
      <version-type name="vmodl.query.version.version3"
         type-id="vmodl.query.version.version3"
         vmodl-name="vmodl.query.version.version3"
         display-name="vSphere API 4.1"
         service-namespace=""
      >
         <compatible-version-id>interface vmodl.query.version.version2</compatible-version-id>
      </version-type>
      <version-type name="vmodl.query.version.version4"
         type-id="vmodl.query.version.version4"
         vmodl-name="vmodl.query.version.version4"
         display-name="vSphere API 5.0"
         service-namespace=""
      >
         <compatible-version-id>interface vmodl.query.version.version3</compatible-version-id>
         <compatible-version-id>interface vmodl.version.version2</compatible-version-id>
      </version-type>
      <version-type name="reflect"
         type-id="vmodl.reflect.version.version1"
         vmodl-name="vmodl.reflect.version.version1"
         version-id="1.0"
         service-namespace=""
      >
         <compatible-version-id>interface vmodl.version.version2</compatible-version-id>
      </version-type>
      <version-type name="vmodl.version.version0"
         type-id="vmodl.version.version0"
         vmodl-name="vmodl.version.version0"
         service-namespace=""
      >
      </version-type>
      <version-type name="vmodl.version.version1"
         type-id="vmodl.version.version1"
         vmodl-name="vmodl.version.version1"
         display-name="vSphere API 4.0"
         service-namespace=""
      >
         <compatible-version-id>interface vmodl.version.version0</compatible-version-id>
      </version-type>
      <version-type name="vmodl.version.version2"
         type-id="vmodl.version.version2"
         vmodl-name="vmodl.version.version2"
         display-name="vSphere API 5.0"
         service-namespace=""
      >
         <compatible-version-id>interface vmodl.version.version1</compatible-version-id>
      </version-type>
      <version-type name="sso"
         type-id="sso.version.version1"
         vmodl-name="sso.version.version1"
         version-id="version1"
         service-namespace=""
      >
         <compatible-version-id>interface vmodl.version.version0</compatible-version-id>
      </version-type>
   </version-types>
     <built-ins>
<built-in name="void" vmodl-name="void" type-id="void" />
<built-in name="xsd:boolean" vmodl-name="BOOLEAN" type-id="BOOLEAN" />
<built-in name="xsd:byte" vmodl-name="BYTE" type-id="BYTE" />
<built-in name="xsd:int" vmodl-name="INT" type-id="INT" />
<built-in name="xsd:long" vmodl-name="LONG" type-id="LONG" />
<built-in name="xsd:short" vmodl-name="SHORT" type-id="SHORT" />
<built-in name="xsd:double" vmodl-name="DOUBLE" type-id="DOUBLE" />
<built-in name="xsd:float" vmodl-name="FLOAT" type-id="FLOAT" />
<built-in name="xsd:string" vmodl-name="java.lang.String" type-id="java.lang.String" />
<built-in name="xsd:anyType" vmodl-name="vmodl.Any" type-id="vmodl.Any" />
<built-in name="xsd:string" vmodl-name="vmodl.TypeName" type-id="vmodl.TypeName" />
<built-in name="xsd:dateTime" vmodl-name="vmodl.DateTime" type-id="vmodl.DateTime" />
<built-in name="xsd:string" vmodl-name="vmodl.PropertyPath" type-id="vmodl.PropertyPath" />
<built-in name="xsd:string" vmodl-name="vmodl.MethodName" type-id="vmodl.MethodName" />
<built-in name="tns:ManagedObjectReference" vmodl-name="vmodl.ManagedObject" type-id="vmodl.ManagedObject" />
<built-in name="xsd:anyURI" vmodl-name="vmodl.URI" type-id="vmodl.URI" />
<built-in name="xsd:base64Binary" vmodl-name="vmodl.Binary" type-id="vmodl.Binary" />
</built-ins>

   <needed-array-types>
      <needed-array-type arrayNameBase="SsoPrincipalId" name="SsoPrincipalId" type="tns:SsoPrincipalId" type-id-ref="sso.PrincipalId"/>
      <needed-array-type arrayNameBase="SsoAdminConfigurationManagementServiceCertificateChain" name="SsoAdminConfigurationManagementServiceCertificateChain" type="tns:SsoAdminConfigurationManagementServiceCertificateChain" type-id-ref="sso.admin.ConfigurationManagementService.CertificateChain"/>
      <needed-array-type arrayNameBase="SsoAdminExternalDomain" name="SsoAdminExternalDomain" type="tns:SsoAdminExternalDomain" type-id-ref="sso.admin.ExternalDomain"/>
      <needed-array-type arrayNameBase="SsoAdminGroup" name="SsoAdminGroup" type="tns:SsoAdminGroup" type-id-ref="sso.admin.Group"/>
      <needed-array-type arrayNameBase="SsoAdminPersonUser" name="SsoAdminPersonUser" type="tns:SsoAdminPersonUser" type-id-ref="sso.admin.PersonUser"/>
      <needed-array-type arrayNameBase="SsoAdminSolutionUser" name="SsoAdminSolutionUser" type="tns:SsoAdminSolutionUser" type-id-ref="sso.admin.SolutionUser"/>
      <needed-array-type arrayNameBase="SsoAdminUser" name="SsoAdminUser" type="tns:SsoAdminUser" type-id-ref="sso.admin.User"/>
      <needed-array-type arrayNameBase="DynamicProperty" name="DynamicProperty" type="tns:DynamicProperty" type-id-ref="vmodl.DynamicProperty"/>
      <needed-array-type arrayNameBase="Boolean" name="boolean" type="xsd:boolean"/>
      <needed-array-type arrayNameBase="Int" name="int" type="xsd:int"/>
      <needed-array-type arrayNameBase="AnyType" name="anytype" type="xsd:anyType"/>
      <needed-array-type arrayNameBase="String" name="string" type="xsd:string"/>
   </needed-array-types>
   <enums>
   <enum name="SsoAdminExternalDomainAuthenticationType"
      type-id="sso.admin.ExternalDomain.AuthenticationType"
      vmodl-name="sso.admin.ExternalDomain.AuthenticationType"
      enclosing-type-id-ref="sso.admin.ExternalDomain"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Symbolic names of the supported methods by which the SSO Server may
 authenticate against the external servers when searching for users and
 groups.]]>
      </description-html>
   <value name="anonymous" vmodl-name="anonymous">
   <description-html>
      <![CDATA[The SSO server will use no authentication.]]>
   </description-html>
   </value>
   <value name="password" vmodl-name="password">
   <description-html>
      <![CDATA[A combination of a user name and password will be used for
 authentication.]]>
   </description-html>
   </value>
   <value name="reuseSession" vmodl-name="reuseSession">
   <description-html>
      <![CDATA[The SSO server will reuse the process session credentials to
 authenticate against the external server.
 <p>
 This method is only supported if the external server is of type
 "Active Directory" and the SSO server runs as a user already
 authenticated against the same Windows Domain the external server
 belongs to (i.e. a Windows Domain user, the Local System account of the
 Network Service account).]]>
   </description-html>
   </value>
   </enum>
   <enum name="SsoAdminExternalDomainType"
      type-id="sso.admin.ExternalDomain.Type"
      vmodl-name="sso.admin.ExternalDomain.Type"
      enclosing-type-id-ref="sso.admin.ExternalDomain"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Symbolic names for all supported external server types which can be used
 as Domains by the SSO server.]]>
      </description-html>
   <value name="ActiveDirectory" vmodl-name="ActiveDirectory">
   <description-html>
      <![CDATA[The external server is a Microsoft Active Directory Server. Versions of
 Active Directory 2003 and later are supported.]]>
   </description-html>
   </value>
   <value name="OpenLdap" vmodl-name="OpenLdap">
   <description-html>
      <![CDATA[The external server is an OpenLDAP server. OpenLDAP version 2.4 and
 later are supported.]]>
   </description-html>
   </value>
   <value name="NIS" vmodl-name="NIS">
   <description-html>
      <![CDATA[The external server is a NIS server.]]>
   </description-html>
   </value>
   </enum>
   <enum name="SsoAdminRoleManagementServiceRole"
      type-id="sso.admin.RoleManagementService.Role"
      vmodl-name="sso.admin.RoleManagementService.Role"
      enclosing-type-id-ref="sso.admin.RoleManagementService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[A comparable list of user roles. Roles are incremental which means each
 higher role is a superset of its weaker ones.
 <p>
 It is <b>very important</b> that role constants are defined in ascending
 order so that the lowest role is at the top and thus has the smallest
 numeric value.]]>
      </description-html>
   <value name="GuestUser" vmodl-name="GuestUser">
   <description-html>
      <![CDATA[Guest access. The most restrictive access which in addition to
 unauthorized access also allows limited self-management capabilities
 such as updating own password and details. All users do have at least
 this role.]]>
   </description-html>
   </value>
   <value name="RegularUser" vmodl-name="RegularUser">
   <description-html>
      <![CDATA[Read access. In addition to guest role it also allows browsing SSO
 identity store.]]>
   </description-html>
   </value>
   <value name="Administrator" vmodl-name="Administrator">
   <description-html>
      <![CDATA[Administrative access is the highest possible role. It provides access
 to all operations which include regular access as well as server
 configuration, user management etc.]]>
   </description-html>
   </value>
   </enum>
   <enum name="SsoAdminUserKind"
      type-id="sso.admin.User.Kind"
      vmodl-name="sso.admin.User.Kind"
      enclosing-type-id-ref="sso.admin.User"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Lists all the available kinds of users]]>
      </description-html>
   <value name="person" vmodl-name="person">
   <description-html>
      <![CDATA[Person user; corresponds to <a href="sso.admin.PersonUser.html">SsoAdminPersonUser</a>]]>
   </description-html>
   </value>
   <value name="solution" vmodl-name="solution">
   <description-html>
      <![CDATA[Solution user; corresponds to <a href="sso.admin.SolutionUser.html">SsoAdminSolutionUser</a>]]>
   </description-html>
   </value>
   </enum>
   </enums>
   <faults>
   <fault name="HostCommunication"
      type-id="vmodl.fault.HostCommunication"
      vmodl-name="vmodl.fault.HostCommunication"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[A HostCommunication fault is thrown if an error happened
  while communicating to a host. This would typically be
  due to network connections or server failures.]]>
      </description-html>
   </fault>
   <fault name="HostNotConnected"
      type-id="vmodl.fault.HostNotConnected"
      vmodl-name="vmodl.fault.HostNotConnected"
      base-type-id="vmodl.fault.HostCommunication"
      >
      <description-html>
         <![CDATA[A HostNotConnected fault is thrown if a method needs
  to communicate with a host that has been disconnected in
  VirtualCenter.]]>
      </description-html>
   </fault>
   <fault name="HostNotReachable"
      type-id="vmodl.fault.HostNotReachable"
      vmodl-name="vmodl.fault.HostNotReachable"
      base-type-id="vmodl.fault.HostCommunication"
      >
      <description-html>
         <![CDATA[A HostNotReachable fault is thrown if the server was unable
  to communicate with the host]]>
      </description-html>
   </fault>
   <fault name="InvalidArgument"
      type-id="vmodl.fault.InvalidArgument"
      vmodl-name="vmodl.fault.InvalidArgument"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[An InvalidArgument exception is thrown if the
  set of arguments passed to the function is not
  specified correctly.]]>
      </description-html>
            <property name="invalidProperty" type-id-ref="vmodl.PropertyPath"
      vmodl-name="invalidProperty"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Optional name of the invalid property.]]>
      </description-html>
      </property>

   </fault>
   <fault name="InvalidRequest"
      type-id="vmodl.fault.InvalidRequest"
      vmodl-name="vmodl.fault.InvalidRequest"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[An InvalidRequest fault is thrown in response to a malformed
  request to the server that fails in the transport layer, e.g.,
  the SOAP XML request was invalid. Subtypes of this fault, 
  provides more specific transport errors, such as a using a 
  reference to an unknown managed object type or method.]]>
      </description-html>
   </fault>
   <fault name="InvalidType"
      type-id="vmodl.fault.InvalidType"
      vmodl-name="vmodl.fault.InvalidType"
      base-type-id="vmodl.fault.InvalidRequest"
      >
      <description-html>
         <![CDATA[InvalidType is thrown when a managed object request refers to
  an unexpected or unknown type.]]>
      </description-html>
            <property name="argument" type-id-ref="vmodl.PropertyPath"
      vmodl-name="argument"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Name of the argument that was malformed.]]>
      </description-html>
      </property>

   </fault>
   <fault name="ManagedObjectNotFound"
      type-id="vmodl.fault.ManagedObjectNotFound"
      vmodl-name="vmodl.fault.ManagedObjectNotFound"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[A ManagedObjectNotFound exception is thrown when a request refers to
  a managed object that no longer exists or has never existed.]]>
      </description-html>
            <property name="obj" type-id-ref="vmodl.ManagedObject"
      vmodl-name="obj"
      >
      <description-html>
         <![CDATA[The managed object reference that generated the error.]]>
      </description-html>
      </property>

   </fault>
   <fault name="MethodFault"
      type-id="vmodl.MethodFault"
      vmodl-name="vmodl.MethodFault"
      >
      <description-html>
         <![CDATA[The base data object type for all the object model faults 
  that an application might handle.]]>
      </description-html>
            <property name="dynamicType" type-id-ref="java.lang.String"
      vmodl-name="dynamicType"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Reserved.]]>
      </description-html>
      </property>

            <property name="dynamicProperty" type-id-ref="vmodl.DynamicProperty"
      vmodl-name="dynamicProperty"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Set of dynamic properties. This property is optional because only the
 properties of an object that are unknown to a client will be part of this set.
 This property is not readonly just in case we want to send such properties
 from a client in the future.]]>
      </description-html>
      </property>

   </fault>
   <fault name="MethodNotFound"
      type-id="vmodl.fault.MethodNotFound"
      vmodl-name="vmodl.fault.MethodNotFound"
      base-type-id="vmodl.fault.InvalidRequest"
      >
      <description-html>
         <![CDATA[MethodNotFound is thrown to indicate that a method called on a managed
 object does not exist.]]>
      </description-html>
            <property name="receiver" type-id-ref="vmodl.ManagedObject"
      vmodl-name="receiver"
      >
      <description-html>
         <![CDATA[The receiver of the call]]>
      </description-html>
      </property>

            <property name="method" type-id-ref="java.lang.String"
      vmodl-name="method"
      >
      <description-html>
         <![CDATA[The method called.]]>
      </description-html>
      </property>

   </fault>
   <fault name="NotEnoughLicenses"
      type-id="vmodl.fault.NotEnoughLicenses"
      vmodl-name="vmodl.fault.NotEnoughLicenses"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[A NotEnoughLicensesFault occurs when an operation
  fails because there are not enough licenses installed.]]>
      </description-html>
   </fault>
   <fault name="NotImplemented"
      type-id="vmodl.fault.NotImplemented"
      vmodl-name="vmodl.fault.NotImplemented"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[NotImplemented exception is thrown if the method is not
  yet implemeneted.]]>
      </description-html>
   </fault>
   <fault name="NotSupported"
      type-id="vmodl.fault.NotSupported"
      vmodl-name="vmodl.fault.NotSupported"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[Thrown if the method is not supported on the
  server. Not all methods are supported on all servers
  (for example, an ESX Server host supports less functionality than
  a VirtualCenter server). A feature might also be disabled
  due to missing liceneses.]]>
      </description-html>
   </fault>
   <fault name="RequestCanceled"
      type-id="vmodl.fault.RequestCanceled"
      vmodl-name="vmodl.fault.RequestCanceled"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[A RequestCanceled fault is thrown if the user canceled the task.]]>
      </description-html>
   </fault>
   <fault name="RuntimeFault"
      type-id="vmodl.RuntimeFault"
      vmodl-name="vmodl.RuntimeFault"
      base-type-id="vmodl.MethodFault"
      >
      <description-html>
         <![CDATA[The base data object type for all runtime faults that can be 
  thrown by a method.]]>
      </description-html>
   </fault>
   <fault name="SecurityError"
      type-id="vmodl.fault.SecurityError"
      vmodl-name="vmodl.fault.SecurityError"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[Thrown when the client is not allowed access to the property or method.]]>
      </description-html>
   </fault>
   <fault name="SsoAdminFaultDirectoryServiceConnectionFault"
      type-id="sso.admin.fault.DirectoryServiceConnectionFault"
      vmodl-name="sso.admin.fault.DirectoryServiceConnectionFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[Thrown by DomainManagementService#probeConnectivity to indicate the
 SSO Server failed to connect or authenticate to the service at the specified
 URI.]]>
      </description-html>
            <property name="uri" type-id-ref="vmodl.URI"
      vmodl-name="uri"
      >
      <description-html>
         <![CDATA[Failed attempt was made to this URI]]>
      </description-html>
      </property>

   </fault>
   <fault name="SsoAdminFaultDomainNotFoundFault"
      type-id="sso.admin.fault.DomainNotFoundFault"
      vmodl-name="sso.admin.fault.DomainNotFoundFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[Thrown to indicate that there's no Domain associated with a given name.]]>
      </description-html>
            <property name="domainName" type-id-ref="java.lang.String"
      vmodl-name="domainName"
      >
      <description-html>
         <![CDATA[Name of the domain which could not be found.]]>
      </description-html>
      </property>

   </fault>
   <fault name="SsoAdminFaultDuplicateDataFault"
      type-id="sso.admin.fault.DuplicateDataFault"
      vmodl-name="sso.admin.fault.DuplicateDataFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[Thrown to indicate data duplication. Usually not used as a top fault in chain
 of faults. Typically it is send as a cause of another fault, and . E.g. when
 trying to create a entity which already exists, caller may receive
 InvalidArgument("entityName") whose cause is DuplicateDataFault.]]>
      </description-html>
   </fault>
   <fault name="SsoAdminFaultDuplicateDomainNameFault"
      type-id="sso.admin.fault.DuplicateDomainNameFault"
      vmodl-name="sso.admin.fault.DuplicateDomainNameFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[Thrown to indicate that a Domain with the given name or alias already exists.]]>
      </description-html>
            <property name="domainName" type-id-ref="java.lang.String"
      vmodl-name="domainName"
      >
      <description-html>
         <![CDATA[Name of the duplicate domain.]]>
      </description-html>
      </property>

   </fault>
   <fault name="SsoAdminFaultDuplicateSolutionCertificateFault"
      type-id="sso.admin.fault.DuplicateSolutionCertificateFault"
      vmodl-name="sso.admin.fault.DuplicateSolutionCertificateFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[Thrown when the distinguished name ( DN ) of the provided solution
 certificate is not unique.]]>
      </description-html>
   </fault>
   <fault name="SsoAdminFaultGroupCyclicDependencyFault"
      type-id="sso.admin.fault.GroupCyclicDependencyFault"
      vmodl-name="sso.admin.fault.GroupCyclicDependencyFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[A cyclic dependency on parent-child groups relation is detected]]>
      </description-html>
            <property name="groupBeingAdded" type-id-ref="java.lang.String"
      vmodl-name="groupBeingAdded"
      >
      </property>

            <property name="existingGroup" type-id-ref="java.lang.String"
      vmodl-name="existingGroup"
      >
      </property>

   </fault>
   <fault name="SsoAdminFaultInvalidPasswordPolicyFault"
      type-id="sso.admin.fault.InvalidPasswordPolicyFault"
      vmodl-name="sso.admin.fault.InvalidPasswordPolicyFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[Thrown when the supplied password policy is invalid (e.g. negative
 prohibitedPreviousPasswordsCount, minLength > maxLength in the
 PasswordFormat, etc.)]]>
      </description-html>
   </fault>
   <fault name="SsoAdminFaultLocalOSDomainRegistrationFault"
      type-id="sso.admin.fault.LocalOSDomainRegistrationFault"
      vmodl-name="sso.admin.fault.LocalOSDomainRegistrationFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.RuntimeServiceFault"
      >
      <description-html>
         <![CDATA[Thrown upon local OS domain registration operation for one of the following
 reasons:
 <ul>
 <li>SSO server instance does not support local OS domain because it is
 installed either in multisite or HA mode</li>
 <li>the local OS domain has already been registered</li>
 </ul>]]>
      </description-html>
   </fault>
   <fault name="SsoAdminFaultPasswordPolicyViolationFault"
      type-id="sso.admin.fault.PasswordPolicyViolationFault"
      vmodl-name="sso.admin.fault.PasswordPolicyViolationFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[Thrown to indicate that the supplied password does not satisfy the Password
 Policy currently effective on the server.]]>
      </description-html>
   </fault>
   <fault name="SsoAdminFaultSmtpConfigNotSetFault"
      type-id="sso.admin.fault.SmtpConfigNotSetFault"
      vmodl-name="sso.admin.fault.SmtpConfigNotSetFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[Thrown to indicate that no SMTP configuration is set on the server]]>
      </description-html>
   </fault>
   <fault name="SsoFaultInternalFault"
      type-id="sso.fault.InternalFault"
      vmodl-name="sso.fault.InternalFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.RuntimeServiceFault"
      >
      <description-html>
         <![CDATA[Thrown to indicate some unexpected or internal failure has occurred in the
 SSO Server.
 <p>
 This exception usually indicates a bug in the server, corrupt installation
 file(s), corrupt database or incompatibility of the underlying platform (JVM,
 OS, etc.).]]>
      </description-html>
   </fault>
   <fault name="SsoFaultInvalidCredentials"
      type-id="sso.fault.InvalidCredentials"
      vmodl-name="sso.fault.InvalidCredentials"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.fault.SecurityError"
      >
      <description-html>
         <![CDATA[When the provided authentication credentials are invalid]]>
      </description-html>
   </fault>
   <fault name="SsoFaultInvalidPrincipalFault"
      type-id="sso.fault.InvalidPrincipalFault"
      vmodl-name="sso.fault.InvalidPrincipalFault"
      version-id-ref="sso.version.version1"
      base-type-id="sso.fault.ServiceFault"
      >
      <description-html>
         <![CDATA[The provided user or group is not valid]]>
      </description-html>
            <property name="principal" type-id-ref="java.lang.String"
      vmodl-name="principal"
      >
      <description-html>
         <![CDATA[The principal (group or user name) which is invalid.]]>
      </description-html>
      </property>

   </fault>
   <fault name="SsoFaultNoPermission"
      type-id="sso.fault.NoPermission"
      vmodl-name="sso.fault.NoPermission"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.fault.SecurityError"
      >
      <description-html>
         <![CDATA[Thrown when an operation is denied because of insufficient privileges]]>
      </description-html>
   </fault>
   <fault name="SsoFaultNotAuthenticated"
      type-id="sso.fault.NotAuthenticated"
      vmodl-name="sso.fault.NotAuthenticated"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.fault.SecurityError"
      >
      <description-html>
         <![CDATA[Thrown when SSO user was not authenticated while she was expected so. A
 common scenario where SSO user authentication data cannot be found is expired
 SSO user session.]]>
      </description-html>
   </fault>
   <fault name="SsoFaultRuntimeServiceFault"
      type-id="sso.fault.RuntimeServiceFault"
      vmodl-name="sso.fault.RuntimeServiceFault"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[Base runtime fault for all SSO management services]]>
      </description-html>
   </fault>
   <fault name="SsoFaultServiceFault"
      type-id="sso.fault.ServiceFault"
      vmodl-name="sso.fault.ServiceFault"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.MethodFault"
      >
      <description-html>
         <![CDATA[Base exception for all SSO management services]]>
      </description-html>
   </fault>
   <fault name="SystemError"
      type-id="vmodl.fault.SystemError"
      vmodl-name="vmodl.fault.SystemError"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[Exception type for reporting a low-level operating system
   error.]]>
      </description-html>
            <property name="reason" type-id-ref="java.lang.String"
      vmodl-name="reason"
      >
      <description-html>
         <![CDATA[A message to indicate detailed information about the error.
 This property is not internationalization friendly and
 normally reported by the underlying operating system.]]>
      </description-html>
      </property>

   </fault>
   <fault name="UnexpectedFault"
      type-id="vmodl.fault.UnexpectedFault"
      vmodl-name="vmodl.fault.UnexpectedFault"
      base-type-id="vmodl.RuntimeFault"
      >
      <description-html>
         <![CDATA[An UnexpectedFault may be thrown when a newer version of the server
  reports a error that a cannot be converted to a fault that a client
  that is using an older version of the API would expect.]]>
      </description-html>
            <property name="faultName" type-id-ref="vmodl.TypeName"
      vmodl-name="faultName"
      >
      <description-html>
         <![CDATA[Name of the unexpected fault.]]>
      </description-html>
      </property>

            <property name="fault" type-id-ref="vmodl.LocalizedMethodFault"
      vmodl-name="fault"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The unexpected fault if the server can send it in a form that the client
 will be able to deserialize.]]>
      </description-html>
      </property>

   </fault>
   </faults>
   <data-objects>
   <data-object name="DynamicArray"
      type-id="vmodl.DynamicArray"
      vmodl-name="vmodl.DynamicArray"
      >
      <description-html>
         <![CDATA[DynamicArray is a data object type that represents an array of dynamically-typed
 objects. A client should only see a DynamicArray object when the element type
 is unknown (meaning the type is newer than the client). Otherwise, a client would
 see the type as T[] where T is known.]]>
      </description-html>
            <property name="dynamicType" type-id-ref="java.lang.String"
      vmodl-name="dynamicType"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Reserved.]]>
      </description-html>
      </property>

            <property name="val" type-id-ref="vmodl.Any"
      vmodl-name="val"
      is-array="true"
      >
      <description-html>
         <![CDATA[Array of dynamic values.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="DynamicData"
      type-id="vmodl.DynamicData"
      vmodl-name="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[DynamicData is a builtin object model data object type for manipulating data
 properties dynamically. The primary usage is as a base class for types that may
 be extended with subtypes in the future, where new properties should be sent to
 old clients as a set of dynamic properties.]]>
      </description-html>
            <property name="dynamicType" type-id-ref="java.lang.String"
      vmodl-name="dynamicType"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Reserved.]]>
      </description-html>
      </property>

            <property name="dynamicProperty" type-id-ref="vmodl.DynamicProperty"
      vmodl-name="dynamicProperty"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Set of dynamic properties. This property is optional because only the
 properties of an object that are unknown to a client will be part of this set.
 This property is not readonly just in case we want to send such properties
 from a client in the future.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="DynamicProperty"
      type-id="vmodl.DynamicProperty"
      vmodl-name="vmodl.DynamicProperty"
      >
      <description-html>
         <![CDATA[The DynamicProperty data object type represents a name-value pair.]]>
      </description-html>
            <property name="name" type-id-ref="vmodl.PropertyPath"
      vmodl-name="name"
      >
      <description-html>
         <![CDATA[Path to the property.]]>
      </description-html>
      </property>

            <property name="val" type-id-ref="vmodl.Any"
      vmodl-name="val"
      >
      <description-html>
         <![CDATA[Value of the property.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="LocalizedMethodFault"
      type-id="vmodl.LocalizedMethodFault"
      vmodl-name="vmodl.LocalizedMethodFault"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[A wrapper class used to pass MethodFault data objects over the wire
  along with a localized display message for the fault.]]>
      </description-html>
            <property name="fault" type-id-ref="vmodl.MethodFault"
      vmodl-name="fault"
      >
      </property>

            <property name="localizedMessage" type-id-ref="java.lang.String"
      vmodl-name="localizedMessage"
      is-optional="true"
      is-localizable="true"
      >
      <description-html>
         <![CDATA[The localized message that would be sent in the faultstring element
 of the SOAP Fault.  It is optional so that clients are not required
 to send a localized message to the server, but servers are required
 to send the localized message to clients.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAboutInfo"
      type-id="sso.AboutInfo"
      vmodl-name="sso.AboutInfo"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[System information (including product name, version and api version) about
 the currently running SSO Server.]]>
      </description-html>
            <property name="version" type-id-ref="java.lang.String"
      vmodl-name="version"
      >
      <description-html>
         <![CDATA[Product version, up to and including the minor version number.
 <p>
 A dot-separated string]]>
      </description-html>
      </property>

            <property name="build" type-id-ref="java.lang.String"
      vmodl-name="build"
      >
      <description-html>
         <![CDATA[Product version and build number.
 <p>
 The version string, followed by a dash, followed by the build number:
 {@code x.y-num} indicates version {@code x.y} and build number {@code num}.]]>
      </description-html>
      </property>

            <property name="apiRevision" type-id-ref="java.lang.String"
      vmodl-name="apiRevision"
      >
      <description-html>
         <![CDATA[Opaque revision identifier of this server's remote API.]]>
      </description-html>
      </property>

            <property name="clusterId" type-id-ref="java.lang.String"
      vmodl-name="clusterId"
      >
      <description-html>
         <![CDATA[Each node in a cluster would return the same value. One node installation
 is considered a cluster with just one node. This value is not replicated.<br>See <a href="sso.AboutInfo.html#deploymentId">deploymentId</a><br>]]>
      </description-html>
      </property>

            <property name="deploymentId" type-id-ref="java.lang.String"
      vmodl-name="deploymentId"
      >
      <description-html>
         <![CDATA[Identifier of this server deployment. Each node in a cluster would return
 the same value. Replicated in multi-site scenario, so two sites in
 multi-site case would return the same value.<br>See <a href="sso.AboutInfo.html#clusterId">clusterId</a><br>]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminConfigurationManagementServiceCertificateChain"
      type-id="sso.admin.ConfigurationManagementService.CertificateChain"
      vmodl-name="sso.admin.ConfigurationManagementService.CertificateChain"
      enclosing-type-id-ref="sso.admin.ConfigurationManagementService"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Encapsulates a chain of X.509 certificates (a.k.a. certificate path). The
 certificates are transported in a base64-encoded DER form.]]>
      </description-html>
            <property name="certificates" type-id-ref="java.lang.String"
      vmodl-name="certificates"
      is-array="true"
      >
      <description-html>
         <![CDATA[The certificates ordered from the signing certificate (first) to the
 Root CA certificate.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminDomainManagementServiceAuthenticationCredentails"
      type-id="sso.admin.DomainManagementService.AuthenticationCredentails"
      vmodl-name="sso.admin.DomainManagementService.AuthenticationCredentails"
      enclosing-type-id-ref="sso.admin.DomainManagementService"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Represents a user name + password tuple for the SSO Server to use when
 authenticating against external server.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>]]>
      </description-html>
            <property name="username" type-id-ref="java.lang.String"
      vmodl-name="username"
      >
      <description-html>
         <![CDATA[The user name to authenticate with. It should be a not-empty string]]>
      </description-html>
      </property>

            <property name="password" type-id-ref="java.lang.String"
      vmodl-name="password"
      >
      <description-html>
         <![CDATA[The password to authenticate with.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminDomains"
      type-id="sso.admin.Domains"
      vmodl-name="sso.admin.Domains"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[A data object which represents all domains in the SSO server, i.e.
 <ul>
 <li>The <b>system</b> domain: represented by non-empty name string.
 <li>Zero or more <b>external</b> domains: a set of non-{@code null}
 ExternalDomain objects.</li>
 </ul><br>See <a href="sso.admin.ExternalDomain.html">SsoAdminExternalDomain</a><br>]]>
      </description-html>
            <property name="externalDomains" type-id-ref="sso.admin.ExternalDomain"
      vmodl-name="externalDomains"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The external domains.]]>
      </description-html>
      </property>

            <property name="systemDomainName" type-id-ref="java.lang.String"
      vmodl-name="systemDomainName"
      >
      <description-html>
         <![CDATA[The name of the system domain.]]>
      </description-html>
      </property>

            <property name="localOSDomainName" type-id-ref="java.lang.String"
      vmodl-name="localOSDomainName"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The name of the local OS domain.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminExternalDomain"
      type-id="sso.admin.ExternalDomain"
      vmodl-name="sso.admin.ExternalDomain"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Represents an external SSO Domain.<br>See <a href="sso.admin.DomainManagementService.html">SsoAdminDomainManagementService</a><br>]]>
      </description-html>
            <property name="type" type-id-ref="java.lang.String"
      vmodl-name="type"
      >
      <description-html>
         <![CDATA[The type of the external server which stores this Domain's users
 and groups. Shall be one of the Type constants.]]>
      </description-html>
      </property>

            <property name="name" type-id-ref="java.lang.String"
      vmodl-name="name"
      >
      <description-html>
         <![CDATA[The name associated with the Domain. The name must be unique for each
 Domain, cannot be changed after the Domain is created and is
 case-insensitive so e.g. "DOMAIN.COM" and "domain.com" refer to the
 <i>same</i> Domain.]]>
      </description-html>
      </property>

            <property name="alias" type-id-ref="java.lang.String"
      vmodl-name="alias"
      is-optional="true"
      >
      <description-html>
         <![CDATA[An optional alias associated with the Domain. No other Domain may have the
 same name or alias; the alias cannot be changed and is case-insensitive.]]>
      </description-html>
      </property>

            <property name="details" type-id-ref="sso.admin.ExternalDomainDetails"
      vmodl-name="details"
      >
      <description-html>
         <![CDATA[Detailed information about the Domain.]]>
      </description-html>
      </property>

            <property name="authenticationDetails" type-id-ref="sso.admin.ExternalDomain.AuthenticationDetails"
      vmodl-name="authenticationDetails"
      >
      <description-html>
         <![CDATA[Details about the authentication method the SSO server will use with the
 external server corresponding to this Domain.]]>
      </description-html>
      </property>

      <nested-type-id-ref>sso.admin.ExternalDomain.Type</nested-type-id-ref>
      <nested-type-id-ref>sso.admin.ExternalDomain.AuthenticationType</nested-type-id-ref>
      <nested-type-id-ref>sso.admin.ExternalDomain.AuthenticationDetails</nested-type-id-ref>
   </data-object>
   <data-object name="SsoAdminExternalDomainAuthenticationDetails"
      type-id="sso.admin.ExternalDomain.AuthenticationDetails"
      vmodl-name="sso.admin.ExternalDomain.AuthenticationDetails"
      enclosing-type-id-ref="sso.admin.ExternalDomain"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Details about the authentication method the SSO server is configured to
 use when talking to an external server.]]>
      </description-html>
            <property name="authenticationType" type-id-ref="java.lang.String"
      vmodl-name="authenticationType"
      >
      <description-html>
         <![CDATA[Identifies the authentication method. Shall be one of the
 AuthenticationType constants.]]>
      </description-html>
      </property>

            <property name="username" type-id-ref="java.lang.String"
      vmodl-name="username"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The username used for authentication in the case the
 {@code authenticationType} is AuthenticationType#password ;
 {@code null} otherwise.<br>See AuthenticationType]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminExternalDomainDetails"
      type-id="sso.admin.ExternalDomainDetails"
      vmodl-name="sso.admin.ExternalDomainDetails"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Represents the details of an external SSO Domain.<br>See <a href="sso.admin.ExternalDomain.html">SsoAdminExternalDomain</a><br>]]>
      </description-html>
            <property name="friendlyName" type-id-ref="java.lang.String"
      vmodl-name="friendlyName"
      >
      <description-html>
         <![CDATA[The human-friendly name of the Domain. This name must be unique for each
 Domain.]]>
      </description-html>
      </property>

            <property name="userBaseDn" type-id-ref="java.lang.String"
      vmodl-name="userBaseDn"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The base Distinguished Name (DN) the SSO Server will use when searching
 for a user in the Domain.]]>
      </description-html>
      </property>

            <property name="groupBaseDn" type-id-ref="java.lang.String"
      vmodl-name="groupBaseDn"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The base Distinguished Name (DN) the SSO Server will use when searching
 for a group in the Domain.]]>
      </description-html>
      </property>

            <property name="primaryUrl" type-id-ref="vmodl.URI"
      vmodl-name="primaryUrl"
      >
      <description-html>
         <![CDATA[The address of the primary external server the SSO will use as a user and
 group store for this Domain.]]>
      </description-html>
      </property>

            <property name="failoverUrl" type-id-ref="vmodl.URI"
      vmodl-name="failoverUrl"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The address of a failover server the SSO Server may use for this Domain in
 the case the primary server is unreachable.]]>
      </description-html>
      </property>

            <property name="searchTimeoutSeconds" type-id-ref="INT"
      vmodl-name="searchTimeoutSeconds"
      >
      <description-html>
         <![CDATA[The maximum number of seconds the SSO Server will wait for the remote
 server to respond to a search query.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminGroup"
      type-id="sso.admin.Group"
      vmodl-name="sso.admin.Group"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Data object representing "group" type principals<br>See <a href="sso.admin.PrincipalManagementService.html">SsoAdminPrincipalManagementService</a><br>]]>
      </description-html>
            <property name="id" type-id-ref="sso.PrincipalId"
      vmodl-name="id"
      >
      <description-html>
         <![CDATA[Group's primary identifier. It is based on group name and domain name.]]>
      </description-html>
      </property>

            <property name="alias" type-id-ref="sso.PrincipalId"
      vmodl-name="alias"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Group's alternative identifier which is based on group name and domain
 alias. {@code null} value when alias is not known or the corresponding
 domain has no alias specified.]]>
      </description-html>
      </property>

            <property name="details" type-id-ref="sso.admin.GroupDetails"
      vmodl-name="details"
      >
      <description-html>
         <![CDATA[Specific attributes.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminGroupDetails"
      type-id="sso.admin.GroupDetails"
      vmodl-name="sso.admin.GroupDetails"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Group specific details. A composite part of <a href="sso.admin.Group.html">SsoAdminGroup</a> data object.]]>
      </description-html>
            <property name="description" type-id-ref="java.lang.String"
      vmodl-name="description"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Group descriptive text]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminLockoutPolicy"
      type-id="sso.admin.LockoutPolicy"
      vmodl-name="sso.admin.LockoutPolicy"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Lockout policy defines how the system behaves when a user enters invalid
 credentials during authentication

 <p>
 All value ranges below are inclusive.]]>
      </description-html>
            <property name="description" type-id-ref="java.lang.String"
      vmodl-name="description"
      >
      <description-html>
         <![CDATA[Policy detailed description, between 1 and 120 characters]]>
      </description-html>
      </property>

            <property name="maxFailedAttempts" type-id-ref="INT"
      vmodl-name="maxFailedAttempts"
      >
      <description-html>
         <![CDATA[The maximum number of failed login attempts allowed before a lockout
 occurs; a number is expected between 1 and 1,000,000,000]]>
      </description-html>
      </property>

            <property name="failedAttemptIntervalSec" type-id-ref="LONG"
      vmodl-name="failedAttemptIntervalSec"
      >
      <description-html>
         <![CDATA[The time window ( in seconds ) in which the failures must occur to trigger
 a lockout; a number is expected between 1 and 1,000,000,000]]>
      </description-html>
      </property>

            <property name="autoUnlockIntervalSec" type-id-ref="LONG"
      vmodl-name="autoUnlockIntervalSec"
      >
      <description-html>
         <![CDATA[The time ( in seconds ) that the account will remain locked or zero to
 make the only way an administrator to unlock it explicitly; a
 number is expected between 0 and 1,000,000,000]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminMailContent"
      type-id="sso.admin.MailContent"
      vmodl-name="sso.admin.MailContent"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[This class represents the information needed for sending e-mails.]]>
      </description-html>
            <property name="from" type-id-ref="java.lang.String"
      vmodl-name="from"
      >
      <description-html>
         <![CDATA[The e-mail address of the sender. <code>null</code> values are not
 acceptable]]>
      </description-html>
      </property>

            <property name="to" type-id-ref="java.lang.String"
      vmodl-name="to"
      >
      <description-html>
         <![CDATA[The e-mail address of the recipient. <code>null</code> values are not
 acceptable]]>
      </description-html>
      </property>

            <property name="subject" type-id-ref="java.lang.String"
      vmodl-name="subject"
      >
      <description-html>
         <![CDATA[The subject of the e-mail message. <code>null</code> values are not
 acceptable]]>
      </description-html>
      </property>

            <property name="content" type-id-ref="java.lang.String"
      vmodl-name="content"
      >
      <description-html>
         <![CDATA[The content of the e-mail message. <code>null</code> values are not
 acceptable]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminPasswordExpirationConfig"
      type-id="sso.admin.PasswordExpirationConfig"
      vmodl-name="sso.admin.PasswordExpirationConfig"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[A password expiration configuration is a set adjustments defining the
 server's behavior regarding notifications for passwords which are about to
 expire. The granularity is one e-mails per day.]]>
      </description-html>
            <property name="emailNotificationEnabled" type-id-ref="BOOLEAN"
      vmodl-name="emailNotificationEnabled"
      >
      <description-html>
         <![CDATA[Whether the password expiration notification option is enabled]]>
      </description-html>
      </property>

            <property name="emailFrom" type-id-ref="java.lang.String"
      vmodl-name="emailFrom"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Valid email from which to sent e-mail notifications. <code>null</code> if
 notification is disabled]]>
      </description-html>
      </property>

            <property name="emailSubject" type-id-ref="java.lang.String"
      vmodl-name="emailSubject"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The email subject. <code>null</code> if notification is disabled]]>
      </description-html>
      </property>

            <property name="notificationDays" type-id-ref="INT"
      vmodl-name="notificationDays"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[The number of days before to send remainder email with password expiration
 information. Multiple days are accepted because repeated notifications are
 possible. Only positive numbers are accepted. TODO (check) Order is not
 important. <code>null</code> if notification is disabled]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminPasswordFormat"
      type-id="sso.admin.PasswordFormat"
      vmodl-name="sso.admin.PasswordFormat"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Data class representing password format restrictions.

 <p>
 All value ranges below are inclusive. If not otherwise specified,
 numeric values have the same limits as their datatypes.]]>
      </description-html>
            <property name="lengthRestriction" type-id-ref="sso.admin.PasswordFormat.LengthRestriction"
      vmodl-name="lengthRestriction"
      >
      </property>

            <property name="alphabeticRestriction" type-id-ref="sso.admin.PasswordFormat.AlphabeticRestriction"
      vmodl-name="alphabeticRestriction"
      >
      </property>

            <property name="minNumericCount" type-id-ref="INT"
      vmodl-name="minNumericCount"
      >
      <description-html>
         <![CDATA[Require at least minNumericCount numeric characters in password
 A non-negative number is expected.]]>
      </description-html>
      </property>

            <property name="minSpecialCharCount" type-id-ref="INT"
      vmodl-name="minSpecialCharCount"
      >
      <description-html>
         <![CDATA[Require at least minSpecialCharCount special characters such as &#x40;, #,
 $, %, &amp;, ^ and * in password. A non-negative number is expected.]]>
      </description-html>
      </property>

            <property name="maxIdenticalAdjacentCharacters" type-id-ref="INT"
      vmodl-name="maxIdenticalAdjacentCharacters"
      >
      <description-html>
         <![CDATA[The maximum number of identical adjacent characters allowed in a
 password. A positive number is expected.]]>
      </description-html>
      </property>

      <nested-type-id-ref>sso.admin.PasswordFormat.LengthRestriction</nested-type-id-ref>
      <nested-type-id-ref>sso.admin.PasswordFormat.AlphabeticRestriction</nested-type-id-ref>
   </data-object>
   <data-object name="SsoAdminPasswordFormatAlphabeticRestriction"
      type-id="sso.admin.PasswordFormat.AlphabeticRestriction"
      vmodl-name="sso.admin.PasswordFormat.AlphabeticRestriction"
      enclosing-type-id-ref="sso.admin.PasswordFormat"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Restrictions over the alphabetic characters in the password.]]>
      </description-html>
            <property name="minAlphabeticCount" type-id-ref="INT"
      vmodl-name="minAlphabeticCount"
      >
      <description-html>
         <![CDATA[Require at least minAlphabeticCharCount alphabetic characters in
 password. A non-negative number is expected.]]>
      </description-html>
      </property>

            <property name="minUppercaseCount" type-id-ref="INT"
      vmodl-name="minUppercaseCount"
      >
      <description-html>
         <![CDATA[Require at least minUppercaseCharCount upper case characters in
 password. A non-negative number is expected.]]>
      </description-html>
      </property>

            <property name="minLowercaseCount" type-id-ref="INT"
      vmodl-name="minLowercaseCount"
      >
      <description-html>
         <![CDATA[Require at least minLowercaseCharCount lower case characters in
 password. A non-negative number is expected.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminPasswordFormatLengthRestriction"
      type-id="sso.admin.PasswordFormat.LengthRestriction"
      vmodl-name="sso.admin.PasswordFormat.LengthRestriction"
      enclosing-type-id-ref="sso.admin.PasswordFormat"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Restriction based on the password's length in characters.]]>
      </description-html>
            <property name="minLength" type-id-ref="INT"
      vmodl-name="minLength"
      >
      <description-html>
         <![CDATA[Minimum password length in characters. Should be non-negative.]]>
      </description-html>
      </property>

            <property name="maxLength" type-id-ref="INT"
      vmodl-name="maxLength"
      >
      <description-html>
         <![CDATA[Maximum password length in characters. A number strictly larger than
 <a href="sso.admin.PasswordFormat.LengthRestriction.html#minLength">minLength</a> and the sum of the min(class of characters)Count
 members]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminPasswordPolicy"
      type-id="sso.admin.PasswordPolicy"
      vmodl-name="sso.admin.PasswordPolicy"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[A password policy is a set of rules and restrictions on the
 format of the allowed passwords format and the maximum password age.

 <p>
 All value ranges below are inclusive. If not otherwise specified,
 numeric values have the same limits as their datatypes.]]>
      </description-html>
            <property name="description" type-id-ref="java.lang.String"
      vmodl-name="description"
      >
      <description-html>
         <![CDATA[Policy detailed description, between 1 and 120 characters]]>
      </description-html>
      </property>

            <property name="prohibitedPreviousPasswordsCount" type-id-ref="INT"
      vmodl-name="prohibitedPreviousPasswordsCount"
      >
      <description-html>
         <![CDATA[Restrict how many of the user's last used passwords cannot be selected,
 a positive number expected]]>
      </description-html>
      </property>

            <property name="passwordFormat" type-id-ref="sso.admin.PasswordFormat"
      vmodl-name="passwordFormat"
      >
      <description-html>
         <![CDATA[Set the password format restrictions]]>
      </description-html>
      </property>

            <property name="passwordLifetimeDays" type-id-ref="INT"
      vmodl-name="passwordLifetimeDays"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Set the maximum password lifetime in days - a positive number if present]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminPersonDetails"
      type-id="sso.admin.PersonDetails"
      vmodl-name="sso.admin.PersonDetails"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Person user specific attributes. Used as a composite part of
 <a href="sso.admin.PersonUser.html">SsoAdminPersonUser</a> data object.]]>
      </description-html>
            <property name="description" type-id-ref="java.lang.String"
      vmodl-name="description"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Descriptive text]]>
      </description-html>
      </property>

            <property name="emailAddress" type-id-ref="java.lang.String"
      vmodl-name="emailAddress"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Email address]]>
      </description-html>
      </property>

            <property name="firstName" type-id-ref="java.lang.String"
      vmodl-name="firstName"
      is-optional="true"
      >
      <description-html>
         <![CDATA[User's first name]]>
      </description-html>
      </property>

            <property name="lastName" type-id-ref="java.lang.String"
      vmodl-name="lastName"
      is-optional="true"
      >
      <description-html>
         <![CDATA[User's last name]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminPersonUser"
      type-id="sso.admin.PersonUser"
      vmodl-name="sso.admin.PersonUser"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Person user data object <br>
 Another short representation of person user state is also <a href="sso.admin.User.html">SsoAdminUser</a> data
 object which <a href="sso.admin.User.html#kind">kind</a> value equals to <a href="sso.admin.User.Kind.html#person">person</a>.<br>See <a href="sso.admin.PrincipalManagementService.html">SsoAdminPrincipalManagementService</a><br>]]>
      </description-html>
            <property name="id" type-id-ref="sso.PrincipalId"
      vmodl-name="id"
      >
      <description-html>
         <![CDATA[Person user's primary identifier. It is based on user name and domain
 name.]]>
      </description-html>
      </property>

            <property name="alias" type-id-ref="sso.PrincipalId"
      vmodl-name="alias"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Person user's alternative identifier which is based on user name and
 domain alias. {@code null} value when alias is not known or the
 corresponding domain has no alias specified.]]>
      </description-html>
      </property>

            <property name="details" type-id-ref="sso.admin.PersonDetails"
      vmodl-name="details"
      >
      <description-html>
         <![CDATA[Specific attributes.]]>
      </description-html>
      </property>

            <property name="disabled" type-id-ref="BOOLEAN"
      vmodl-name="disabled"
      >
      <description-html>
         <![CDATA[Specifies whether the user is disabled.
 <p>
 Disabled users cannot acquire tokens from STS and their existing tokens
 cannot be validated.]]>
      </description-html>
      </property>

            <property name="locked" type-id-ref="BOOLEAN"
      vmodl-name="locked"
      >
      <description-html>
         <![CDATA[Specifies whether the user is locked.
 <p>
 Users become locked on a number of unsuccessful authentication attempts as
 specified at <a href="sso.admin.LockoutPolicy.html">SsoAdminLockoutPolicy</a>. Locked users cannot acquire token from
 STS ( except in some cases by SSPI ) but their existing tokens can still
 be validated.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminPrincipalDiscoveryServiceSearchCriteria"
      type-id="sso.admin.PrincipalDiscoveryService.SearchCriteria"
      vmodl-name="sso.admin.PrincipalDiscoveryService.SearchCriteria"
      enclosing-type-id-ref="sso.admin.PrincipalDiscoveryService"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Principals search constraints definition. All string values inside search
 criteria are case-insensitive.<br>See #find(SearchCriteria,]]>
      </description-html>
            <property name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[Search string used to find principals ( users and groups ). Matching
 principals will be those that have this particular string as a
 substring either at {@code name} property of their principal ID, or at:
 <ul>
 <li>{@code firstName} or {@code lastName} property - for
 <a href="sso.admin.PersonUser.html">SsoAdminPersonUser</a></li>
 <li>{@code description} property - for <a href="sso.admin.Group.html">SsoAdminGroup</a></li>
 </ul>
 Empty string means no restriction.<br>See PrincipalId#getName()See PersonDetails#getFirstName()See PersonDetails#getLastName()See GroupDetails#getDescription()]]>
      </description-html>
      </property>

            <property name="domain" type-id-ref="java.lang.String"
      vmodl-name="domain"
      >
      <description-html>
         <![CDATA[Domain name where to search. The returned principals will be located at
 this domain.
 <p>
 Not empty string value is required<br>See PrincipalId#getDomain()]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminPrincipalDiscoveryServiceSearchResult"
      type-id="sso.admin.PrincipalDiscoveryService.SearchResult"
      vmodl-name="sso.admin.PrincipalDiscoveryService.SearchResult"
      enclosing-type-id-ref="sso.admin.PrincipalDiscoveryService"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[The result from searching for person users, solution users and groups
 using SearchCriteria.<br>See #find(SearchCriteria,]]>
      </description-html>
            <property name="personUsers" type-id-ref="sso.admin.PersonUser"
      vmodl-name="personUsers"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Person users found; {@code null} when there is no match]]>
      </description-html>
      </property>

            <property name="solutionUsers" type-id-ref="sso.admin.SolutionUser"
      vmodl-name="solutionUsers"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Solution users found; {@code null} when there is no match]]>
      </description-html>
      </property>

            <property name="groups" type-id-ref="sso.admin.Group"
      vmodl-name="groups"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Groups found; {@code null} when there is no match]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminServiceContent"
      type-id="sso.admin.ServiceContent"
      vmodl-name="sso.admin.ServiceContent"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[The SSO management service registry.]]>
      </description-html>
            <property name="aboutInfo" type-id-ref="sso.AboutInfo"
      vmodl-name="aboutInfo"
      >
      <description-html>
         <![CDATA[Access to system information.]]>
      </description-html>
      </property>

            <property name="sessionManager" type-id-ref="sso.SessionManager"
      vmodl-name="sessionManager"
      >
      <description-html>
         <![CDATA[Access session manager service.]]>
      </description-html>
      </property>

            <property name="configurationManagementService" type-id-ref="sso.admin.ConfigurationManagementService"
      vmodl-name="configurationManagementService"
      >
      <description-html>
         <![CDATA[Access server configuration management service.]]>
      </description-html>
      </property>

            <property name="smtpManagementService" type-id-ref="sso.admin.SmtpManagementService"
      vmodl-name="smtpManagementService"
      >
      <description-html>
         <![CDATA[Access SMTP management service.]]>
      </description-html>
      </property>

            <property name="principalDiscoveryService" type-id-ref="sso.admin.PrincipalDiscoveryService"
      vmodl-name="principalDiscoveryService"
      >
      <description-html>
         <![CDATA[Access principal discovery service.]]>
      </description-html>
      </property>

            <property name="principalManagementService" type-id-ref="sso.admin.PrincipalManagementService"
      vmodl-name="principalManagementService"
      >
      <description-html>
         <![CDATA[Access principal management service.]]>
      </description-html>
      </property>

            <property name="roleManagementService" type-id-ref="sso.admin.RoleManagementService"
      vmodl-name="roleManagementService"
      >
      <description-html>
         <![CDATA[Access role management service.]]>
      </description-html>
      </property>

            <property name="passwordPolicyService" type-id-ref="sso.admin.PasswordPolicyService"
      vmodl-name="passwordPolicyService"
      >
      <description-html>
         <![CDATA[Access password policy service.]]>
      </description-html>
      </property>

            <property name="lockoutPolicyService" type-id-ref="sso.admin.LockoutPolicyService"
      vmodl-name="lockoutPolicyService"
      >
      <description-html>
         <![CDATA[Access lockout policy service.]]>
      </description-html>
      </property>

            <property name="domainManagementService" type-id-ref="sso.admin.DomainManagementService"
      vmodl-name="domainManagementService"
      >
      <description-html>
         <![CDATA[Access the domain management service.]]>
      </description-html>
      </property>

            <property name="deploymentInformationService" type-id-ref="sso.admin.DeploymentInformationService"
      vmodl-name="deploymentInformationService"
      >
      <description-html>
         <![CDATA[Access the deployment information service.]]>
      </description-html>
      </property>

            <property name="replicationService" type-id-ref="sso.admin.ReplicationService"
      vmodl-name="replicationService"
      >
      <description-html>
         <![CDATA[Access the replication service.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminSmtpConfig"
      type-id="sso.admin.SmtpConfig"
      vmodl-name="sso.admin.SmtpConfig"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[A SMTP settings are used to configure the SSO server for sending e-mails.]]>
      </description-html>
            <property name="host" type-id-ref="java.lang.String"
      vmodl-name="host"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Host of the SMTP server. <code>null</code> values are not acceptable]]>
      </description-html>
      </property>

            <property name="port" type-id-ref="INT"
      vmodl-name="port"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Port of the SMTP server]]>
      </description-html>
      </property>

            <property name="authenticate" type-id-ref="BOOLEAN"
      vmodl-name="authenticate"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Whether authentication will be used]]>
      </description-html>
      </property>

            <property name="user" type-id-ref="java.lang.String"
      vmodl-name="user"
      is-optional="true"
      >
      <description-html>
         <![CDATA[User for authentication. <code>null</code> if no authentication is
 required]]>
      </description-html>
      </property>

            <property name="password" type-id-ref="java.lang.String"
      vmodl-name="password"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Password for authentication. <code>null</code> if no authentication is
 required]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminSolutionDetails"
      type-id="sso.admin.SolutionDetails"
      vmodl-name="sso.admin.SolutionDetails"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Solution user specific attributes. Used as a composite part of
 Solution data object.]]>
      </description-html>
            <property name="description" type-id-ref="java.lang.String"
      vmodl-name="description"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Descriptive text]]>
      </description-html>
      </property>

            <property name="certificate" type-id-ref="java.lang.String"
      vmodl-name="certificate"
      >
      <description-html>
         <![CDATA[Certificate is used for solution authentication. The string value is
 base64-encoded X.509 certificate in DER format]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminSolutionUser"
      type-id="sso.admin.SolutionUser"
      vmodl-name="sso.admin.SolutionUser"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[Solution user data object.
 <p>
 Another short representation of solution user state is also <a href="sso.admin.User.html">SsoAdminUser</a> data
 object which <a href="sso.admin.User.html#kind">kind</a> value equals to <a href="sso.admin.User.Kind.html#solution">solution</a>.<br>See <a href="sso.admin.PrincipalManagementService.html">SsoAdminPrincipalManagementService</a><br>]]>
      </description-html>
            <property name="id" type-id-ref="sso.PrincipalId"
      vmodl-name="id"
      >
      <description-html>
         <![CDATA[Solution user's primary identifier. It is based on user name and domain
 name.]]>
      </description-html>
      </property>

            <property name="alias" type-id-ref="sso.PrincipalId"
      vmodl-name="alias"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Solution user's alternative identifier which is based on user name and
 domain alias. {@code null} value when alias is not known or the
 corresponding domain has no alias specified.]]>
      </description-html>
      </property>

            <property name="details" type-id-ref="sso.admin.SolutionDetails"
      vmodl-name="details"
      >
      <description-html>
         <![CDATA[Specific attributes.]]>
      </description-html>
      </property>

            <property name="disabled" type-id-ref="BOOLEAN"
      vmodl-name="disabled"
      >
      <description-html>
         <![CDATA[Specifies whether the user is disabled.
 <p>
 Disabled users cannot acquire tokens from STS and their existing tokens
 cannot be validated.]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoAdminUser"
      type-id="sso.admin.User"
      vmodl-name="sso.admin.User"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[This data object type represents only the attributes that are shared between
 person and solution users.<br>
 This representation is suitable in case we want to treat all kind of users
 uniformly but we still need to know about their kind. This, of course, comes
 at the price of losing all specific attributes.
 <p>
 <a href="sso.admin.PersonUser.html">SsoAdminPersonUser</a> and <a href="sso.admin.SolutionUser.html">SsoAdminSolutionUser</a> representations, on the other
 hand, contain the entire set of attributes applicable to the corresponding
 kind of user. They are also identified with the same <a href="sso.admin.User.html#id">id</a>.
 </p><br>See <a href="sso.admin.PersonUser.html">SsoAdminPersonUser</a><br>See <a href="sso.admin.SolutionUser.html">SsoAdminSolutionUser</a><br>See <a href="sso.admin.PrincipalManagementService.html">SsoAdminPrincipalManagementService</a><br>]]>
      </description-html>
            <property name="id" type-id-ref="sso.PrincipalId"
      vmodl-name="id"
      >
      <description-html>
         <![CDATA[User's primary identifier. It is based on user name and domain name.]]>
      </description-html>
      </property>

            <property name="alias" type-id-ref="sso.PrincipalId"
      vmodl-name="alias"
      is-optional="true"
      >
      <description-html>
         <![CDATA[User's alternative identifier which is based on user name and domain
 alias.
 <p>
 {@code null} value means that domain has no alias specified.]]>
      </description-html>
      </property>

            <property name="kind" type-id-ref="java.lang.String"
      vmodl-name="kind"
      >
      <description-html>
         <![CDATA[The kind of user. Kind lists all valid values.]]>
      </description-html>
      </property>

            <property name="description" type-id-ref="java.lang.String"
      vmodl-name="description"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Descriptive text]]>
      </description-html>
      </property>

      <nested-type-id-ref>sso.admin.User.Kind</nested-type-id-ref>
   </data-object>
   <data-object name="SsoGroupcheckServiceContent"
      type-id="sso.groupcheck.ServiceContent"
      vmodl-name="sso.groupcheck.ServiceContent"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[The SSO group check management service registry.]]>
      </description-html>
            <property name="aboutInfo" type-id-ref="sso.AboutInfo"
      vmodl-name="aboutInfo"
      >
      <description-html>
         <![CDATA[Access to system information.]]>
      </description-html>
      </property>

            <property name="sessionManager" type-id-ref="sso.SessionManager"
      vmodl-name="sessionManager"
      >
      <description-html>
         <![CDATA[Access session manager service.]]>
      </description-html>
      </property>

            <property name="groupCheckService" type-id-ref="sso.groupcheck.GroupCheckService"
      vmodl-name="groupCheckService"
      >
      <description-html>
         <![CDATA[Access group check service]]>
      </description-html>
      </property>

   </data-object>
   <data-object name="SsoPrincipalId"
      type-id="sso.PrincipalId"
      vmodl-name="sso.PrincipalId"
      version-id-ref="sso.version.version1"
      base-type-id="vmodl.DynamicData"
      >
      <description-html>
         <![CDATA[SSO principal (user or group) GUID. It is used to identify any local or
 remote SSO principal. Local principals are such ones that are stored at SSO
 local domain and remote ones reside at a domain that is accessed remotely via
 LDAP.]]>
      </description-html>
            <property name="name" type-id-ref="java.lang.String"
      vmodl-name="name"
      >
      <description-html>
         <![CDATA[Principal's short name (e.g. jdoe); Non-empty string is required.]]>
      </description-html>
      </property>

            <property name="domain" type-id-ref="java.lang.String"
      vmodl-name="domain"
      >
      <description-html>
         <![CDATA[Name of the domain (e.g. VMware.com ) where principal is registered. The
 value is case insensitive. Non-empty string is required.]]>
      </description-html>
      </property>

   </data-object>
   </data-objects>
   <managed-objects>
   <managed-object name="SsoAdminCertificateManager"
      type-id="sso.admin.CertificateManager"
      vmodl-name="sso.admin.CertificateManager"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Allows for listing, adding and deleting certificates from a single
 certificate store in the SSO Server.
 <p>
 The certificates are uniquely identified by their SHA-1 fingerprints. The
 fingerprints are expected to be formatted like "XX:XX:...:XX" where "XX" are
 the hexadecimal representations of the fingerprint's bytes. The fingerprints
 are case-insensitive.]]>
      </description-html>
   <method name="AddCertificate"
      vmodl-name="addCertificate"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Add a certificate to the trust store managed by this service.]]>
      </description-html>
      <parameter name="certificate" type-id-ref="java.lang.String"
      vmodl-name="certificate"
      >
      <description-html>
         <![CDATA[The base64-encoded DER form of the X.509 certificate to add.
           Requires a correctly encoded form of valid X.509 certificate.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetAllCertificates"
      vmodl-name="getAllCertificates"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="java.lang.String"
      >
      <description-html>
         <![CDATA[Returns all certificates present in the trust store managed by this
 service.]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[all the certificates in a base64-encoded DER form; could be empty
         list]]>
      </return-value-description-html>
   </method>
   <method name="FindCertificate"
      vmodl-name="findCertificate"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="java.lang.String"
      >
      <description-html>
         <![CDATA[Find a certificate by its fingerprint.]]>
      </description-html>
      <parameter name="fingerprint" type-id-ref="java.lang.String"
      vmodl-name="fingerprint"
      >
      <description-html>
         <![CDATA[The SHA-1 fingerprint of the certificate to search for.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[the certificate (base64-encoded DER form) found, or {@code null}]]>
      </return-value-description-html>
   </method>
   <method name="DeleteCertificate"
      vmodl-name="deleteCertificate"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Remove the certificate identified by the given fingerprint from the SSL
 trust store.]]>
      </description-html>
      <parameter name="fingerprint" type-id-ref="java.lang.String"
      vmodl-name="fingerprint"
      >
      <description-html>
         <![CDATA[The fingerprint of the certificate to be delete.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   </managed-object>
   <managed-object name="SsoAdminConfigurationManagementService"
      type-id="sso.admin.ConfigurationManagementService"
      vmodl-name="sso.admin.ConfigurationManagementService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[This service is used for configuring SSO administrative server]]>
      </description-html>
      <nested-type-id-ref>sso.admin.ConfigurationManagementService.CertificateChain</nested-type-id-ref>
   <method name="GetKnownCertificateChains"
      vmodl-name="getKnownCertificateChains"
      is-array="true"
      privilege="System.Anonymous"
      type-id-ref="sso.admin.ConfigurationManagementService.CertificateChain"
      >
      <description-html>
         <![CDATA[Returns all valid signing X.509 certificate chains, known to the server.
 No ordering (time of registration or other) of the chains is guaranteed;
 consecutive calls of this method may return the chains in different order.
 This method will always return at least one chain and each returned chain
 will contain at least one certificate.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[the non-empty list of known X.509 certificates chains]]>
      </return-value-description-html>
   </method>
   <method name="GetTrustedCertificates"
      vmodl-name="getTrustedCertificates"
      is-array="true"
      privilege="System.Anonymous"
      type-id-ref="java.lang.String"
      >
      <description-html>
         <![CDATA[Returns all trusted root certificates. This method will always return at
 least one trusted certificate.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[the non-empty list of all X.509 certificates which are trusted
         roots]]>
      </return-value-description-html>
   </method>
   <method name="SetNewSignerIdentity"
      vmodl-name="setNewSignerIdentity"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Sets the server's token signing key and certificate chain. After
 successful call, the Security Token Service will start signing all issued
 tokens with the provided key. The provided certificate chain will be
 embedded into the tokens' signature's &lt;ds:KeyInfo&gt; element.]]>
      </description-html>
      <parameter name="signingKey" type-id-ref="java.lang.String"
      vmodl-name="signingKey"
      >
      <description-html>
         <![CDATA[the private key to use to sign tokens with; should be RSA
           private key - PKCS#8 format, Base64 encoded]]>
      </description-html>
      </parameter>
      <parameter name="signingCertificateChain" type-id-ref="sso.admin.ConfigurationManagementService.CertificateChain"
      vmodl-name="signingCertificateChain"
      >
      <description-html>
         <![CDATA[the certificate chain to embed in the token signature's KeyInfo.
           The certificate corresponding to the signingKey must be the
           first certificate in the signing chain. The algorithm of the
           public key from the chain's first certificate and the private
           key's algorithm must match.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="SetSignerIdentity"
      vmodl-name="setSignerIdentity"
      privilege="dynamic"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Sets the server's token signing key and certificate chain. After
 successful call, the Security Token Service will start signing all issued
 tokens with the provided key. The provided certificate chain will be
 embedded into the tokens' signature's &lt;ds:KeyInfo&gt; element.]]>
      </description-html>
      <parameter name="adminUser" type-id-ref="sso.PrincipalId"
      vmodl-name="adminUser"
      >
      <description-html>
         <![CDATA[the principal ID of a user with administrator privileges in SSO
           admin]]>
      </description-html>
      </parameter>
      <parameter name="adminPass" type-id-ref="java.lang.String"
      vmodl-name="adminPass"
      >
      <description-html>
         <![CDATA[the password of the admin user]]>
      </description-html>
      </parameter>
      <parameter name="signingKey" type-id-ref="java.lang.String"
      vmodl-name="signingKey"
      >
      <description-html>
         <![CDATA[the private key to use to sign tokens with; should be RSA
           private key - PKCS#8 format, Base64 encoded]]>
      </description-html>
      </parameter>
      <parameter name="signingCertificateChain" type-id-ref="sso.admin.ConfigurationManagementService.CertificateChain"
      vmodl-name="signingCertificateChain"
      >
      <description-html>
         <![CDATA[the certificate chain to embed in the token signature's KeyInfo.
           The certificate corresponding to the signingKey must be the
           first certificate in the signing chain. The algorithm of the
           public key from the chain's first certificate and the private
           key's algorithm must match.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller or when the provided authentication parameters
            does not authenticate an admin user]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated or when the provided user and
            password cannot authenticate any user]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetClockTolerance"
      vmodl-name="getClockTolerance"
      privilege="System.Anonymous"
      type-id-ref="LONG"
      >
      <description-html>
         <![CDATA[Returns the maximum allowed clock discrepancy between the client and the
 server machine when acquiring a token.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[The maximum clock discrepancy in milliseconds.]]>
      </return-value-description-html>
   </method>
   <method name="SetClockTolerance"
      vmodl-name="setClockTolerance"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Changes the maximum allowed clock discrepancy between the client and the
 server machines when acquiring a token. If a token request is older than
 the server's current time minus the allowed tolerance, it is discarded.]]>
      </description-html>
      <parameter name="milliseconds" type-id-ref="LONG"
      vmodl-name="milliseconds"
      >
      <description-html>
         <![CDATA[The maximum accepted discrepancy in milliseconds.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetDelegationCount"
      vmodl-name="getDelegationCount"
      privilege="System.Read"
      type-id-ref="INT"
      >
      <description-html>
         <![CDATA[Return how many times a token can be delegated]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[a positive integer for token delegation count]]>
      </return-value-description-html>
   </method>
   <method name="SetDelegationCount"
      vmodl-name="setDelegationCount"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Set how many times a token can be delegated]]>
      </description-html>
      <parameter name="delegationCount" type-id-ref="INT"
      vmodl-name="delegationCount"
      >
      <description-html>
         <![CDATA[token delegation count; a positive integer value is required]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetRenewCount"
      vmodl-name="getRenewCount"
      privilege="System.Read"
      type-id-ref="INT"
      >
      <description-html>
         <![CDATA[Return how many times a token could be renewed]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[a positive integer for token renew count]]>
      </return-value-description-html>
   </method>
   <method name="SetRenewCount"
      vmodl-name="setRenewCount"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Set how many times a token can be renewed]]>
      </description-html>
      <parameter name="renewCount" type-id-ref="INT"
      vmodl-name="renewCount"
      >
      <description-html>
         <![CDATA[token renew count; a positive integer value is required]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetMaximumBearerTokenLifetime"
      vmodl-name="getMaximumBearerTokenLifetime"
      privilege="System.Read"
      type-id-ref="LONG"
      >
      <description-html>
         <![CDATA[Return the maximum lifetime (in seconds) for bearer tokens]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[a positive integer for token lifetime]]>
      </return-value-description-html>
   </method>
   <method name="SetMaximumBearerTokenLifetime"
      vmodl-name="setMaximumBearerTokenLifetime"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Set the maximum lifetime for bearer tokens]]>
      </description-html>
      <parameter name="maxLifetime" type-id-ref="LONG"
      vmodl-name="maxLifetime"
      >
      <description-html>
         <![CDATA[max token lifetime (in seconds); a positive integer value is
           required]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetMaximumHoKTokenLifetime"
      vmodl-name="getMaximumHoKTokenLifetime"
      privilege="System.Read"
      type-id-ref="LONG"
      >
      <description-html>
         <![CDATA[Return the maximum lifetime (in seconds) for holder-of-key tokens]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[a positive integer for token lifetime]]>
      </return-value-description-html>
   </method>
   <method name="SetMaximumHoKTokenLifetime"
      vmodl-name="setMaximumHoKTokenLifetime"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Set the maximum lifetime for holder-of-key tokens]]>
      </description-html>
      <parameter name="maxLifetime" type-id-ref="LONG"
      vmodl-name="maxLifetime"
      >
      <description-html>
         <![CDATA[max token lifetime (in seconds); a positive integer value is
           required]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetPasswordExpirationConfiguration"
      vmodl-name="getPasswordExpirationConfiguration"
      privilege="System.Read"
      type-id-ref="sso.admin.PasswordExpirationConfig"
      >
      <description-html>
         <![CDATA[Returns the server's current password expiration configuration. The
 configuration represents policies and actions to be taken if the user's
 credentials are about to expire.]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[The password configuration.]]>
      </return-value-description-html>
   </method>
   <method name="UpdatePasswordExpirationConfiguration"
      vmodl-name="updatePasswordExpirationConfiguration"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Replaces the server's current password expiration configuration. The
 configuration represents policies and actions to be taken if the user's
 credentials are about to expire.]]>
      </description-html>
      <parameter name="config" type-id-ref="sso.admin.PasswordExpirationConfig"
      vmodl-name="config"
      >
      <description-html>
         <![CDATA[The new password expiration configuration.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   </managed-object>
   <managed-object name="SsoAdminDeploymentInformationService"
      type-id="sso.admin.DeploymentInformationService"
      vmodl-name="sso.admin.DeploymentInformationService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Provides information about the deployment type of this SSO Server's instance
 and to the configuration parameters necessary to install additional servers
 in a High-availability cluster or in a multi-site deployment.]]>
      </description-html>
   <method name="IsMultiSiteDeployment"
      vmodl-name="isMultiSiteDeployment"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Returns whether this SSO Server instance supports multi-site (a.k.a.
 linked-mode) deployment.
 <p>
 The multi-site support (or the lack of) is configured during the
 installation of the server and cannot be changed afterwards.]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[The SAML Token passed in the request's security header could
            not be validated.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InternalFault">
      <fault-description-html>
         <![CDATA[Indicates unexpected, internal error in the SSO Server.]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[True if this instance is part of replicated deployment and false
         otherwise.]]>
      </return-value-description-html>
   </method>
   <method name="RetrieveHaBackupConfigurationPackage"
      vmodl-name="retrieveHaBackupConfigurationPackage"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="vmodl.Binary"
      >
      <description-html>
         <![CDATA[Returns the configuration parameters necessary to install a "backup"
 (a.k.a. "secondary") SSO Server node in the same High-Availability
 cluster.]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[The SAML Token passed in the request's security header could
            not be validated.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InternalFault">
      <fault-description-html>
         <![CDATA[Indicates unexpected, internal error in the SSO Server.]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[A binary package containing the configuration data. The package is
         encrypted with the Server's master password.]]>
      </return-value-description-html>
   </method>
   <method name="RetrieveReplicaConfigurationPackage"
      vmodl-name="retrieveReplicaConfigurationPackage"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="vmodl.Binary"
      >
      <description-html>
         <![CDATA[Returns the configuration parameters necessary to install another replica
 in the same multi-site deployment.
 <p>
 Note that this data is only available if during the installation this
 instance was configured with multi-site support.<br>See {@linkplain]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call<br>See {@linkplain]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller<br>See {@linkplain]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[The SAML Token passed in the request's security header could
            not be validated.<br>See {@linkplain]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InternalFault">
      <fault-description-html>
         <![CDATA[Indicates unexpected, internal error in the SSO Server.<br>See {@linkplain]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="vmodl.fault.NotSupported">
      <fault-description-html>
         <![CDATA[Thrown to indicate this instance does not support replication
            (i.e. is not part of a replicated deployment).<br>See {@linkplain]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[A binary stream containing the configuration data. The package is
         in form of a zip archive comprised of compressed entries. There is
         always an entry with name "instance.pkg". It is encrypted with the
         "multi-site password" which is picked up during the installation
         of the first instance. Note that this has noting in relation to
         password-protected archives! Other entries may or may not be
         present in the archive. The caller is responsible to close the
         returned stream.]]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoAdminDomainManagementService"
      type-id="sso.admin.DomainManagementService"
      vmodl-name="sso.admin.DomainManagementService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Provides operations for listing all SSO Domains and creating, updating and
 deleting External Domains.
 <p>
 A "Domain" is any store for users and groups the SSO server uses. There are
 two Domain types:
 <ul>
 <li>The <b>system</b> domain, where the principals are stored locally.</li>
 <li>The <b>external<b> domains, where the principals are stored on an
 external server. Refer to the <a href="sso.admin.ExternalDomain.Type.html">SsoAdminExternalDomainType</a> enumeration for the
 list of supported external server types.
 </ul>
 <p>
 Note that the there is always exactly one system domain which cannot be
 changed in any way, while there may be many (including none) external domains
 attached at the same time; they can be added, changed or removed.
 <p>
 Note also that this interface only allows operations with the external
 domains themselves, but the users and groups stored in these domains cannot
 be modified. The content of the external domain is read-only for the SSO
 Server.]]>
      </description-html>
      <nested-type-id-ref>sso.admin.DomainManagementService.AuthenticationCredentails</nested-type-id-ref>
   <method name="ProbeConnectivity"
      vmodl-name="probeConnectivity"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Probe the connectivity to the specified LDAP/NIS service and try to
 authenticate using the provided credentials.<br>See #getSslCertificateManager()]]>
      </description-html>
      <parameter name="serviceUri" type-id-ref="vmodl.URI"
      vmodl-name="serviceUri"
      >
      <description-html>
         <![CDATA[The URI of the target service. The scheme must be {@code ldap},
           {@code ldaps} or {@code nis}. If the scheme is {@code ldaps}
           (LDAP Secure), the remote server's SSL certificate must be
           verifiable using the SSO Server's SSL trust store (or the
           connection will fail).<br>See #getSslCertificateManager()]]>
      </description-html>
      </parameter>
      <parameter name="authenticationType" type-id-ref="java.lang.String"
      vmodl-name="authenticationType"
      >
      <description-html>
         <![CDATA[The authentication method to use. If {@code
           AuthenticationType#anonymous}, no authentication will be
           attempted.<br>See #getSslCertificateManager()]]>
      </description-html>
      </parameter>
      <parameter name="authnCredentials" type-id-ref="sso.admin.DomainManagementService.AuthenticationCredentails"
      vmodl-name="authnCredentials"
      is-optional="true"
      >
      <description-html>
         <![CDATA[<br>See #getSslCertificateManager()]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.DirectoryServiceConnectionFault">
      <fault-description-html>
         <![CDATA[Indicates the SSO Server either failed to connect or to
            authenticate to the service at the specified URI.<br>See #getSslCertificateManager()]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call<br>See #getSslCertificateManager()]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller<br>See #getSslCertificateManager()]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated<br>See #getSslCertificateManager()]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="AddExternalDomain"
      vmodl-name="addExternalDomain"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Register new external server as a Domain for the SSO Server.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </description-html>
      <parameter name="serverType" type-id-ref="java.lang.String"
      vmodl-name="serverType"
      >
      <description-html>
         <![CDATA[The type of the external server. Must be one of the
           <a href="sso.admin.ExternalDomain.Type.html">SsoAdminExternalDomainType</a> values.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </description-html>
      </parameter>
      <parameter name="domainName" type-id-ref="java.lang.String"
      vmodl-name="domainName"
      >
      <description-html>
         <![CDATA[The name to associate with the created Domain.
           <p>
           The domain name must be unique in the sense that no other Domain
           may have the same name <i>or</i> alias. The association is
           permanent, i.e. the name cannot be changed once the Domain is
           created.
           <p>
           When querying, this name shall be returned in the same case it
           was entered when creating the Domain but it is case-insensitive
           for the purpose of all Domain operations.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </description-html>
      </parameter>
      <parameter name="domainAlias" type-id-ref="java.lang.String"
      vmodl-name="domainAlias"
      is-optional="true"
      >
      <description-html>
         <![CDATA[An optional alias to associate with the created Domain.
           <p>
           Like with the Domain name, the Domain alias (if set) may not be
           reused for any other Domain's name or alias and may not be
           changed.
           <p>
           When querying, this alias shall be returned in the same case it
           was entered when creating the Domain but it is case-insensitive
           for the purpose of all Domain operations.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </description-html>
      </parameter>
      <parameter name="details" type-id-ref="sso.admin.ExternalDomainDetails"
      vmodl-name="details"
      >
      <description-html>
         <![CDATA[Details for the Domain. Field constraints: primary and failover
           URL should be different.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </description-html>
      </parameter>
      <parameter name="authenticationType" type-id-ref="java.lang.String"
      vmodl-name="authenticationType"
      >
      <description-html>
         <![CDATA[Specifies how the SSO server should authenticate itself to the
           external server when searching for users. Must be one of the
           <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a> values.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </description-html>
      </parameter>
      <parameter name="authnCredentials" type-id-ref="sso.admin.DomainManagementService.AuthenticationCredentails"
      vmodl-name="authnCredentials"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Credentials (user name and password) for the SSO Server to use
           when authenticating to the external server. Meaningful only if
           the {@code authenticationType} is
           <a href="sso.admin.ExternalDomain.AuthenticationType.html#password">password</a>. Otherwise it
           must be null.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.DuplicateDomainNameFault">
      <fault-description-html>
         <![CDATA[Indicates that the supplied name or alias is already associated
            with another Domain.<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated<br>See <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a><br>See AuthenticationCredentails]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="RegisterLocalOSDomain"
      vmodl-name="registerLocalOSDomain"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Register the domain managed by the local OS. Local OS domain can be
 registered at most once.]]>
      </description-html>
      <parameter name="domainName" type-id-ref="java.lang.String"
      vmodl-name="domainName"
      >
      <description-html>
         <![CDATA[The name to associate with the created local OS Domain.
           <p>
           The domain name must be unique in the sense that no other Domain
           may have the same name, alias <i>or</i> friendly name (located
           at <a href="sso.admin.ExternalDomainDetails.html">SsoAdminExternalDomainDetails</a>) permanent, i.e. the name
           cannot be changed once the Domain is created.
           <p>
           When querying, this name shall be returned in the same case it
           was entered when creating the Domain but it is case-insensitive
           for the purpose of all Domain operations.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.DuplicateDomainNameFault">
      <fault-description-html>
         <![CDATA[Indicates that the supplied name or alias is already associated
            with another Domain.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.LocalOSDomainRegistrationFault">
      <fault-description-html>
         <![CDATA[when the local OS domain has already been registered or when
            SSO server is installed in mode which does not support local OS
            domain]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetDomains"
      vmodl-name="getDomains"
      privilege="System.Read"
      type-id-ref="sso.admin.Domains"
      >
      <description-html>
         <![CDATA[Returns the information about all registered Domains.]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="FindExternalDomain"
      vmodl-name="findExternalDomain"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.ExternalDomain"
      >
      <description-html>
         <![CDATA[Find an external domain by its associated name or alias. If no external
 domain is associated with this name / alias, {@code null} will be
 returned. The find is case-insensitive.]]>
      </description-html>
      <parameter name="name" type-id-ref="java.lang.String"
      vmodl-name="name"
      >
      <description-html>
         <![CDATA[The name of the external domain to retrieve.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[A data object representing the found external domain (or {@code
         null} if none is found).]]>
      </return-value-description-html>
   </method>
   <method name="GetSystemDomainName"
      vmodl-name="getSystemDomainName"
      privilege="System.Anonymous"
      type-id-ref="java.lang.String"
      >
      <description-html>
         <![CDATA[Get the system domain name. The system domain is always present and its
 identity store is embedded into the SSO server itself. The system domain
 is special in that its groups can have principals from any other domain.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[system domain]]>
      </return-value-description-html>
   </method>
   <method name="GetLocalOSDomainName"
      vmodl-name="getLocalOSDomainName"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="java.lang.String"
      >
      <description-html>
         <![CDATA[Get the local OS domain name. It is the domain that is managed by the SSO
 server's host OS.]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[local OS domain or {@code null} if the local OS domain has not
         been registered]]>
      </return-value-description-html>
   </method>
   <method name="UpdateExternalDomainDetails"
      vmodl-name="updateExternalDomainDetails"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Update the details of the external domain associated with the given name.]]>
      </description-html>
      <parameter name="name" type-id-ref="java.lang.String"
      vmodl-name="name"
      >
      <description-html>
         <![CDATA[The name of the external domain to update; the lookup is
           case-insensitive.]]>
      </description-html>
      </parameter>
      <parameter name="details" type-id-ref="sso.admin.ExternalDomainDetails"
      vmodl-name="details"
      >
      <description-html>
         <![CDATA[The new properties of the external domain.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.DomainNotFoundFault">
      <fault-description-html>
         <![CDATA[Indicates that the specified name is not associated with any
            external domain.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="UpdateExternalDomainAuthnType"
      vmodl-name="updateExternalDomainAuthnType"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Updates the way the SSO Server authenticates against the external server
 corresponding to a Domain.]]>
      </description-html>
      <parameter name="name" type-id-ref="java.lang.String"
      vmodl-name="name"
      >
      <description-html>
         <![CDATA[The name of the Domain to update; the lookup is
           case-insensitive.]]>
      </description-html>
      </parameter>
      <parameter name="authnType" type-id-ref="java.lang.String"
      vmodl-name="authnType"
      >
      <description-html>
         <![CDATA[The desired authentication type. Should be one of the
           <a href="sso.admin.ExternalDomain.AuthenticationType.html">SsoAdminExternalDomainAuthenticationType</a> values.]]>
      </description-html>
      </parameter>
      <parameter name="authnCredentials" type-id-ref="sso.admin.DomainManagementService.AuthenticationCredentails"
      vmodl-name="authnCredentials"
      is-optional="true"
      >
      <description-html>
         <![CDATA[A user name + password tuple if the authnType is
           <a href="sso.admin.ExternalDomain.AuthenticationType.html#password">password</a> or {@code
           null} for any other authentication type.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.DomainNotFoundFault">
      <fault-description-html>
         <![CDATA[Indicates that the specified domain name is not associated with
            any Identity Source.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="DeleteDomain"
      vmodl-name="deleteDomain"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Remove the Domain associated with the given name.]]>
      </description-html>
      <parameter name="name" type-id-ref="java.lang.String"
      vmodl-name="name"
      >
      <description-html>
         <![CDATA[The name of the Domain to unregister; the lookup is
           case-insensitive.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.DomainNotFoundFault">
      <fault-description-html>
         <![CDATA[Indicates that the specified name is not associated with any
            Domain.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetSslCertificateManager"
      vmodl-name="getSslCertificateManager"
      privilege="System.Anonymous"
      type-id-ref="sso.admin.CertificateManager"
      >
      <description-html>
         <![CDATA[Returns the manager of the SSL trust store.
 <p>
 When establishing secure (SSL/TLS) connections with the external domain's
 server, the SSO server will try to verify the remote certificate with any
 CA certificate from the SSL trust store. Each certificate in the trust
 store should be root (self-signed) CA certificate.
 <p>
 Note that while technically it is possible with the returned manager to
 add non-self-signed or leaf certificates to the SSL trust store, doing so
 has no effect.
 <p>
 Also be aware that the certificates in the SSL trust store are only
 relevant for establishing secure connections with external servers. They
 are <b>never used</b> for validating tokens or for solution
 authentication.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[A CertificateManager object wired for managing the SSL trust
         store.]]>
      </return-value-description-html>
   </method>
   <method name="SetDefaultDomains"
      vmodl-name="setDefaultDomains"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Specify default domains. Users can authenticate against default domain
 even when a user name is provided without domain name. <br>
 E.g. if {@code mike@vmware.com} is trying to authenticate providing
 {@code mike} as a principal name (and correct credentials for {@code
 mike@vmware.com}), then if:
 <ul>
 <li>{@code vmware.com} is among default domains - authentication will
 succeed.
 <li>{@code vmware.com} is not among default domains - authentication will
 fail.
 </ul>
 If a given username is present in more than one of the default domains,
 authentication will succeed for the first domain which accepts the
 credentials provided.]]>
      </description-html>
      <parameter name="domainNames" type-id-ref="java.lang.String"
      vmodl-name="domainNames"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[Domain list ordered by priority. <br>
           When a value is not provided the default domains list will be
           cleared.]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.DomainNotFoundFault">
      <fault-description-html>
         <![CDATA[when a provided domain name is not in the list of registered
            domains, see #getDomains().]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.DuplicateDomainNameFault">
      <fault-description-html>
         <![CDATA[when the provided list contains an element more than once.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetDefaultDomains"
      vmodl-name="getDefaultDomains"
      is-array="true"
      is-optional="true"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="java.lang.String"
      >
      <description-html>
         <![CDATA[<br>See #setDefaultDomains(String[])]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call<br>See #setDefaultDomains(String[])]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller<br>See #setDefaultDomains(String[])]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated<br>See #setDefaultDomains(String[])]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[Default domains (if any) ordered by priority.]]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoAdminLockoutPolicyService"
      type-id="sso.admin.LockoutPolicyService"
      vmodl-name="sso.admin.LockoutPolicyService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Provides operations for managing SSO users lockout policy<BR>]]>
      </description-html>
   <method name="GetLockoutPolicy"
      vmodl-name="getLockoutPolicy"
      privilege="System.Read"
      type-id-ref="sso.admin.LockoutPolicy"
      >
      <description-html>
         <![CDATA[Returns the active lockout policy which is currently applied]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[the active lockout policy]]>
      </return-value-description-html>
   </method>
   <method name="UpdateLockoutPolicy"
      vmodl-name="updateLockoutPolicy"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Replaces the active lockout policy with the given one]]>
      </description-html>
      <parameter name="policy" type-id-ref="sso.admin.LockoutPolicy"
      vmodl-name="policy"
      >
      <description-html>
         <![CDATA[the new lockout policy]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   </managed-object>
   <managed-object name="SsoAdminPasswordPolicyService"
      type-id="sso.admin.PasswordPolicyService"
      vmodl-name="sso.admin.PasswordPolicyService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[The PasswordPolicyService provides operations for managing the password
 policy applicable to the local STS users.

 Any communication failure with the SSO Server will cause this Service's
 methods to throw ServiceFault.]]>
      </description-html>
   <method name="UpdateLocalPasswordPolicy"
      vmodl-name="updateLocalPasswordPolicy"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Replace the local password policy with the given one.

 <p>The password policy will be rejected if any of the following rules
 is violated.</p>
 <ul>
 <li>0 < Minimum password length <= Maximum password length
 <li>All other password policy parameters must be in an accepted range
    (e.g. no negative count restrictions)
 <li>Maximum number of consecutive identical characters requirement must be greater than zero
 <li>Minimum alphabetic characters must be no less than the combined
 uppercase and lowercase requirements
 <li>Minimum password length must be no less than the combined minimum
 alphabetic, numeric and special character requirements
 </ul>
 Note that, as a result, (min length: 1, min alphabetic: 2) is not considered valid policy.
 (min length: 2, min alphabetic: 2) is valid.
 InvalidPasswordPolicyFault may be thrown in other cases as well, depending on
 implementation.]]>
      </description-html>
      <parameter name="policy" type-id-ref="sso.admin.PasswordPolicy"
      vmodl-name="policy"
      >
      <description-html>
         <![CDATA[the updated password policy]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.InvalidPasswordPolicyFault">
      <fault-description-html>
         <![CDATA[If the supplied password policy is invalid
            (e.g. minLength > maxLength) See above for details.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="GetLocalPasswordPolicy"
      vmodl-name="getLocalPasswordPolicy"
      privilege="System.Read"
      type-id-ref="sso.admin.PasswordPolicy"
      >
      <description-html>
         <![CDATA[Returns the policy currently in effect for the local SSO users.]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[The policy currently in effect for the local SSO users.]]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoAdminPrincipalDiscoveryService"
      type-id="sso.admin.PrincipalDiscoveryService"
      vmodl-name="sso.admin.PrincipalDiscoveryService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Provides methods for browsing the SSO identity sources which includes
 searching for principals ( i.e. person/solution users and groups ).
 <p>
 Methods having a parameter for restricting the maximum number of returned
 principals are not guaranteed to produce the same result even for subsequent
 calls with the same input parameters. Preliminary data ordering upon trimming
 results to the given limitation is also not required. Due to result size
 limitations this service does not provide a way to enumerate all the
 principals matching a given filter. Clients are instead encouraged to specify
 a more concrete filter by principal name.
 <p>
 Note that solution users exist at local domain only and therefore searching
 is applied with no search criteria but with search string.]]>
      </description-html>
      <nested-type-id-ref>sso.admin.PrincipalDiscoveryService.SearchResult</nested-type-id-ref>
      <nested-type-id-ref>sso.admin.PrincipalDiscoveryService.SearchCriteria</nested-type-id-ref>
   <method name="FindPersonUser"
      vmodl-name="findPersonUser"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.PersonUser"
      >
      <description-html>
         <![CDATA[Find person user by id]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of a person user]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[person user found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindSolutionUser"
      vmodl-name="findSolutionUser"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.SolutionUser"
      >
      <description-html>
         <![CDATA[Find solution user by name]]>
      </description-html>
      <parameter name="userName" type-id-ref="java.lang.String"
      vmodl-name="userName"
      >
      <description-html>
         <![CDATA[the name of solution user]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[solution user found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindSolutionUserByCertDN"
      vmodl-name="findSolutionUserByCertDN"
      is-optional="true"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="sso.admin.SolutionUser"
      >
      <description-html>
         <![CDATA[Find solution by its certificate DN]]>
      </description-html>
      <parameter name="certDN" type-id-ref="java.lang.String"
      vmodl-name="certDN"
      >
      <description-html>
         <![CDATA[solution's certificate exact distinguished name]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[solution user found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindUser"
      vmodl-name="findUser"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.User"
      >
      <description-html>
         <![CDATA[Find any kind of user by id]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of the user]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[user found or {@code null} when there is neither person, nor
         solution user with the specified id]]>
      </return-value-description-html>
   </method>
   <method name="FindGroup"
      vmodl-name="findGroup"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.Group"
      >
      <description-html>
         <![CDATA[Find group by id]]>
      </description-html>
      <parameter name="groupId" type-id-ref="sso.PrincipalId"
      vmodl-name="groupId"
      >
      <description-html>
         <![CDATA[id of the group]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[group found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindPersonUsers"
      vmodl-name="findPersonUsers"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.PersonUser"
      >
      <description-html>
         <![CDATA[Find person users that satisfy the specified search criteria]]>
      </description-html>
      <parameter name="criteria" type-id-ref="sso.admin.PrincipalDiscoveryService.SearchCriteria"
      vmodl-name="criteria"
      >
      <description-html>
         <![CDATA[search criteria]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[result data limitation; a positive integer value is required]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[person users found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindSolutionUsers"
      vmodl-name="findSolutionUsers"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.SolutionUser"
      >
      <description-html>
         <![CDATA[Find solution users that satisfy the specified search criteria]]>
      </description-html>
      <parameter name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[refer to SearchCriteria#searchString]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[solution users found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindUsers"
      vmodl-name="findUsers"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.User"
      >
      <description-html>
         <![CDATA[Find the users that satisfy the specified search criteria]]>
      </description-html>
      <parameter name="criteria" type-id-ref="sso.admin.PrincipalDiscoveryService.SearchCriteria"
      vmodl-name="criteria"
      >
      <description-html>
         <![CDATA[search criteria]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[users found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindGroups"
      vmodl-name="findGroups"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.Group"
      >
      <description-html>
         <![CDATA[Find the groups that satisfy the specified search criteria]]>
      </description-html>
      <parameter name="criteria" type-id-ref="sso.admin.PrincipalDiscoveryService.SearchCriteria"
      vmodl-name="criteria"
      >
      <description-html>
         <![CDATA[search criteria]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[groups found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="Find"
      vmodl-name="find"
      privilege="System.Read"
      type-id-ref="sso.admin.PrincipalDiscoveryService.SearchResult"
      >
      <description-html>
         <![CDATA[Find the users and groups that satisfy the specified search criteria]]>
      </description-html>
      <parameter name="criteria" type-id-ref="sso.admin.PrincipalDiscoveryService.SearchCriteria"
      vmodl-name="criteria"
      >
      <description-html>
         <![CDATA[search criteria]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[users and groups found]]>
      </return-value-description-html>
   </method>
   <method name="FindUsersInGroup"
      vmodl-name="findUsersInGroup"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.User"
      >
      <description-html>
         <![CDATA[Find all kind of users that are direct members of the specified group]]>
      </description-html>
      <parameter name="groupId" type-id-ref="sso.PrincipalId"
      vmodl-name="groupId"
      >
      <description-html>
         <![CDATA[id of the group where to search]]>
      </description-html>
      </parameter>
      <parameter name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[refer to SearchCriteria#searchString]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no group with the specified id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[users found or {@code null} when there is neither person, nor
         solution kind of user that match the specified search criteria]]>
      </return-value-description-html>
   </method>
   <method name="FindPersonUsersInGroup"
      vmodl-name="findPersonUsersInGroup"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.PersonUser"
      >
      <description-html>
         <![CDATA[Find person users that are direct members of the specified group]]>
      </description-html>
      <parameter name="groupId" type-id-ref="sso.PrincipalId"
      vmodl-name="groupId"
      >
      <description-html>
         <![CDATA[id of the group where to search]]>
      </description-html>
      </parameter>
      <parameter name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[refer to SearchCriteria#searchString]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no group with the specified id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[person users found or {@code null} when is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindSolutionUsersInGroup"
      vmodl-name="findSolutionUsersInGroup"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.SolutionUser"
      >
      <description-html>
         <![CDATA[Find solution users that are direct members of the specified local group]]>
      </description-html>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[name of the local group where to search]]>
      </description-html>
      </parameter>
      <parameter name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[refer to SearchCriteria#searchString]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no group with the specified id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[solution users found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindGroupsInGroup"
      vmodl-name="findGroupsInGroup"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.Group"
      >
      <description-html>
         <![CDATA[Find sub-groups that are direct members of the specified group]]>
      </description-html>
      <parameter name="groupId" type-id-ref="sso.PrincipalId"
      vmodl-name="groupId"
      >
      <description-html>
         <![CDATA[id of the group where to search]]>
      </description-html>
      </parameter>
      <parameter name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[refer to SearchCriteria#searchString]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no group with the specified id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[sub-groups found or {@code null} when there is no match]]>
      </return-value-description-html>
   </method>
   <method name="FindDirectParentGroups"
      vmodl-name="findDirectParentGroups"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.Group"
      >
      <description-html>
         <![CDATA[Find parent groups which have the specified principal as a direct member]]>
      </description-html>
      <parameter name="principalId" type-id-ref="sso.PrincipalId"
      vmodl-name="principalId"
      >
      <description-html>
         <![CDATA[id of the principal for which the immediate parent groups should
           be returned]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no principal with the specified id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[parent groups found or {@code null} when given principal is not
         member of any group]]>
      </return-value-description-html>
   </method>
   <method name="FindNestedParentGroups"
      vmodl-name="findNestedParentGroups"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.Group"
      >
      <description-html>
         <![CDATA[Find the groups for which the specified user is a direct or indirect
 member (through group to group link).]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of the person or solution user which parent groups to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is neither person, nor solution user with the
            specified id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[parent groups found or {@code null} when given user is not member
         of any group]]>
      </return-value-description-html>
   </method>
   <method name="FindLockedUsers"
      vmodl-name="findLockedUsers"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.PersonUser"
      >
      <description-html>
         <![CDATA[Find the local users which accounts are locked<br>See <a href="sso.admin.LockoutPolicy.html">SsoAdminLockoutPolicy</a><br>]]>
      </description-html>
      <parameter name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[refer to SearchCriteria#searchString<br>See <a href="sso.admin.LockoutPolicy.html">SsoAdminLockoutPolicy</a><br>]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return<br>See <a href="sso.admin.LockoutPolicy.html">SsoAdminLockoutPolicy</a><br>]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call<br>See <a href="sso.admin.LockoutPolicy.html">SsoAdminLockoutPolicy</a><br>]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller<br>See <a href="sso.admin.LockoutPolicy.html">SsoAdminLockoutPolicy</a><br>]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated<br>See <a href="sso.admin.LockoutPolicy.html">SsoAdminLockoutPolicy</a><br>]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[all locked users or {@code null} if none were found]]>
      </return-value-description-html>
   </method>
   <method name="FindDisabledPersonUsers"
      vmodl-name="findDisabledPersonUsers"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.PersonUser"
      >
      <description-html>
         <![CDATA[Find system and remote person users that are disabled]]>
      </description-html>
      <parameter name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[refer to SearchCriteria#searchString]]>
      </description-html>
      </parameter>
      <parameter name="limit" type-id-ref="INT"
      vmodl-name="limit"
      >
      <description-html>
         <![CDATA[a positive integer for the maximum number of items to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[all disabled person users or {@code null} if none were found]]>
      </return-value-description-html>
   </method>
   <method name="FindDisabledSolutionUsers"
      vmodl-name="findDisabledSolutionUsers"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.admin.SolutionUser"
      >
      <description-html>
         <![CDATA[Find solution users that are disabled]]>
      </description-html>
      <parameter name="searchString" type-id-ref="java.lang.String"
      vmodl-name="searchString"
      >
      <description-html>
         <![CDATA[refer to SearchCriteria#searchString]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[all disabled solution users or {@code null} if none were found]]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoAdminPrincipalManagementService"
      type-id="sso.admin.PrincipalManagementService"
      vmodl-name="sso.admin.PrincipalManagementService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Provides write operations on system domain principals (groups, person and
 solution users).]]>
      </description-html>
   <method name="CreateLocalPersonUser"
      vmodl-name="createLocalPersonUser"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Create new person user account at the system domain.
 <p>
 All the following symbols
 <ul>
 <li>^ (caret)</li>
 <li>&lt; (less than)</li>
 <li>&gt; (greater than)</li>
 <li>& (and)</li>
 <li>% (percent)</li>
 <li>` (back quote)</li>
 <li>@ (at sign)</li>
 </ul>
 must not be part of {@code userName} argument or part of {@code firstName}, {@code lastName} or {@code description} fields at {@code userDetails}
 argument.]]>
      </description-html>
      <parameter name="userName" type-id-ref="java.lang.String"
      vmodl-name="userName"
      >
      <description-html>
         <![CDATA[name of the person user; requires non-empty string value]]>
      </description-html>
      </parameter>
      <parameter name="userDetails" type-id-ref="sso.admin.PersonDetails"
      vmodl-name="userDetails"
      >
      <description-html>
         <![CDATA[details of the person user; valid format string for email
           address should be specified]]>
      </description-html>
      </parameter>
      <parameter name="password" type-id-ref="java.lang.String"
      vmodl-name="password"
      >
      <description-html>
         <![CDATA[password of the person user; requires non-empty string value]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is already a system domain user with the specified
            name]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.PasswordPolicyViolationFault">
      <fault-description-html>
         <![CDATA[when the password provided doesn't satisfy the
            <a href="sso.admin.PasswordPolicy.html">SsoAdminPasswordPolicy</a>]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[id of the created person user.]]>
      </return-value-description-html>
   </method>
   <method name="CreateLocalSolutionUser"
      vmodl-name="createLocalSolutionUser"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Create new solution user account at the system domain.
 <p>
 All the following symbols
 <ul>
 <li>^ (caret)</li>
 <li>&lt; (less than)</li>
 <li>&gt; (greater than)</li>
 <li>& (and)</li>
 <li>% (percent)</li>
 <li>` (back quote)</li>
 <li>@ (at sign)</li>
 </ul>
 must not be part of {@code userName} argument or part of <br>
 {@code description} field of {@code userDetails} argument.
 <p>
 Solution users must have unique identity which means that their
 certificates must have unique <i>distinguished name</i> ( DN ) and unique
 <i>public key</i>. Certificates at {@code userDetails} parameter must be
 generated with a different public/private keypair.]]>
      </description-html>
      <parameter name="userName" type-id-ref="java.lang.String"
      vmodl-name="userName"
      >
      <description-html>
         <![CDATA[name of the new solution user; requires not-empty string value]]>
      </description-html>
      </parameter>
      <parameter name="userDetails" type-id-ref="sso.admin.SolutionDetails"
      vmodl-name="userDetails"
      >
      <description-html>
         <![CDATA[details of the new solution user]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is already a system domain principal with the
            specified name]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.DuplicateSolutionCertificateFault">
      <fault-description-html>
         <![CDATA[when the provided X.509 certificate's DN is not unique]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[id of the created solution user.]]>
      </return-value-description-html>
   </method>
   <method name="CreateLocalGroup"
      vmodl-name="createLocalGroup"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Create new group at the system domain.]]>
      </description-html>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[name of the group to create; requires not-empty string value]]>
      </description-html>
      </parameter>
      <parameter name="groupDetails" type-id-ref="sso.admin.GroupDetails"
      vmodl-name="groupDetails"
      >
      <description-html>
         <![CDATA[details of the group]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is already a system domain principal with the
            specified name]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[id of the created group.]]>
      </return-value-description-html>
   </method>
   <method name="DeleteLocalPrincipal"
      vmodl-name="deleteLocalPrincipal"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Delete existing system domain principal account.]]>
      </description-html>
      <parameter name="principalName" type-id-ref="java.lang.String"
      vmodl-name="principalName"
      >
      <description-html>
         <![CDATA[name of the principal to delete; requires not-empty string value]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no system domain principal with the specified
            name]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="RemoveFromLocalGroup"
      vmodl-name="removeFromLocalGroup"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Remove existing principal from the specified system domain group.]]>
      </description-html>
      <parameter name="principalId" type-id-ref="sso.PrincipalId"
      vmodl-name="principalId"
      >
      <description-html>
         <![CDATA[id of the principal to remove from the given group]]>
      </description-html>
      </parameter>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[name of the group from which to remove the given principal]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when any of the specified principal or system domain group does
            not exist]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[the previous state of the principal regarding its membership with
         the group which is:
         <ul>
         <li>{@code false} - when nothing has changed because the principal
         has not been a member of the group</li>
         <li>
         {@code true} - when the principal was a member but has been
         successfully detached from the group</li>
         </ul>]]>
      </return-value-description-html>
   </method>
   <method name="RemovePrincipalsFromLocalGroup"
      vmodl-name="removePrincipalsFromLocalGroup"
      is-array="true"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Remove a set of existing principals from the specified system domain
 group.]]>
      </description-html>
      <parameter name="principalsIds" type-id-ref="sso.PrincipalId"
      vmodl-name="principalsIds"
      is-array="true"
      >
      </parameter>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[name of the group from which to remove the given principals]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when any of the specified principals or system domain group
            does not exist]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[an array having equal size and elements corresponding to the
         principal IDs parameter; each element contains the previous state
         of the principal regarding its membership with the group which is:
         <ul>
         <li>{@code false} - when nothing has changed because the principal
         has not been a member of the group</li>
         <li>
         {@code true} - when the principal was a member but has been
         successfully detached from the group</li>
         </ul>]]>
      </return-value-description-html>
   </method>
   <method name="AddUserToLocalGroup"
      vmodl-name="addUserToLocalGroup"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Add existing person or solution user to the specified system domain group.]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of the user to add]]>
      </description-html>
      </parameter>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[id of the group where to add the specified user]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when any of the specified user or system domain group does not
            exist]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[the previous state of the user regarding its membership with the
         group which is:
         <ul>
         <li>{@code false} - when nothing has changed because the user has
         already been a member of the group</li>
         <li>{@code true} - when the user was not a member but has been
         successfully attached to the group</li>
         </ul>]]>
      </return-value-description-html>
   </method>
   <method name="AddUsersToLocalGroup"
      vmodl-name="addUsersToLocalGroup"
      is-array="true"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Add a set of existing person and/or solution users to the specified system
 domain group]]>
      </description-html>
      <parameter name="userIds" type-id-ref="sso.PrincipalId"
      vmodl-name="userIds"
      is-array="true"
      >
      <description-html>
         <![CDATA[IDs of the users which to add]]>
      </description-html>
      </parameter>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[id of the system domain 'parent' group]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when any of the specified users or system domain group does not
            exist]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[an array having equal size and elements corresponding to the user
         IDs parameter; each element contains the previous state of the
         user regarding its membership with the group which is:
         <ul>
         <li>{@code false} - when nothing has changed because the user has
         already been a member of the group</li>
         <li>{@code true} - when the user was not a member but has been
         successfully attached to the group</li>
         </ul>]]>
      </return-value-description-html>
   </method>
   <method name="AddGroupToLocalGroup"
      vmodl-name="addGroupToLocalGroup"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Add existing group to the specified system domain group.]]>
      </description-html>
      <parameter name="groupId" type-id-ref="sso.PrincipalId"
      vmodl-name="groupId"
      >
      <description-html>
         <![CDATA[id of the 'child' group which to add]]>
      </description-html>
      </parameter>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[name of the system domain 'parent' group]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when any of the specified groups do not exist]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.GroupCyclicDependencyFault">
      <fault-description-html>
         <![CDATA[when any of the groups to add is direct parent ( or parent of
            any parent ) group of the specified group]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[the previous state of the group as a sub-group of the group which
         is:
         <ul>
         <li>{@code false} - when nothing has changed because the group has
         already been a sub-group of the group</li>
         <li>{@code true} - when the group was not a member but has been
         successfully attached to the group</li>
         </ul>]]>
      </return-value-description-html>
   </method>
   <method name="AddGroupsToLocalGroup"
      vmodl-name="addGroupsToLocalGroup"
      is-array="true"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Add a set of existing group to the specified system domain group.]]>
      </description-html>
      <parameter name="groupIds" type-id-ref="sso.PrincipalId"
      vmodl-name="groupIds"
      is-array="true"
      >
      <description-html>
         <![CDATA[IDs of the 'children' groups which to add]]>
      </description-html>
      </parameter>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[name of the system domain 'parent' group]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when any of the specified groups do not exist]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.GroupCyclicDependencyFault">
      <fault-description-html>
         <![CDATA[when any of the groups to add is direct parent ( or parent of
            any parent ) group of the specified system domain group]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[an array having equal size and elements corresponding to the group
         IDs parameter; each element contains the previous state of the
         group as a sub-group of the group which is:
         <ul>
         <li>{@code false} - when nothing has changed because the group has
         already been a sub-group of the group</li>
         <li>{@code true} - when the group was not a member but has been
         successfully attached to the group</li>
         </ul>]]>
      </return-value-description-html>
   </method>
   <method name="UpdateLocalPersonUserDetails"
      vmodl-name="updateLocalPersonUserDetails"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Updates the details of the system domain person user with given name. This
 method updates all the values specified at details argument.]]>
      </description-html>
      <parameter name="userName" type-id-ref="java.lang.String"
      vmodl-name="userName"
      >
      <description-html>
         <![CDATA[name of the person user which details to update]]>
      </description-html>
      </parameter>
      <parameter name="userDetails" type-id-ref="sso.admin.PersonDetails"
      vmodl-name="userDetails"
      >
      <description-html>
         <![CDATA[the new details to update]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no system domain person user with the specified
            name]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[id of the affected person user.]]>
      </return-value-description-html>
   </method>
   <method name="ResetLocalPersonUserPassword"
      vmodl-name="resetLocalPersonUserPassword"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Resets the password of the system domain person user. The person user is
 required to authorize by previous password.]]>
      </description-html>
      <parameter name="userName" type-id-ref="java.lang.String"
      vmodl-name="userName"
      >
      <description-html>
         <![CDATA[name of the person user which password to update; requires
           not-empty string value]]>
      </description-html>
      </parameter>
      <parameter name="newPassword" type-id-ref="java.lang.String"
      vmodl-name="newPassword"
      >
      <description-html>
         <![CDATA[the new password to apply]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no system domain person user with the specified
            name]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.PasswordPolicyViolationFault">
      <fault-description-html>
         <![CDATA[when the provided password doesn't correspond to the default
            <a href="sso.admin.PasswordPolicy.html">SsoAdminPasswordPolicy</a>]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="UpdateLocalSolutionUserDetails"
      vmodl-name="updateLocalSolutionUserDetails"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Updates the details of system domain solution user. This method updates
 all the values specified with the solution user details.]]>
      </description-html>
      <parameter name="userName" type-id-ref="java.lang.String"
      vmodl-name="userName"
      >
      <description-html>
         <![CDATA[name of the solution user which details to update]]>
      </description-html>
      </parameter>
      <parameter name="userDetails" type-id-ref="sso.admin.SolutionDetails"
      vmodl-name="userDetails"
      >
      <description-html>
         <![CDATA[the new details to update; valid format string for email address
           should be specified]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no system domain solution user with the specified
            name]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[id of the affected solution user.]]>
      </return-value-description-html>
   </method>
   <method name="UpdateLocalGroupDetails"
      vmodl-name="updateLocalGroupDetails"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Update the details of system domain group. This method updates all the
 values specified with the group details.]]>
      </description-html>
      <parameter name="groupName" type-id-ref="java.lang.String"
      vmodl-name="groupName"
      >
      <description-html>
         <![CDATA[name of the group which details to update]]>
      </description-html>
      </parameter>
      <parameter name="groupDetails" type-id-ref="sso.admin.GroupDetails"
      vmodl-name="groupDetails"
      >
      <description-html>
         <![CDATA[the new details to update]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no system domain group with the specified name]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[the id of the affected group.]]>
      </return-value-description-html>
   </method>
   <method name="UpdateSelfLocalPersonUserDetails"
      vmodl-name="updateSelfLocalPersonUserDetails"
      privilege="Sso.Self.Administer"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Updates the details of the currently logged in system domain person user.
 This method updates all the values specified at details argument.]]>
      </description-html>
      <parameter name="userDetails" type-id-ref="sso.admin.PersonDetails"
      vmodl-name="userDetails"
      >
      <description-html>
         <![CDATA[the new details to update]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when the currently logged-in user is not a system domain person
            user]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[The identifier (PricipalId) of the affected person user.]]>
      </return-value-description-html>
   </method>
   <method name="DeleteSelfSolutionUser"
      vmodl-name="deleteSelfSolutionUser"
      privilege="Sso.Self.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Delete the currently logged in solution user.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when the currently logged-in user in not a solution user]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="ResetSelfLocalPersonUserPassword"
      vmodl-name="resetSelfLocalPersonUserPassword"
      privilege="Sso.Self.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Resets the password of the currently authenticated system domain person
 user. The previous password will be overridden with the given one.]]>
      </description-html>
      <parameter name="newPassword" type-id-ref="java.lang.String"
      vmodl-name="newPassword"
      >
      <description-html>
         <![CDATA[the new password to apply]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when the currently logged-in user is not a system domain person
            user]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.PasswordPolicyViolationFault">
      <fault-description-html>
         <![CDATA[when the provided password doesn't correspond to the default
            <a href="sso.admin.PasswordPolicy.html">SsoAdminPasswordPolicy</a>]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="ResetLocalUserPassword"
      vmodl-name="resetLocalUserPassword"
      privilege="dynamic"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Resets the password of the given user, if the provided password is
 corresponding to the user. The previous password will be overridden with
 the given one.]]>
      </description-html>
      <parameter name="username" type-id-ref="java.lang.String"
      vmodl-name="username"
      >
      <description-html>
         <![CDATA[name of the user, whose password will be reset]]>
      </description-html>
      </parameter>
      <parameter name="currentPassword" type-id-ref="java.lang.String"
      vmodl-name="currentPassword"
      >
      <description-html>
         <![CDATA[the current password of the user]]>
      </description-html>
      </parameter>
      <parameter name="newPassword" type-id-ref="java.lang.String"
      vmodl-name="newPassword"
      >
      <description-html>
         <![CDATA[the new password to apply]]>
      </description-html>
      </parameter>
      <fault type-id-ref="vmodl.fault.InvalidRequest">
      </fault>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when either no system domain person user with the specified
            name exists, or the given password is not correct]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.admin.fault.PasswordPolicyViolationFault">
      <fault-description-html>
         <![CDATA[when the provided new password doesn't correspond to the
            default <a href="sso.admin.PasswordPolicy.html">SsoAdminPasswordPolicy</a>]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when there is no person user in the system domain that has the
            specified name and that is authenticated with the given
            password]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="UpdateSelfLocalSolutionUserDetails"
      vmodl-name="updateSelfLocalSolutionUserDetails"
      privilege="Sso.Self.Administer"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Updates the details of currently logged-in solution user. This method
 updates all the values specified at the solution user details.]]>
      </description-html>
      <parameter name="userDetails" type-id-ref="sso.admin.SolutionDetails"
      vmodl-name="userDetails"
      >
      <description-html>
         <![CDATA[the new details to update; valid format string for email address
           should be specified]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when the currently logged-in user is not a solution user]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[id of the affected solution user.]]>
      </return-value-description-html>
   </method>
   <method name="UnlockUserAccount"
      vmodl-name="unlockUserAccount"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Unlocks an existing user account. The return value indicates whether there
 were any changes on 'locked/unlocked' state that has happened at this
 method invocation.]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of the user account to unlock]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no person user with the given id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[{@code false}, when nothing has changed, true - when the state has
         changed from 'locked' to 'unlocked']]>
      </return-value-description-html>
   </method>
   <method name="EnableUserAccount"
      vmodl-name="enableUserAccount"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Enables an existing user account. The return value indicates whether there
 were any changes on 'enabled/disabled' state that has happened at this
 method invocation.]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of the user account to enable]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no person or solution user with the given id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[{@code false}, when nothing has changed, {@code true} - when the
         state has changed from 'disabled' to 'enabled']]>
      </return-value-description-html>
   </method>
   <method name="DisableUserAccount"
      vmodl-name="disableUserAccount"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Disables an existing user account. The return value indicates whether
 there were any changes on 'enabled/disabled' state that has happened at
 this method invocation.]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of the user account to disable]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when there is no person or solution user with the given id]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[{@code false}, when nothing has changed, {@code true} - when the
         state has changed from 'enabled' to 'disabled']]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoAdminReplicationService"
      type-id="sso.admin.ReplicationService"
      vmodl-name="sso.admin.ReplicationService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[This service groups replication operations which are relevant only to
 multi-site deployments. The service is not usable in other SSO deployments.

 Customer-driven replication is handled through #exportFullState()
 and #importFullState(Binary) methods of this service. This
 replication:
 <ul>
 <li>is planned, initiated and operated by the customer;</li>
 <li>relies on customer to transport the exported data to the other peers;</li>
 <li>replicates always the full state;</li>
 <li>does not support conflict resolution - just replace the data;</li>
 <li>cannot be used as a backup/restore tool.</li>
 </ul>]]>
      </description-html>
   <method name="ExportFullState"
      vmodl-name="exportFullState"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="vmodl.Binary"
      >
      <description-html>
         <![CDATA[Performs export of the full replication state.

 After that, the exported data can be imported to other peers. Note that
 the data are not encrypted!]]>
      </description-html>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[The SAML Token passed in the request's security header could
            not be validated.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="vmodl.fault.NotSupported">
      <fault-description-html>
         <![CDATA[when the current deployment is not multi-site]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InternalFault">
      <fault-description-html>
         <![CDATA[Indicates unexpected internal error in the SSO Server.]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[replicated data in binary form]]>
      </return-value-description-html>
   </method>
   <method name="ImportFullState"
      vmodl-name="importFullState"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Performs import of the full replication state.

 After successful completion of this request, the current SSO service has
 the same state as the node where export has been done.]]>
      </description-html>
      <parameter name="fullState" type-id-ref="vmodl.Binary"
      vmodl-name="fullState"
      >
      <description-html>
         <![CDATA[replicated data in binary form]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[The SAML Token passed in the request's security header could
            not be validated.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="vmodl.fault.NotSupported">
      <fault-description-html>
         <![CDATA[when the current deployment is not multi-site, when the origin
            of the replication state and the current peer match or if there
            is ongoing import from same peer.]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="vmodl.fault.InvalidArgument">
      <fault-description-html>
         <![CDATA[when some or all of the data chunks are missing or pertaining
            to more than one peer]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InternalFault">
      <fault-description-html>
         <![CDATA[Indicates unexpected internal error in the SSO Server.]]>
      </fault-description-html>
      </fault>
   </method>
   </managed-object>
   <managed-object name="SsoAdminRoleManagementService"
      type-id="sso.admin.RoleManagementService"
      vmodl-name="sso.admin.RoleManagementService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Manages the roles of SSO users. Roles apply when managed method is being
 invoked and method privileges need to be checked.<br>
 Every users is assigned exactly one single role. The default role for newly
 created users is Role#GuestUser.]]>
      </description-html>
      <nested-type-id-ref>sso.admin.RoleManagementService.Role</nested-type-id-ref>
   <method name="SetRole"
      vmodl-name="setRole"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Assigns a role to the given person or solution user. Setting a role lower
 than the actual one, actually means decreasing the role of the user. Refer
 to Role for the order of the roles.]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[user who will be assigned a role]]>
      </description-html>
      </parameter>
      <parameter name="role" type-id-ref="java.lang.String"
      vmodl-name="role"
      >
      <description-html>
         <![CDATA[role to be assigned; refer to Role for valid options]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when no person or solution user with the specified id exists]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[true, when the user role has actually changed, otherwise - false]]>
      </return-value-description-html>
   </method>
   <method name="HasAdministratorRole"
      vmodl-name="hasAdministratorRole"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Check whether the given user has Role#Administrator role]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[user which role to check]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when no person or solution user with the specified id exists]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[true, when the user has the role, otherwise - false]]>
      </return-value-description-html>
   </method>
   <method name="HasRegularUserRole"
      vmodl-name="hasRegularUserRole"
      privilege="System.Read"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Check whether the given user has Role#RegularUser or higher role]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[user which role to check]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when no person or solution user with the specified id exists]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[true, when the user has the role, otherwise - false]]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoAdminServiceInstance"
      type-id="sso.admin.ServiceInstance"
      vmodl-name="sso.admin.ServiceInstance"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[VMODL definition providing access to SSO administrative server API]]>
      </description-html>
   <method name="SsoAdminServiceInstance"
      vmodl-name="retrieveServiceContent"
      privilege="System.Anonymous"
      type-id-ref="sso.admin.ServiceContent"
      >
      <description-html>
         <![CDATA[Get access points for the available services.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[access points for the available services]]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoAdminSmtpManagementService"
      type-id="sso.admin.SmtpManagementService"
      vmodl-name="sso.admin.SmtpManagementService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[This service is used to configure SMTP settings for SSO administrative server]]>
      </description-html>
   <method name="GetSmtpConfiguration"
      vmodl-name="getSmtpConfiguration"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="sso.admin.SmtpConfig"
      >
      <description-html>
         <![CDATA[Returns the server's current SMTP configuration. This configuration
 represents settings related to host/port of SMTP server, security
 credentials, etc.]]>
      </description-html>
      <fault type-id-ref="sso.admin.fault.SmtpConfigNotSetFault">
      <fault-description-html>
         <![CDATA[Thrown to indicate that no SMTP configuration is set on the
            server]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[The SMTP configuration.]]>
      </return-value-description-html>
   </method>
   <method name="UpdateSmtpConfiguration"
      vmodl-name="updateSmtpConfiguration"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Replaces the server's current SMTP configuration. The newly updated
 configuration could be tested with the {@code sendMail} method]]>
      </description-html>
      <parameter name="config" type-id-ref="sso.admin.SmtpConfig"
      vmodl-name="config"
      >
      <description-html>
         <![CDATA[The new SMTP configuration. <code>null</code> value is not
           acceptable]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="SendMail"
      vmodl-name="sendMail"
      privilege="Sso.AdminServer.Administer"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[This method sends email using the server's current SMTP settings. Could be
 used as a test utility ensuring properly configured server.]]>
      </description-html>
      <parameter name="content" type-id-ref="sso.admin.MailContent"
      vmodl-name="content"
      >
      <description-html>
         <![CDATA[The mail content which should be send. <code>null</code> value
           is not acceptable]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.admin.fault.SmtpConfigNotSetFault">
      <fault-description-html>
         <![CDATA[Thrown to indicate that no SMTP configuration is set on the
            server]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
   </method>
   </managed-object>
   <managed-object name="SsoGroupcheckGroupCheckService"
      type-id="sso.groupcheck.GroupCheckService"
      vmodl-name="sso.groupcheck.GroupCheckService"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Group membership check service.]]>
      </description-html>
   <method name="IsMemberOfGroup"
      vmodl-name="isMemberOfGroup"
      privilege="System.Read"
      type-id-ref="BOOLEAN"
      >
      <description-html>
         <![CDATA[Check whether the given user ( person or solution ) is a direct or
 indirect ( through group to group link ) member of the specified group.
 Both the user and group should exist.]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[user id]]>
      </description-html>
      </parameter>
      <parameter name="groupId" type-id-ref="sso.PrincipalId"
      vmodl-name="groupId"
      >
      <description-html>
         <![CDATA[group id]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when any of the specified user or group IDs does not exist or
            does not represent respectively user and group type of object]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[<code>true</code> when the user is member of the group, or
         <code>false</code> otherwise]]>
      </return-value-description-html>
   </method>
   <method name="FindParentGroups"
      vmodl-name="findParentGroups"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Find group IDs, that are subset of specified IDs, for which the specified
 user is a direct or indirect member ( through group to group link ).]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of the person or solution user which parent group to return]]>
      </description-html>
      </parameter>
      <parameter name="groupList" type-id-ref="sso.PrincipalId"
      vmodl-name="groupList"
      is-array="true"
      is-optional="true"
      >
      <description-html>
         <![CDATA[the superset of parent group IDs which to return; {@code null}
           value to get all parent groups <a href="sso.groupcheck.GroupCheckService.html#findAllParentGroups">FindAllParentGroups</a>; IDs
           that does not represent existing group will be ignored]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when the specified user does not exist or does not represent (
            person or solution ) user type of object]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[parent group IDs that are subset of the specified IDs or {@code
         null} when none of the given groups in list is a parent group]]>
      </return-value-description-html>
   </method>
   <method name="FindAllParentGroups"
      vmodl-name="findAllParentGroups"
      is-array="true"
      is-optional="true"
      privilege="System.Read"
      type-id-ref="sso.PrincipalId"
      >
      <description-html>
         <![CDATA[Find group IDs for which the specified user is a direct or indirect member
 (through group to group link).]]>
      </description-html>
      <parameter name="userId" type-id-ref="sso.PrincipalId"
      vmodl-name="userId"
      >
      <description-html>
         <![CDATA[id of the person or solution user which parent groups to return]]>
      </description-html>
      </parameter>
      <fault type-id-ref="sso.fault.InvalidPrincipalFault">
      <fault-description-html>
         <![CDATA[when the specified user does not exist or does not represent (
            person or solution ) user type of object]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NotAuthenticated">
      <fault-description-html>
         <![CDATA[when there is no authenticated SSO user associated with this
            method call]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.NoPermission">
      <fault-description-html>
         <![CDATA[when the required privilege for calling this method is not held
            by the caller]]>
      </fault-description-html>
      </fault>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[parent groups IDs or {@code null} when given user is not member of
         any group]]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoGroupcheckServiceInstance"
      type-id="sso.groupcheck.ServiceInstance"
      vmodl-name="sso.groupcheck.ServiceInstance"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[VMODL definition providing access to SSO group check API]]>
      </description-html>
   <method name="SsoGroupcheckServiceInstance"
      vmodl-name="retrieveServiceContent"
      privilege="System.Anonymous"
      type-id-ref="sso.groupcheck.ServiceContent"
      >
      <description-html>
         <![CDATA[Get access points for the available services.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the SAML token optional request attribute was specified
            and it cannot be validated]]>
      </fault-description-html>
      </fault>
      <return-value-description-html>
         <![CDATA[access points for the available services]]>
      </return-value-description-html>
   </method>
   </managed-object>
   <managed-object name="SsoSessionManager"
      type-id="sso.SessionManager"
      vmodl-name="sso.SessionManager"
      version-id-ref="sso.version.version1"
      >
      <description-html>
         <![CDATA[Manage user sessions.
 <p>
 Clients should provide their token as part of the request instead of a method
 parameter. Such token is required at #login() and it will determine
 the user of the session and his role once for the lifetime of that session.
 Sessions end when either client logs out or they expire - whichever happens
 first. No token should be provided at #logout().
 <p>
 Note that token provided as part of the request overrides the session user
 and privileges just for the particular request.]]>
      </description-html>
            <property name="defaultLocale" type-id-ref="java.lang.String"
      vmodl-name="defaultLocale"
      privilege="System.Anonymous"
      >
      </property>

            <property name="supportedLocales" type-id-ref="java.lang.String"
      vmodl-name="supportedLocales"
      is-array="true"
      privilege="System.Anonymous"
      >
      </property>

   <method name="Login"
      vmodl-name="login"
      privilege="System.Anonymous"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Login creates a new session. It requires token to be provided as a request
 attribute.]]>
      </description-html>
      <fault type-id-ref="sso.fault.InvalidCredentials">
      <fault-description-html>
         <![CDATA[when the provided SAML token as request attribute is not valid]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="Logout"
      vmodl-name="logout"
      privilege="System.Anonymous"
      type-id-ref="void"
      >
      <description-html>
         <![CDATA[Invalidate the current session. It will fail if token is provided.]]>
      </description-html>
      <fault type-id-ref="vmodl.fault.InvalidRequest">
      <fault-description-html>
         <![CDATA[when the SAML token option request attribute was specified]]>
      </fault-description-html>
      </fault>
   </method>
   <method name="SetLocale"
      vmodl-name="setLocale"
      privilege="System.Anonymous"
      type-id-ref="java.lang.String"
      >
      <parameter name="locale" type-id-ref="java.lang.String"
      vmodl-name="locale"
      >
      <description-html>
         <![CDATA[A two-character ISO-639 language ID (like "en") optionally
           followed by an underscore and a two-character ISO 3166 country
           ID (like "US").
           <p>
           Examples are "de", "fr_CA", "zh", "zh_CN", and "zh_TW". Note:
           The method uses the server default locale when a locale is not
           provided. This default can be configured in the server
           configuration file. If unspecified, it defaults to the locale of
           the server environment or English ("en") if unsupported.]]>
      </description-html>
      </parameter>
      <return-value-description-html>
         <![CDATA[the locale which is active after this call. It could be either the
         locale you provided, or its super-locale, or the default server
         locale. For example, lets say server currently supports "If you
         provided
         <ul>
         <li>Unsupported locale - e.g. "ab_CD" - you'll get the default
         server locale. <li>Unsupported locale - e.g. "en_XX" - you'll get
         the parent supported locale "en". <li>A supported locale - e.g.
         "zh_CN" - you'll get the same locale in response "zh_CN".
         </ul>]]>
      </return-value-description-html>
   </method>
   <method name="GetLocale"
      vmodl-name="getLocale"
      privilege="System.Anonymous"
      type-id-ref="java.lang.String"
      >
   </method>
   </managed-object>
   </managed-objects>
</definitions>
