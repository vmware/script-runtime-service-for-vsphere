/* 
 * Runspace API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace VMware.ScriptRuntimeService.RunspaceClient.Bindings.Model {
   // <summary>
   /// StreamRecord
   /// </summary>
   [DataContract]
   public partial class StreamRecord : IEquatable<StreamRecord>, IValidatableObject {
      /// <summary>
      /// Initializes a new instance of the <see cref="StreamRecord" /> class.
      /// </summary>
      /// <param name="message">message.</param>
      /// <param name="time">time.</param>
      public StreamRecord(string message = default(string), DateTime? time = default(DateTime?)) {
         this.Message = message;
         this.Time = time;
      }

      /// <summary>
      /// Gets or Sets Message
      /// </summary>
      [DataMember(Name = "message", EmitDefaultValue = false)]
      public string Message { get; set; }

      /// <summary>
      /// Gets or Sets Time
      /// </summary>
      [DataMember(Name = "time", EmitDefaultValue = false)]
      public DateTime? Time { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString() {
         var sb = new StringBuilder();
         sb.Append("class StreamRecord {\n");
         sb.Append("  Message: ").Append(Message).Append("\n");
         sb.Append("  Time: ").Append(Time).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public virtual string ToJson() {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="input">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object input) {
         return this.Equals(input as StreamRecord);
      }

      /// <summary>
      /// Returns true if StreamRecord instances are equal
      /// </summary>
      /// <param name="input">Instance of StreamRecord to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(StreamRecord input) {
         if (input == null)
            return false;

         return
             (
                 this.Message == input.Message ||
                 (this.Message != null &&
                 this.Message.Equals(input.Message))
             ) &&
             (
                 this.Time == input.Time ||
                 (this.Time != null &&
                 this.Time.Equals(input.Time))
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode() {
         unchecked // Overflow is fine, just wrap
         {
            int hashCode = 41;
            if (this.Message != null)
               hashCode = hashCode * 59 + this.Message.GetHashCode();
            if (this.Time != null)
               hashCode = hashCode * 59 + this.Time.GetHashCode();
            return hashCode;
         }
      }

      /// <summary>
      /// To validate all properties of the instance
      /// </summary>
      /// <param name="validationContext">Validation context</param>
      /// <returns>Validation Result</returns>
      IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) {
         yield break;
      }
   }
}
