/*
 * Runspace API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace VMware.ScriptRuntimeService.RunspaceClient.Bindings.Model {
   /// <summary>
   /// ScriptExecutionRequest
   /// </summary>
#pragma warning disable CS0472
   [DataContract]
   public partial class ScriptExecutionRequest : IEquatable<ScriptExecutionRequest>, IValidatableObject {
      /// <summary>
      /// Defines OutputObjectsFormat
      /// </summary>
      [JsonConverter(typeof(StringEnumConverter))]
      public enum OutputObjectsFormatEnum {

         /// <summary>
         /// Enum Text for value: text
         /// </summary>
         [EnumMember(Value = "text")]
         Text = 1,

         /// <summary>
         /// Enum Json for value: json
         /// </summary>
         [EnumMember(Value = "json")]
         Json = 2
      }

      /// <summary>
      /// Gets or Sets OutputObjectsFormat
      /// </summary>
      [DataMember(Name = "output_objects_format", EmitDefaultValue = false)]
      public OutputObjectsFormatEnum OutputObjectsFormat { get; set; }
      /// <summary>
      /// Initializes a new instance of the <see cref="ScriptExecutionRequest" /> class.
      /// </summary>
      [JsonConstructorAttribute]
      protected ScriptExecutionRequest() { }
      /// <summary>
      /// Initializes a new instance of the <see cref="ScriptExecutionRequest" /> class.
      /// </summary>
      /// <param name="script">script (required).</param>
      /// <param name="outputObjectsFormat">outputObjectsFormat (required).</param>
      /// <param name="parameters">parameters.</param>
      public ScriptExecutionRequest(string script = default(string), OutputObjectsFormatEnum outputObjectsFormat = default(OutputObjectsFormatEnum), List<ScriptParameter> parameters = default(List<ScriptParameter>), string name = default(string)) {
         // to ensure "script" is required (not null)
         if (script == null) {
            throw new InvalidDataException("script is a required property for ScriptExecutionRequest and cannot be null");
         } else {
            this.Script = script;
         }
         // to ensure "outputObjectsFormat" is required (not null)
         if (outputObjectsFormat == null) {
            throw new InvalidDataException("outputObjectsFormat is a required property for ScriptExecutionRequest and cannot be null");
         } else {
            this.OutputObjectsFormat = outputObjectsFormat;
         }
         this.Parameters = parameters;
         this.Name = name;
      }

      /// <summary>
      /// Gets or Sets Script
      /// </summary>
      [DataMember(Name = "script", EmitDefaultValue = false)]
      public string Script { get; set; }

      /// <summary>
      /// Gets or Sets Name
      /// </summary>
      [DataMember(Name = "name", EmitDefaultValue = false)]
      public string Name { get; set; }

      /// <summary>
      /// Gets or Sets Parameters
      /// </summary>
      [DataMember(Name = "parameters", EmitDefaultValue = false)]
      public List<ScriptParameter> Parameters { get; set; }
      public ScriptParameter[] ScriptParameters { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString() {
         var sb = new StringBuilder();
         sb.Append("class ScriptExecutionRequest {\n");
         sb.Append("  Script: ").Append(Script).Append("\n");
         sb.Append("  Name: ").Append(Name).Append("\n");
         sb.Append("  OutputObjectsFormat: ").Append(OutputObjectsFormat).Append("\n");
         sb.Append("  Parameters: ").Append(Parameters).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public virtual string ToJson() {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="input">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object input) {
         return this.Equals(input as ScriptExecutionRequest);
      }

      /// <summary>
      /// Returns true if ScriptExecutionRequest instances are equal
      /// </summary>
      /// <param name="input">Instance of ScriptExecutionRequest to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(ScriptExecutionRequest input) {
         if (input == null)
            return false;

         return
             (
                 this.Script == input.Script ||
                 (this.Script != null &&
                 this.Script.Equals(input.Script))
             ) &&
             (
                this.Name == input.Name ||
                (this.Name != null &&
                 this.Name.Equals(input.Name))
             ) &&
             (
                 this.OutputObjectsFormat == input.OutputObjectsFormat ||
                 (this.OutputObjectsFormat != null &&
                 this.OutputObjectsFormat.Equals(input.OutputObjectsFormat))
             ) &&
             (
                 this.Parameters == input.Parameters ||
                 this.Parameters != null &&
                 this.Parameters.SequenceEqual(input.Parameters)
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode() {
         unchecked // Overflow is fine, just wrap
         {
            int hashCode = 41;
            if (this.Script != null)
               hashCode = hashCode * 59 + this.Script.GetHashCode();
            if (this.Name != null)
               hashCode = hashCode * 59 + this.Name.GetHashCode();
            if (this.OutputObjectsFormat != null)
               hashCode = hashCode * 59 + this.OutputObjectsFormat.GetHashCode();
            if (this.Parameters != null)
               hashCode = hashCode * 59 + this.Parameters.GetHashCode();
            return hashCode;
         }
      }

      /// <summary>
      /// To validate all properties of the instance
      /// </summary>
      /// <param name="validationContext">Validation context</param>
      /// <returns>Validation Result</returns>
      IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) {
         yield break;
      }
   }
#pragma warning restore CS0472
}
