/* 
 * Runspace API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace VMware.ScriptRuntimeService.RunspaceClient.Bindings.Model {
   /// <summary>
   /// OutputObjectCollection
   /// </summary>
   [DataContract]
   public partial class OutputObjectCollection : IEquatable<OutputObjectCollection>, IValidatableObject {
      /// <summary>
      /// Initializes a new instance of the <see cref="OutputObjectCollection" /> class.
      /// </summary>
      /// <param name="formattedTextPresentation">formattedTextPresentation.</param>
      /// <param name="serializedObjects">serializedObjects.</param>
      public OutputObjectCollection(string formattedTextPresentation = default(string), List<string> serializedObjects = default(List<string>)) {
         this.FormattedTextPresentation = formattedTextPresentation;
         this.SerializedObjects = serializedObjects;
      }

      /// <summary>
      /// Gets or Sets FormattedTextPresentation
      /// </summary>
      [DataMember(Name = "formattedTextPresentation", EmitDefaultValue = false)]
      public string FormattedTextPresentation { get; set; }

      /// <summary>
      /// Gets or Sets SerializedObjects
      /// </summary>
      [DataMember(Name = "serializedObjects", EmitDefaultValue = false)]
      public List<string> SerializedObjects { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString() {
         var sb = new StringBuilder();
         sb.Append("class OutputObjectCollection {\n");
         sb.Append("  FormattedTextPresentation: ").Append(FormattedTextPresentation).Append("\n");
         sb.Append("  SerializedObjects: ").Append(SerializedObjects).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public virtual string ToJson() {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="input">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object input) {
         return this.Equals(input as OutputObjectCollection);
      }

      /// <summary>
      /// Returns true if OutputObjectCollection instances are equal
      /// </summary>
      /// <param name="input">Instance of OutputObjectCollection to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(OutputObjectCollection input) {
         if (input == null)
            return false;

         return
             (
                 this.FormattedTextPresentation == input.FormattedTextPresentation ||
                 (this.FormattedTextPresentation != null &&
                 this.FormattedTextPresentation.Equals(input.FormattedTextPresentation))
             ) &&
             (
                 this.SerializedObjects == input.SerializedObjects ||
                 this.SerializedObjects != null &&
                 this.SerializedObjects.SequenceEqual(input.SerializedObjects)
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode() {
         unchecked // Overflow is fine, just wrap
         {
            int hashCode = 41;
            if (this.FormattedTextPresentation != null)
               hashCode = hashCode * 59 + this.FormattedTextPresentation.GetHashCode();
            if (this.SerializedObjects != null)
               hashCode = hashCode * 59 + this.SerializedObjects.GetHashCode();
            return hashCode;
         }
      }

      /// <summary>
      /// To validate all properties of the instance
      /// </summary>
      /// <param name="validationContext">Validation context</param>
      /// <returns>Validation Result</returns>
      IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) {
         yield break;
      }
   }
}
