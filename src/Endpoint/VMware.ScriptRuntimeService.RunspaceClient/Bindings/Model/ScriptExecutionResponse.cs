/*
 * Runspace API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace VMware.ScriptRuntimeService.RunspaceClient.Bindings.Model {
   /// <summary>
   /// ScriptExecutionResponse
   /// </summary>
#pragma warning disable CS0472
   [DataContract]
   public partial class ScriptExecutionResponse : IEquatable<ScriptExecutionResponse>, IValidatableObject {
      /// <summary>
      /// Defines OutputObjectsFormat
      /// </summary>
      [JsonConverter(typeof(StringEnumConverter))]
      public enum OutputObjectsFormatEnum {

         /// <summary>
         /// Enum Text for value: text
         /// </summary>
         [EnumMember(Value = "text")]
         Text = 1,

         /// <summary>
         /// Enum Json for value: json
         /// </summary>
         [EnumMember(Value = "json")]
         Json = 2
      }

      /// <summary>
      /// Gets or Sets OutputObjectsFormat
      /// </summary>
      [DataMember(Name = "output_objects_format", EmitDefaultValue = false)]
      public OutputObjectsFormatEnum OutputObjectsFormat { get; set; }
      /// <summary>
      /// Initializes a new instance of the <see cref="ScriptExecutionResponse" /> class.
      /// </summary>
      [JsonConstructorAttribute]
      protected ScriptExecutionResponse() { }
      /// <summary>
      /// Initializes a new instance of the <see cref="ScriptExecutionResponse" /> class.
      /// </summary>
      /// <param name="id">id.</param>
      /// <param name="state">state.</param>
      /// <param name="reason">reason.</param>
      /// <param name="outputObjectCollection">outputObjectCollection.</param>
      /// <param name="dataStreams">dataStreams.</param>
      /// <param name="outputObjectsFormat">outputObjectsFormat (required).</param>
      /// <param name="startTime">startTime.</param>
      /// <param name="endTime">endTime.</param>
      public ScriptExecutionResponse(string id = default(string), string state = default(string), string reason = default(string), OutputObjectCollection outputObjectCollection = default(OutputObjectCollection), ScriptExecutionStreams dataStreams = default(ScriptExecutionStreams), OutputObjectsFormatEnum outputObjectsFormat = default(OutputObjectsFormatEnum), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), string name = default(string)) {
         // to ensure "outputObjectsFormat" is required (not null)
         if (outputObjectsFormat == null) {
            throw new InvalidDataException("outputObjectsFormat is a required property for ScriptExecutionResponse and cannot be null");
         } else {
            this.OutputObjectsFormat = outputObjectsFormat;
         }
         this.Id = id;
         this.Name = name;
         this.State = state;
         this.Reason = reason;
         this.OutputObjectCollection = outputObjectCollection;
         this.DataStreams = dataStreams;
         this.StartTime = startTime;
         this.EndTime = endTime;
      }

      /// <summary>
      /// Gets or Sets Id
      /// </summary>
      [DataMember(Name = "id", EmitDefaultValue = false)]
      public string Id { get; set; }

      /// <summary>
      /// Gets or Sets Name
      /// </summary>
      [DataMember(Name = "name", EmitDefaultValue = false)]
      public string Name { get; set; }

      /// <summary>
      /// Gets or Sets State
      /// </summary>
      [DataMember(Name = "state", EmitDefaultValue = false)]
      public string State { get; set; }

      /// <summary>
      /// Gets or Sets Reason
      /// </summary>
      [DataMember(Name = "reason", EmitDefaultValue = false)]
      public string Reason { get; set; }

      /// <summary>
      /// Gets or Sets OutputObjectCollection
      /// </summary>
      [DataMember(Name = "outputObjectCollection", EmitDefaultValue = false)]
      public OutputObjectCollection OutputObjectCollection { get; set; }

      /// <summary>
      /// Gets or Sets DataStreams
      /// </summary>
      [DataMember(Name = "dataStreams", EmitDefaultValue = false)]
      public ScriptExecutionStreams DataStreams { get; set; }


      /// <summary>
      /// Gets or Sets StartTime
      /// </summary>
      [DataMember(Name = "start_time", EmitDefaultValue = false)]
      public DateTime? StartTime { get; set; }

      /// <summary>
      /// Gets or Sets EndTime
      /// </summary>
      [DataMember(Name = "end_time", EmitDefaultValue = false)]
      public DateTime? EndTime { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString() {
         var sb = new StringBuilder();
         sb.Append("class ScriptExecutionResponse {\n");
         sb.Append("  Id: ").Append(Id).Append("\n");
         sb.Append("  Name: ").Append(Name).Append("\n");
         sb.Append("  State: ").Append(State).Append("\n");
         sb.Append("  Reason: ").Append(Reason).Append("\n");
         sb.Append("  OutputObjectCollection: ").Append(OutputObjectCollection).Append("\n");
         sb.Append("  DataStreams: ").Append(DataStreams).Append("\n");
         sb.Append("  OutputObjectsFormat: ").Append(OutputObjectsFormat).Append("\n");
         sb.Append("  StartTime: ").Append(StartTime).Append("\n");
         sb.Append("  EndTime: ").Append(EndTime).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public virtual string ToJson() {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="input">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object input) {
         return this.Equals(input as ScriptExecutionResponse);
      }

      /// <summary>
      /// Returns true if ScriptExecutionResponse instances are equal
      /// </summary>
      /// <param name="input">Instance of ScriptExecutionResponse to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(ScriptExecutionResponse input) {
         if (input == null)
            return false;

         return
             (
                 this.Id == input.Id ||
                 (this.Id != null &&
                 this.Id.Equals(input.Id))
             ) &&
             (
                this.Name == input.Name ||
                (this.Name != null &&
                 this.Name.Equals(input.Name))
             ) &&
             (
                 this.State == input.State ||
                 (this.State != null &&
                 this.State.Equals(input.State))
             ) &&
             (
                 this.Reason == input.Reason ||
                 (this.Reason != null &&
                 this.Reason.Equals(input.Reason))
             ) &&
             (
                 this.OutputObjectCollection == input.OutputObjectCollection ||
                 (this.OutputObjectCollection != null &&
                 this.OutputObjectCollection.Equals(input.OutputObjectCollection))
             ) &&
             (
                 this.DataStreams == input.DataStreams ||
                 (this.DataStreams != null &&
                 this.DataStreams.Equals(input.DataStreams))
             ) &&
             (
                 this.OutputObjectsFormat == input.OutputObjectsFormat ||
                 (this.OutputObjectsFormat != null &&
                 this.OutputObjectsFormat.Equals(input.OutputObjectsFormat))
             ) &&
             (
                 this.StartTime == input.StartTime ||
                 (this.StartTime != null &&
                 this.StartTime.Equals(input.StartTime))
             ) &&
             (
                 this.EndTime == input.EndTime ||
                 (this.EndTime != null &&
                 this.EndTime.Equals(input.EndTime))
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode() {
         unchecked // Overflow is fine, just wrap
         {
            int hashCode = 41;
            if (this.Id != null)
               hashCode = hashCode * 59 + this.Id.GetHashCode();
            if (this.Name != null)
               hashCode = hashCode * 59 + this.Name.GetHashCode();
            if (this.State != null)
               hashCode = hashCode * 59 + this.State.GetHashCode();
            if (this.Reason != null)
               hashCode = hashCode * 59 + this.Reason.GetHashCode();
            if (this.OutputObjectCollection != null)
               hashCode = hashCode * 59 + this.OutputObjectCollection.GetHashCode();
            if (this.DataStreams != null)
               hashCode = hashCode * 59 + this.DataStreams.GetHashCode();
            if (this.OutputObjectsFormat != null)
               hashCode = hashCode * 59 + this.OutputObjectsFormat.GetHashCode();
            if (this.StartTime != null)
               hashCode = hashCode * 59 + this.StartTime.GetHashCode();
            if (this.EndTime != null)
               hashCode = hashCode * 59 + this.EndTime.GetHashCode();
            return hashCode;
         }
      }

      /// <summary>
      /// To validate all properties of the instance
      /// </summary>
      /// <param name="validationContext">Validation context</param>
      /// <returns>Validation Result</returns>
      IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) {
         yield break;
      }
   }
#pragma warning restore CS0472
}
