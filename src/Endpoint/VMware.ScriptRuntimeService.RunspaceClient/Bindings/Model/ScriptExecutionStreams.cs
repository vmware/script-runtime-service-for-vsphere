/* 
 * Runspace API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace VMware.ScriptRuntimeService.RunspaceClient.Bindings.Model {
   /// <summary>
   /// ScriptExecutionStreams
   /// </summary>
   [DataContract]
   public partial class ScriptExecutionStreams : IEquatable<ScriptExecutionStreams>, IValidatableObject {
      /// <summary>
      /// Initializes a new instance of the <see cref="ScriptExecutionStreams" /> class.
      /// </summary>
      /// <param name="information">information.</param>
      /// <param name="error">error.</param>
      /// <param name="warning">warning.</param>
      /// <param name="debug">debug.</param>
      /// <param name="verbose">verbose.</param>
      public ScriptExecutionStreams(List<StreamRecord> information = default(List<StreamRecord>), List<StreamRecord> error = default(List<StreamRecord>), List<StreamRecord> warning = default(List<StreamRecord>), List<StreamRecord> debug = default(List<StreamRecord>), List<StreamRecord> verbose = default(List<StreamRecord>)) {
         this.Information = information;
         this.Error = error;
         this.Warning = warning;
         this.Debug = debug;
         this.Verbose = verbose;
      }

      /// <summary>
      /// Gets or Sets Information
      /// </summary>
      [DataMember(Name = "information", EmitDefaultValue = false)]
      public List<StreamRecord> Information { get; set; }

      /// <summary>
      /// Gets or Sets Error
      /// </summary>
      [DataMember(Name = "error", EmitDefaultValue = false)]
      public List<StreamRecord> Error { get; set; }

      /// <summary>
      /// Gets or Sets Warning
      /// </summary>
      [DataMember(Name = "warning", EmitDefaultValue = false)]
      public List<StreamRecord> Warning { get; set; }

      /// <summary>
      /// Gets or Sets Debug
      /// </summary>
      [DataMember(Name = "debug", EmitDefaultValue = false)]
      public List<StreamRecord> Debug { get; set; }

      /// <summary>
      /// Gets or Sets Verbose
      /// </summary>
      [DataMember(Name = "verbose", EmitDefaultValue = false)]
      public List<StreamRecord> Verbose { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString() {
         var sb = new StringBuilder();
         sb.Append("class ScriptExecutionStreams {\n");
         sb.Append("  Information: ").Append(Information).Append("\n");
         sb.Append("  Error: ").Append(Error).Append("\n");
         sb.Append("  Warning: ").Append(Warning).Append("\n");
         sb.Append("  Debug: ").Append(Debug).Append("\n");
         sb.Append("  Verbose: ").Append(Verbose).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public virtual string ToJson() {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="input">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object input) {
         return this.Equals(input as ScriptExecutionStreams);
      }

      /// <summary>
      /// Returns true if ScriptExecutionStreams instances are equal
      /// </summary>
      /// <param name="input">Instance of ScriptExecutionStreams to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(ScriptExecutionStreams input) {
         if (input == null)
            return false;

         return
             (
                 this.Information == input.Information ||
                 this.Information != null &&
                 this.Information.SequenceEqual(input.Information)
             ) &&
             (
                 this.Error == input.Error ||
                 this.Error != null &&
                 this.Error.SequenceEqual(input.Error)
             ) &&
             (
                 this.Warning == input.Warning ||
                 this.Warning != null &&
                 this.Warning.SequenceEqual(input.Warning)
             ) &&
             (
                 this.Debug == input.Debug ||
                 this.Debug != null &&
                 this.Debug.SequenceEqual(input.Debug)
             ) &&
             (
                 this.Verbose == input.Verbose ||
                 this.Verbose != null &&
                 this.Verbose.SequenceEqual(input.Verbose)
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode() {
         unchecked // Overflow is fine, just wrap
         {
            int hashCode = 41;
            if (this.Information != null)
               hashCode = hashCode * 59 + this.Information.GetHashCode();
            if (this.Error != null)
               hashCode = hashCode * 59 + this.Error.GetHashCode();
            if (this.Warning != null)
               hashCode = hashCode * 59 + this.Warning.GetHashCode();
            if (this.Debug != null)
               hashCode = hashCode * 59 + this.Debug.GetHashCode();
            if (this.Verbose != null)
               hashCode = hashCode * 59 + this.Verbose.GetHashCode();
            return hashCode;
         }
      }

      /// <summary>
      /// To validate all properties of the instance
      /// </summary>
      /// <param name="validationContext">Validation context</param>
      /// <returns>Validation Result</returns>
      IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext) {
         yield break;
      }
   }
}
