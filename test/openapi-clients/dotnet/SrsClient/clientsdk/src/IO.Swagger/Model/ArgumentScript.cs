/* 
 * Script Runtime Service for vSphere
 *
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ArgumentScript object represents a script produced from given script template and placeholder values.
    /// </summary>
    [DataContract]
        public partial class ArgumentScript :  IEquatable<ArgumentScript>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgumentScript" /> class.
        /// </summary>
        /// <param name="templateId">Unique identifier for the argument template script. (required).</param>
        /// <param name="templatePlaceholderValueList">Placeholder value list which are used to create script from script template.    Single template_placeholder_value_list produces script by the given template replacing placeholder with the given values.  Multiple items for template_placeholder_value_list produce a script of scripts which can produce an array of objects. Each template_placeholder_value_list item is used to produce script from template. Scripts are then combined in a multi-line script where each line produces result object. (required).</param>
        public ArgumentScript(string templateId = default(string), List<PlaceholderValueList> templatePlaceholderValueList = default(List<PlaceholderValueList>))
        {
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new InvalidDataException("templateId is a required property for ArgumentScript and cannot be null");
            }
            else
            {
                this.TemplateId = templateId;
            }
            // to ensure "templatePlaceholderValueList" is required (not null)
            if (templatePlaceholderValueList == null)
            {
                throw new InvalidDataException("templatePlaceholderValueList is a required property for ArgumentScript and cannot be null");
            }
            else
            {
                this.TemplatePlaceholderValueList = templatePlaceholderValueList;
            }
        }
        
        /// <summary>
        /// Unique identifier for the argument template script.
        /// </summary>
        /// <value>Unique identifier for the argument template script.</value>
        [DataMember(Name="template_id", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Placeholder value list which are used to create script from script template.    Single template_placeholder_value_list produces script by the given template replacing placeholder with the given values.  Multiple items for template_placeholder_value_list produce a script of scripts which can produce an array of objects. Each template_placeholder_value_list item is used to produce script from template. Scripts are then combined in a multi-line script where each line produces result object.
        /// </summary>
        /// <value>Placeholder value list which are used to create script from script template.    Single template_placeholder_value_list produces script by the given template replacing placeholder with the given values.  Multiple items for template_placeholder_value_list produce a script of scripts which can produce an array of objects. Each template_placeholder_value_list item is used to produce script from template. Scripts are then combined in a multi-line script where each line produces result object.</value>
        [DataMember(Name="template_placeholder_value_list", EmitDefaultValue=false)]
        public List<PlaceholderValueList> TemplatePlaceholderValueList { get; set; }

        /// <summary>
        /// Script result produced by the service based on given template_id and template_placeholder_parameters
        /// </summary>
        /// <value>Script result produced by the service based on given template_id and template_placeholder_parameters</value>
        [DataMember(Name="script", EmitDefaultValue=false)]
        public string Script { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgumentScript {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplatePlaceholderValueList: ").Append(TemplatePlaceholderValueList).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgumentScript);
        }

        /// <summary>
        /// Returns true if ArgumentScript instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgumentScript to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgumentScript input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.TemplatePlaceholderValueList == input.TemplatePlaceholderValueList ||
                    this.TemplatePlaceholderValueList != null &&
                    input.TemplatePlaceholderValueList != null &&
                    this.TemplatePlaceholderValueList.SequenceEqual(input.TemplatePlaceholderValueList)
                ) && 
                (
                    this.Script == input.Script ||
                    (this.Script != null &&
                    this.Script.Equals(input.Script))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.TemplatePlaceholderValueList != null)
                    hashCode = hashCode * 59 + this.TemplatePlaceholderValueList.GetHashCode();
                if (this.Script != null)
                    hashCode = hashCode * 59 + this.Script.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
