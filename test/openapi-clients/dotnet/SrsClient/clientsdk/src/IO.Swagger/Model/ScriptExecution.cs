/* 
 * Script Runtime Service for vSphere
 *
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Script Execution object allows you to run a script in a runspace.  The API allows you to create, cancel, and retrieve script executions.
    /// </summary>
    [DataContract]
        public partial class ScriptExecution :  IEquatable<ScriptExecution>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets OutputObjectsFormat
        /// </summary>
        [DataMember(Name="output_objects_format", EmitDefaultValue=false)]
        public OutputObjectsFormat? OutputObjectsFormat { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public ScriptExecutionState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScriptExecution" /> class.
        /// </summary>
        /// <param name="runspaceId">Unique identifier of the runspace where script execution is performed. (required).</param>
        /// <param name="name">Name of the script execution. It is optional to give a name of the script execution on create request. If name was not specified on script execution creation the field has null value..</param>
        /// <param name="script">Content of the script. (required).</param>
        /// <param name="scriptParameters">List of arguments that will be passed to the script.  If script content defines parameters argument can be provided.  The parameter names defined in the script content should match the names specified in this list..</param>
        /// <param name="outputObjectsFormat">outputObjectsFormat.</param>
        /// <param name="state">state.</param>
        public ScriptExecution(string runspaceId = default(string), string name = default(string), string script = default(string), List<AnyOfScriptExecutionScriptParametersItems> scriptParameters = default(List<AnyOfScriptExecutionScriptParametersItems>), OutputObjectsFormat? outputObjectsFormat = default(OutputObjectsFormat?), ScriptExecutionState? state = default(ScriptExecutionState?))
        {
         // to ensure "runspaceId" is required (not null)
         this.RunspaceId = runspaceId;
         this.Script = script;
         this.Name = name;
         this.ScriptParameters = scriptParameters;
         this.OutputObjectsFormat = outputObjectsFormat;
         this.State = state;
      }
        
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Unique identifier of the runspace where script execution is performed.
        /// </summary>
        /// <value>Unique identifier of the runspace where script execution is performed.</value>
        [DataMember(Name="runspace_id", EmitDefaultValue=false)]
        public string RunspaceId { get; set; }

        /// <summary>
        /// Name of the script execution. It is optional to give a name of the script execution on create request. If name was not specified on script execution creation the field has null value.
        /// </summary>
        /// <value>Name of the script execution. It is optional to give a name of the script execution on create request. If name was not specified on script execution creation the field has null value.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Content of the script.
        /// </summary>
        /// <value>Content of the script.</value>
        [DataMember(Name="script", EmitDefaultValue=false)]
        public string Script { get; set; }

        /// <summary>
        /// List of arguments that will be passed to the script.  If script content defines parameters argument can be provided.  The parameter names defined in the script content should match the names specified in this list.
        /// </summary>
        /// <value>List of arguments that will be passed to the script.  If script content defines parameters argument can be provided.  The parameter names defined in the script content should match the names specified in this list.</value>
        [DataMember(Name="script_parameters", EmitDefaultValue=false)]
        public List<AnyOfScriptExecutionScriptParametersItems> ScriptParameters { get; set; }



        /// <summary>
        /// Reason for the current script execution state. In most of the cases reason field will be empty. In case  of an error or cancellation reason will contain information about the reason that caused script execution to  become in this state.
        /// </summary>
        /// <value>Reason for the current script execution state. In most of the cases reason field will be empty. In case  of an error or cancellation reason will contain information about the reason that caused script execution to  become in this state.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; private set; }

        /// <summary>
        /// Time at which the script execution was started. String representing time in format ISO 8601.
        /// </summary>
        /// <value>Time at which the script execution was started. String representing time in format ISO 8601.</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime? StartTime { get; private set; }

        /// <summary>
        /// Time at which the script execution was finished. String representing time in format ISO 8601.
        /// </summary>
        /// <value>Time at which the script execution was finished. String representing time in format ISO 8601.</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public DateTime? EndTime { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScriptExecution {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RunspaceId: ").Append(RunspaceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  ScriptParameters: ").Append(ScriptParameters).Append("\n");
            sb.Append("  OutputObjectsFormat: ").Append(OutputObjectsFormat).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScriptExecution);
        }

        /// <summary>
        /// Returns true if ScriptExecution instances are equal
        /// </summary>
        /// <param name="input">Instance of ScriptExecution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScriptExecution input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RunspaceId == input.RunspaceId ||
                    (this.RunspaceId != null &&
                    this.RunspaceId.Equals(input.RunspaceId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Script == input.Script ||
                    (this.Script != null &&
                    this.Script.Equals(input.Script))
                ) && 
                (
                    this.ScriptParameters == input.ScriptParameters ||
                    this.ScriptParameters != null &&
                    input.ScriptParameters != null &&
                    this.ScriptParameters.SequenceEqual(input.ScriptParameters)
                ) && 
                (
                    this.OutputObjectsFormat == input.OutputObjectsFormat ||
                    (this.OutputObjectsFormat != null &&
                    this.OutputObjectsFormat.Equals(input.OutputObjectsFormat))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RunspaceId != null)
                    hashCode = hashCode * 59 + this.RunspaceId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Script != null)
                    hashCode = hashCode * 59 + this.Script.GetHashCode();
                if (this.ScriptParameters != null)
                    hashCode = hashCode * 59 + this.ScriptParameters.GetHashCode();
                if (this.OutputObjectsFormat != null)
                    hashCode = hashCode * 59 + this.OutputObjectsFormat.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
