/* 
 * Script Runtime Service for vSphere
 *
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BooleanScriptParameter
    /// </summary>
    [DataContract]
        public partial class BooleanScriptParameter :  IEquatable<BooleanScriptParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BooleanScriptParameter" /> class.
        /// </summary>
        /// <param name="value">Object that will be passed as an argument to a given parameter. Value, script, or both can be provided as an  argument. If only value is provided without script the object is passed to the script&#x27;s parameter as is..</param>
        /// <param name="name">Name of the parameter. When a parameter is specified on a script execution create the name should match  the name of the parameter that is defined in the script. (required).</param>
        /// <param name="script">Script to be executed for this parameter. Value produced by the script will be the argument for the parameter.    In case a script is specified as an argument for a script parameter the service runs the script of the  parameter before running the requested script. The value that is produced as an output is used  as an argument for the script parameter.  If both script and value are specified for a script parameter the script is executed with single argument  with value specified in the value field. The object that is produced as an output is used as an argument  for the script parameter..</param>
        public BooleanScriptParameter(Object value = default(Object), string name = default(string), string script = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BooleanScriptParameter and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Value = value;
            this.Script = script;
        }
        
        /// <summary>
        /// Object that will be passed as an argument to a given parameter. Value, script, or both can be provided as an  argument. If only value is provided without script the object is passed to the script&#x27;s parameter as is.
        /// </summary>
        /// <value>Object that will be passed as an argument to a given parameter. Value, script, or both can be provided as an  argument. If only value is provided without script the object is passed to the script&#x27;s parameter as is.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// Name of the parameter. When a parameter is specified on a script execution create the name should match  the name of the parameter that is defined in the script.
        /// </summary>
        /// <value>Name of the parameter. When a parameter is specified on a script execution create the name should match  the name of the parameter that is defined in the script.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Script to be executed for this parameter. Value produced by the script will be the argument for the parameter.    In case a script is specified as an argument for a script parameter the service runs the script of the  parameter before running the requested script. The value that is produced as an output is used  as an argument for the script parameter.  If both script and value are specified for a script parameter the script is executed with single argument  with value specified in the value field. The object that is produced as an output is used as an argument  for the script parameter.
        /// </summary>
        /// <value>Script to be executed for this parameter. Value produced by the script will be the argument for the parameter.    In case a script is specified as an argument for a script parameter the service runs the script of the  parameter before running the requested script. The value that is produced as an output is used  as an argument for the script parameter.  If both script and value are specified for a script parameter the script is executed with single argument  with value specified in the value field. The object that is produced as an output is used as an argument  for the script parameter.</value>
        [DataMember(Name="script", EmitDefaultValue=false)]
        public string Script { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BooleanScriptParameter {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BooleanScriptParameter);
        }

        /// <summary>
        /// Returns true if BooleanScriptParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of BooleanScriptParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BooleanScriptParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Script == input.Script ||
                    (this.Script != null &&
                    this.Script.Equals(input.Script))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Script != null)
                    hashCode = hashCode * 59 + this.Script.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
