/* 
 * Script Runtime Service for vSphere
 *
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ArgumentScriptTemplate object represents a script with placeholders. If placeholders are replaced by values script can be executed.  The purpose of the script is to produce an object of type valid for a given script runtime. The result type of the script is usually  input type for other scripts. The ArgumentScriptTemplate scripts are designed to help to convert simple type values to   objects of types that can only be produced in a given script runtime.
    /// </summary>
    [DataContract]
        public partial class ArgumentScriptTemplate :  IEquatable<ArgumentScriptTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgumentScriptTemplate" /> class.
        /// </summary>
        /// <param name="placeholders">The script template placeholders that has to be replaced by strings to produce a valid script..</param>
        public ArgumentScriptTemplate(List<string> placeholders = default(List<string>))
        {
            this.Placeholders = placeholders;
        }
        
        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        /// <value>Unique identifier for the object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// ScriptRuntime on which this script can be executed.
        /// </summary>
        /// <value>ScriptRuntime on which this script can be executed.</value>
        [DataMember(Name="script_runtime", EmitDefaultValue=false)]
        public string ScriptRuntime { get; private set; }

        /// <summary>
        /// Type name of the object that is produced by the script template.
        /// </summary>
        /// <value>Type name of the object that is produced by the script template.</value>
        [DataMember(Name="result_type", EmitDefaultValue=false)]
        public string ResultType { get; private set; }

        /// <summary>
        /// The script template.
        /// </summary>
        /// <value>The script template.</value>
        [DataMember(Name="script_template", EmitDefaultValue=false)]
        public string ScriptTemplate { get; private set; }

        /// <summary>
        /// The script template placeholders that has to be replaced by strings to produce a valid script.
        /// </summary>
        /// <value>The script template placeholders that has to be replaced by strings to produce a valid script.</value>
        [DataMember(Name="placeholders", EmitDefaultValue=false)]
        public List<string> Placeholders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgumentScriptTemplate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ScriptRuntime: ").Append(ScriptRuntime).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  ScriptTemplate: ").Append(ScriptTemplate).Append("\n");
            sb.Append("  Placeholders: ").Append(Placeholders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgumentScriptTemplate);
        }

        /// <summary>
        /// Returns true if ArgumentScriptTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgumentScriptTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgumentScriptTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ScriptRuntime == input.ScriptRuntime ||
                    (this.ScriptRuntime != null &&
                    this.ScriptRuntime.Equals(input.ScriptRuntime))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.ScriptTemplate == input.ScriptTemplate ||
                    (this.ScriptTemplate != null &&
                    this.ScriptTemplate.Equals(input.ScriptTemplate))
                ) && 
                (
                    this.Placeholders == input.Placeholders ||
                    this.Placeholders != null &&
                    input.Placeholders != null &&
                    this.Placeholders.SequenceEqual(input.Placeholders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ScriptRuntime != null)
                    hashCode = hashCode * 59 + this.ScriptRuntime.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                if (this.ScriptTemplate != null)
                    hashCode = hashCode * 59 + this.ScriptTemplate.GetHashCode();
                if (this.Placeholders != null)
                    hashCode = hashCode * 59 + this.Placeholders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
