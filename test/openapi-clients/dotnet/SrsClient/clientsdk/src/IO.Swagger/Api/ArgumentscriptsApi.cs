/* 
 * Script Runtime Service for vSphere
 *
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IArgumentscriptsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates scripts for a given script template id and placeholder values
        /// </summary>
        /// <remarks>
        /// ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The argument script create request (optional)</param>
        /// <returns>ArgumentScript</returns>
        ArgumentScript CreateArgumentScriptsScript (ArgumentScript body = null);

        /// <summary>
        /// Creates scripts for a given script template id and placeholder values
        /// </summary>
        /// <remarks>
        /// ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The argument script create request (optional)</param>
        /// <returns>ApiResponse of ArgumentScript</returns>
        ApiResponse<ArgumentScript> CreateArgumentScriptsScriptWithHttpInfo (ArgumentScript body = null);
        /// <summary>
        /// Retrieves argument script template by given unique template identifier
        /// </summary>
        /// <remarks>
        /// ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the argument script template</param>
        /// <returns>ArgumentScriptTemplate</returns>
        ArgumentScriptTemplate GetArgumentScriptsTemplate (string id);

        /// <summary>
        /// Retrieves argument script template by given unique template identifier
        /// </summary>
        /// <remarks>
        /// ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the argument script template</param>
        /// <returns>ApiResponse of ArgumentScriptTemplate</returns>
        ApiResponse<ArgumentScriptTemplate> GetArgumentScriptsTemplateWithHttpInfo (string id);
        /// <summary>
        /// List available argument script templates
        /// </summary>
        /// <remarks>
        /// ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ArgumentScriptTemplate&gt;</returns>
        List<ArgumentScriptTemplate> ListArgumentScriptsTemplates ();

        /// <summary>
        /// List available argument script templates
        /// </summary>
        /// <remarks>
        /// ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ArgumentScriptTemplate&gt;</returns>
        ApiResponse<List<ArgumentScriptTemplate>> ListArgumentScriptsTemplatesWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates scripts for a given script template id and placeholder values
        /// </summary>
        /// <remarks>
        /// ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The argument script create request (optional)</param>
        /// <returns>Task of ArgumentScript</returns>
        System.Threading.Tasks.Task<ArgumentScript> CreateArgumentScriptsScriptAsync (ArgumentScript body = null);

        /// <summary>
        /// Creates scripts for a given script template id and placeholder values
        /// </summary>
        /// <remarks>
        /// ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The argument script create request (optional)</param>
        /// <returns>Task of ApiResponse (ArgumentScript)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArgumentScript>> CreateArgumentScriptsScriptAsyncWithHttpInfo (ArgumentScript body = null);
        /// <summary>
        /// Retrieves argument script template by given unique template identifier
        /// </summary>
        /// <remarks>
        /// ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the argument script template</param>
        /// <returns>Task of ArgumentScriptTemplate</returns>
        System.Threading.Tasks.Task<ArgumentScriptTemplate> GetArgumentScriptsTemplateAsync (string id);

        /// <summary>
        /// Retrieves argument script template by given unique template identifier
        /// </summary>
        /// <remarks>
        /// ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the argument script template</param>
        /// <returns>Task of ApiResponse (ArgumentScriptTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArgumentScriptTemplate>> GetArgumentScriptsTemplateAsyncWithHttpInfo (string id);
        /// <summary>
        /// List available argument script templates
        /// </summary>
        /// <remarks>
        /// ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ArgumentScriptTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<ArgumentScriptTemplate>> ListArgumentScriptsTemplatesAsync ();

        /// <summary>
        /// List available argument script templates
        /// </summary>
        /// <remarks>
        /// ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ArgumentScriptTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArgumentScriptTemplate>>> ListArgumentScriptsTemplatesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ArgumentscriptsApi : IArgumentscriptsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArgumentscriptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArgumentscriptsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArgumentscriptsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ArgumentscriptsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArgumentscriptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArgumentscriptsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates scripts for a given script template id and placeholder values ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The argument script create request (optional)</param>
        /// <returns>ArgumentScript</returns>
        public ArgumentScript CreateArgumentScriptsScript (ArgumentScript body = null)
        {
             ApiResponse<ArgumentScript> localVarResponse = CreateArgumentScriptsScriptWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates scripts for a given script template id and placeholder values ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The argument script create request (optional)</param>
        /// <returns>ApiResponse of ArgumentScript</returns>
        public ApiResponse< ArgumentScript > CreateArgumentScriptsScriptWithHttpInfo (ArgumentScript body = null)
        {

            var localVarPath = "/api/argument-scripts/script";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateArgumentScriptsScript", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArgumentScript>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArgumentScript) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArgumentScript)));
        }

        /// <summary>
        /// Creates scripts for a given script template id and placeholder values ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The argument script create request (optional)</param>
        /// <returns>Task of ArgumentScript</returns>
        public async System.Threading.Tasks.Task<ArgumentScript> CreateArgumentScriptsScriptAsync (ArgumentScript body = null)
        {
             ApiResponse<ArgumentScript> localVarResponse = await CreateArgumentScriptsScriptAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates scripts for a given script template id and placeholder values ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The argument script create request (optional)</param>
        /// <returns>Task of ApiResponse (ArgumentScript)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArgumentScript>> CreateArgumentScriptsScriptAsyncWithHttpInfo (ArgumentScript body = null)
        {

            var localVarPath = "/api/argument-scripts/script";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateArgumentScriptsScript", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArgumentScript>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArgumentScript) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArgumentScript)));
        }

        /// <summary>
        /// Retrieves argument script template by given unique template identifier ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the argument script template</param>
        /// <returns>ArgumentScriptTemplate</returns>
        public ArgumentScriptTemplate GetArgumentScriptsTemplate (string id)
        {
             ApiResponse<ArgumentScriptTemplate> localVarResponse = GetArgumentScriptsTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves argument script template by given unique template identifier ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the argument script template</param>
        /// <returns>ApiResponse of ArgumentScriptTemplate</returns>
        public ApiResponse< ArgumentScriptTemplate > GetArgumentScriptsTemplateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArgumentscriptsApi->GetArgumentScriptsTemplate");

            var localVarPath = "/api/argument-scripts/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArgumentScriptsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArgumentScriptTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArgumentScriptTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArgumentScriptTemplate)));
        }

        /// <summary>
        /// Retrieves argument script template by given unique template identifier ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the argument script template</param>
        /// <returns>Task of ArgumentScriptTemplate</returns>
        public async System.Threading.Tasks.Task<ArgumentScriptTemplate> GetArgumentScriptsTemplateAsync (string id)
        {
             ApiResponse<ArgumentScriptTemplate> localVarResponse = await GetArgumentScriptsTemplateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves argument script template by given unique template identifier ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the argument script template</param>
        /// <returns>Task of ApiResponse (ArgumentScriptTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArgumentScriptTemplate>> GetArgumentScriptsTemplateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ArgumentscriptsApi->GetArgumentScriptsTemplate");

            var localVarPath = "/api/argument-scripts/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArgumentScriptsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArgumentScriptTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArgumentScriptTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArgumentScriptTemplate)));
        }

        /// <summary>
        /// List available argument script templates ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ArgumentScriptTemplate&gt;</returns>
        public List<ArgumentScriptTemplate> ListArgumentScriptsTemplates ()
        {
             ApiResponse<List<ArgumentScriptTemplate>> localVarResponse = ListArgumentScriptsTemplatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List available argument script templates ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ArgumentScriptTemplate&gt;</returns>
        public ApiResponse< List<ArgumentScriptTemplate> > ListArgumentScriptsTemplatesWithHttpInfo ()
        {

            var localVarPath = "/api/argument-scripts/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListArgumentScriptsTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArgumentScriptTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArgumentScriptTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArgumentScriptTemplate>)));
        }

        /// <summary>
        /// List available argument script templates ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ArgumentScriptTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArgumentScriptTemplate>> ListArgumentScriptsTemplatesAsync ()
        {
             ApiResponse<List<ArgumentScriptTemplate>> localVarResponse = await ListArgumentScriptsTemplatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List available argument script templates ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ArgumentScriptTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ArgumentScriptTemplate>>> ListArgumentScriptsTemplatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/argument-scripts/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListArgumentScriptsTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ArgumentScriptTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ArgumentScriptTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ArgumentScriptTemplate>)));
        }

    }
}
