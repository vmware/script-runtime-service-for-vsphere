/* 
 * Script Runtime Service for vSphere
 *
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IRunspacesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Starts a runspace creation
        /// </summary>
        /// <remarks>
        /// ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Desired runspace resource. (optional)</param>
        /// <returns>Runspace</returns>
        Runspace CreateRunspace (Runspace body = null);

        /// <summary>
        /// Starts a runspace creation
        /// </summary>
        /// <remarks>
        /// ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Desired runspace resource. (optional)</param>
        /// <returns>ApiResponse of Runspace</returns>
        ApiResponse<Runspace> CreateRunspaceWithHttpInfo (Runspace body = null);
        /// <summary>
        /// Deletes a runspace
        /// </summary>
        /// <remarks>
        /// ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteRunspace (string id);

        /// <summary>
        /// Deletes a runspace
        /// </summary>
        /// <remarks>
        /// ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRunspaceWithHttpInfo (string id);
        /// <summary>
        /// Retrieve a runspace
        /// </summary>
        /// <remarks>
        /// ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Runspace</returns>
        Runspace GetRunspace (string id);

        /// <summary>
        /// Retrieve a runspace
        /// </summary>
        /// <remarks>
        /// ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Runspace</returns>
        ApiResponse<Runspace> GetRunspaceWithHttpInfo (string id);
        /// <summary>
        /// List all runspaces
        /// </summary>
        /// <remarks>
        /// ### List all runspaces  ### Returns  Returns a list of your runspaces.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Runspace&gt;</returns>
        List<Runspace> ListRunspaces ();

        /// <summary>
        /// List all runspaces
        /// </summary>
        /// <remarks>
        /// ### List all runspaces  ### Returns  Returns a list of your runspaces.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Runspace&gt;</returns>
        ApiResponse<List<Runspace>> ListRunspacesWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Starts a runspace creation
        /// </summary>
        /// <remarks>
        /// ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Desired runspace resource. (optional)</param>
        /// <returns>Task of Runspace</returns>
        System.Threading.Tasks.Task<Runspace> CreateRunspaceAsync (Runspace body = null);

        /// <summary>
        /// Starts a runspace creation
        /// </summary>
        /// <remarks>
        /// ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Desired runspace resource. (optional)</param>
        /// <returns>Task of ApiResponse (Runspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Runspace>> CreateRunspaceAsyncWithHttpInfo (Runspace body = null);
        /// <summary>
        /// Deletes a runspace
        /// </summary>
        /// <remarks>
        /// ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRunspaceAsync (string id);

        /// <summary>
        /// Deletes a runspace
        /// </summary>
        /// <remarks>
        /// ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRunspaceAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieve a runspace
        /// </summary>
        /// <remarks>
        /// ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Runspace</returns>
        System.Threading.Tasks.Task<Runspace> GetRunspaceAsync (string id);

        /// <summary>
        /// Retrieve a runspace
        /// </summary>
        /// <remarks>
        /// ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Runspace)</returns>
        System.Threading.Tasks.Task<ApiResponse<Runspace>> GetRunspaceAsyncWithHttpInfo (string id);
        /// <summary>
        /// List all runspaces
        /// </summary>
        /// <remarks>
        /// ### List all runspaces  ### Returns  Returns a list of your runspaces.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Runspace&gt;</returns>
        System.Threading.Tasks.Task<List<Runspace>> ListRunspacesAsync ();

        /// <summary>
        /// List all runspaces
        /// </summary>
        /// <remarks>
        /// ### List all runspaces  ### Returns  Returns a list of your runspaces.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Runspace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Runspace>>> ListRunspacesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class RunspacesApi : IRunspacesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RunspacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RunspacesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunspacesApi"/> class
        /// </summary>
        /// <returns></returns>
        public RunspacesApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RunspacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RunspacesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Starts a runspace creation ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Desired runspace resource. (optional)</param>
        /// <returns>Runspace</returns>
        public Runspace CreateRunspace (Runspace body = null)
        {
             ApiResponse<Runspace> localVarResponse = CreateRunspaceWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a runspace creation ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Desired runspace resource. (optional)</param>
        /// <returns>ApiResponse of Runspace</returns>
        public ApiResponse< Runspace > CreateRunspaceWithHttpInfo (Runspace body = null)
        {

            var localVarPath = "/api/runspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRunspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Runspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Runspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Runspace)));
        }

        /// <summary>
        /// Starts a runspace creation ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Desired runspace resource. (optional)</param>
        /// <returns>Task of Runspace</returns>
        public async System.Threading.Tasks.Task<Runspace> CreateRunspaceAsync (Runspace body = null)
        {
             ApiResponse<Runspace> localVarResponse = await CreateRunspaceAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts a runspace creation ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Desired runspace resource. (optional)</param>
        /// <returns>Task of ApiResponse (Runspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Runspace>> CreateRunspaceAsyncWithHttpInfo (Runspace body = null)
        {

            var localVarPath = "/api/runspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRunspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Runspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Runspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Runspace)));
        }

        /// <summary>
        /// Deletes a runspace ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteRunspace (string id)
        {
             DeleteRunspaceWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes a runspace ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRunspaceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RunspacesApi->DeleteRunspace");

            var localVarPath = "/api/runspaces/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRunspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a runspace ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRunspaceAsync (string id)
        {
             await DeleteRunspaceAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes a runspace ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRunspaceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RunspacesApi->DeleteRunspace");

            var localVarPath = "/api/runspaces/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRunspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a runspace ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Runspace</returns>
        public Runspace GetRunspace (string id)
        {
             ApiResponse<Runspace> localVarResponse = GetRunspaceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a runspace ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Runspace</returns>
        public ApiResponse< Runspace > GetRunspaceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RunspacesApi->GetRunspace");

            var localVarPath = "/api/runspaces/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Runspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Runspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Runspace)));
        }

        /// <summary>
        /// Retrieve a runspace ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Runspace</returns>
        public async System.Threading.Tasks.Task<Runspace> GetRunspaceAsync (string id)
        {
             ApiResponse<Runspace> localVarResponse = await GetRunspaceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a runspace ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Runspace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Runspace>> GetRunspaceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RunspacesApi->GetRunspace");

            var localVarPath = "/api/runspaces/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunspace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Runspace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Runspace) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Runspace)));
        }

        /// <summary>
        /// List all runspaces ### List all runspaces  ### Returns  Returns a list of your runspaces.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Runspace&gt;</returns>
        public List<Runspace> ListRunspaces ()
        {
             ApiResponse<List<Runspace>> localVarResponse = ListRunspacesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all runspaces ### List all runspaces  ### Returns  Returns a list of your runspaces.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Runspace&gt;</returns>
        public ApiResponse< List<Runspace> > ListRunspacesWithHttpInfo ()
        {

            var localVarPath = "/api/runspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRunspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Runspace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Runspace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Runspace>)));
        }

        /// <summary>
        /// List all runspaces ### List all runspaces  ### Returns  Returns a list of your runspaces.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Runspace&gt;</returns>
        public async System.Threading.Tasks.Task<List<Runspace>> ListRunspacesAsync ()
        {
             ApiResponse<List<Runspace>> localVarResponse = await ListRunspacesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all runspaces ### List all runspaces  ### Returns  Returns a list of your runspaces.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Runspace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Runspace>>> ListRunspacesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/runspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY")))
            {
                localVarHeaderParams["X-SRS-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-SRS-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRunspaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Runspace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Runspace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Runspace>)));
        }

    }
}
