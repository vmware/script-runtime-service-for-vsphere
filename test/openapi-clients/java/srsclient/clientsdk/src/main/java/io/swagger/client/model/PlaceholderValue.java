/*
 * Script Runtime Service for vSphere
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PlaceholderValue object represents single value for a placeholder in template script.
 */
@Schema(description = "PlaceholderValue object represents single value for a placeholder in template script.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-09T07:53:20.504Z[GMT]")
public class PlaceholderValue {
  @SerializedName("placeholder_name")
  private String placeholderName = null;

  @SerializedName("value")
  private List<String> value = new ArrayList<String>();

  public PlaceholderValue placeholderName(String placeholderName) {
    this.placeholderName = placeholderName;
    return this;
  }

   /**
   * Name of the placeholder in the script template which will be replaced on creation of an argument script.
   * @return placeholderName
  **/
  @Schema(required = true, description = "Name of the placeholder in the script template which will be replaced on creation of an argument script.")
  public String getPlaceholderName() {
    return placeholderName;
  }

  public void setPlaceholderName(String placeholderName) {
    this.placeholderName = placeholderName;
  }

  public PlaceholderValue value(List<String> value) {
    this.value = value;
    return this;
  }

  public PlaceholderValue addValueItem(String valueItem) {
    this.value.add(valueItem);
    return this;
  }

   /**
   * Value that will be used to replace the placeholder on creation of an argument script.
   * @return value
  **/
  @Schema(required = true, description = "Value that will be used to replace the placeholder on creation of an argument script.")
  public List<String> getValue() {
    return value;
  }

  public void setValue(List<String> value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaceholderValue placeholderValue = (PlaceholderValue) o;
    return Objects.equals(this.placeholderName, placeholderValue.placeholderName) &&
        Objects.equals(this.value, placeholderValue.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(placeholderName, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaceholderValue {\n");
    
    sb.append("    placeholderName: ").append(toIndentedString(placeholderName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
