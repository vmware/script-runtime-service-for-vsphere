/*
 * Script Runtime Service for vSphere
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PlaceholderValueList;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ArgumentScript object represents a script produced from given script template and placeholder values.
 */
@Schema(description = "ArgumentScript object represents a script produced from given script template and placeholder values.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-09T07:53:20.504Z[GMT]")
public class ArgumentScript {
  @SerializedName("template_id")
  private String templateId = null;

  @SerializedName("template_placeholder_value_list")
  private List<PlaceholderValueList> templatePlaceholderValueList = new ArrayList<PlaceholderValueList>();

  @SerializedName("script")
  private String script = null;

  public ArgumentScript templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Unique identifier for the argument template script.
   * @return templateId
  **/
  @Schema(required = true, description = "Unique identifier for the argument template script.")
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }

  public ArgumentScript templatePlaceholderValueList(List<PlaceholderValueList> templatePlaceholderValueList) {
    this.templatePlaceholderValueList = templatePlaceholderValueList;
    return this;
  }

  public ArgumentScript addTemplatePlaceholderValueListItem(PlaceholderValueList templatePlaceholderValueListItem) {
    this.templatePlaceholderValueList.add(templatePlaceholderValueListItem);
    return this;
  }

   /**
   * Placeholder value list which are used to create script from script template.    Single template_placeholder_value_list produces script by the given template replacing placeholder with the given values.  Multiple items for template_placeholder_value_list produce a script of scripts which can produce an array of objects. Each template_placeholder_value_list item is used to produce script from template. Scripts are then combined in a multi-line script where each line produces result object.
   * @return templatePlaceholderValueList
  **/
  @Schema(required = true, description = "Placeholder value list which are used to create script from script template.    Single template_placeholder_value_list produces script by the given template replacing placeholder with the given values.  Multiple items for template_placeholder_value_list produce a script of scripts which can produce an array of objects. Each template_placeholder_value_list item is used to produce script from template. Scripts are then combined in a multi-line script where each line produces result object.")
  public List<PlaceholderValueList> getTemplatePlaceholderValueList() {
    return templatePlaceholderValueList;
  }

  public void setTemplatePlaceholderValueList(List<PlaceholderValueList> templatePlaceholderValueList) {
    this.templatePlaceholderValueList = templatePlaceholderValueList;
  }

   /**
   * Script result produced by the service based on given template_id and template_placeholder_parameters
   * @return script
  **/
  @Schema(description = "Script result produced by the service based on given template_id and template_placeholder_parameters")
  public String getScript() {
    return script;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArgumentScript argumentScript = (ArgumentScript) o;
    return Objects.equals(this.templateId, argumentScript.templateId) &&
        Objects.equals(this.templatePlaceholderValueList, argumentScript.templatePlaceholderValueList) &&
        Objects.equals(this.script, argumentScript.script);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, templatePlaceholderValueList, script);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArgumentScript {\n");
    
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templatePlaceholderValueList: ").append(toIndentedString(templatePlaceholderValueList)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
