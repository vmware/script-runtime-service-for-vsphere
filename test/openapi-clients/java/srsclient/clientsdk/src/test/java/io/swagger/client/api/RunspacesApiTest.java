/*
 * Script Runtime Service for vSphere
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ErrorDetails;
import io.swagger.client.model.Runspace;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RunspacesApi
 */
@Ignore
public class RunspacesApiTest {

    private final RunspacesApi api = new RunspacesApi();

    /**
     * Starts a runspace creation
     *
     * ### Create a runspace  Runspace creation and preparation time depends on requested runspace details.  If connection to VCenter Servers is requested the operation is going to create a PowerShell instance, load and connect a PowerCLI module to the VCenter.  ### Returns  When request is accepted **202 Accepted** - response code, with **Location** header is returned in the response that leads you to the **runspace** resource that is in creation state initially.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRunspaceTest() throws ApiException {
        Runspace body = null;
        Runspace response = api.createRunspace(body);

        // TODO: test validations
    }
    /**
     * Deletes a runspace
     *
     * ### Deletes a runspace  Deletes the PowerShell instance that is prepresented by this **runspace** resource.  Running script in the PowerShell won&#x27;t prevent the operation.  ### Returns  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRunspaceTest() throws ApiException {
        String id = null;
        api.deleteRunspace(id);

        // TODO: test validations
    }
    /**
     * Retrieve a runspace
     *
     * ### Retrieve a runspace  Retrieves the details of a runspace. One only needs to supply the unique runspace identifier that was returned on runspace creation to retrieve runspace details.  ### Returns  Returns a **runspace** resource instance if a valid identifier was provided.  When requesting the Id of a runspace that has been deleted or doesn&#x27;t exist **404 NotFound** is returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunspaceTest() throws ApiException {
        String id = null;
        Runspace response = api.getRunspace(id);

        // TODO: test validations
    }
    /**
     * List all runspaces
     *
     * ### List all runspaces  ### Returns  Returns a list of your runspaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRunspacesTest() throws ApiException {
        List<Runspace> response = api.listRunspaces();

        // TODO: test validations
    }
}
