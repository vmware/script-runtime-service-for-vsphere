/*
 * Script Runtime Service for vSphere
 * # Script Runtime Service API    Script Runtime Service for vSphere (SRS) allows running PowerShell and PowerCLI scripts. SRS is a VC add-on that is deployed separately from VCSA. SRS can be accessed via REST API that allows you to create PowerShell instances and run PowerShell and PowerCLI scripts within. No Connect-VIServer is required to run PowerCLI against VC(s) SRS is registered to.    ## Authetication    SRS uses VC SSO as Identity and Authentication Server. Two types of authentication are supported. SIGN and Basic. SIGN authentication is purposed for Service-To-Service access to SRS resources. For convenience of the end-users SRS supports basic authentication passing username and password which are used to acquire SAML HoK token for SRS solution. When basic is used SRS exchanges the username and password for SAML HoK token from the SSO server. SRS uses the SAML token to Connect PowerCLI to VC services in further operations.   On successful authentication SRS returns API Key which is required to authorize further SRS API calls.
 *
 * OpenAPI spec version: 1.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ArgumentScript;
import io.swagger.client.model.ArgumentScriptTemplate;
import io.swagger.client.model.ErrorDetails;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArgumentscriptsApi
 */
@Ignore
public class ArgumentscriptsApiTest {

    private final ArgumentscriptsApi api = new ArgumentscriptsApi();

    /**
     * Creates scripts for a given script template id and placeholder values
     *
     * ### Creates scripts for a given script template id and placeholder values  Replaces the placeholders in a given argument transformation script template with given values on the placeholder_value_list field  The result script can be provided to a **script execution** parameter that expects specific script runtime type    ### Example  If the template argument transformation script is    Get-VM -Id &lt;vm-id&gt; -Server &lt;server&gt;    The result of this operation with given Id &#x27;vm-1&#x27; and Server &#x27;server-1&#x27; would be    Get-VM -Id &#x27;vm-1&#x27; -Server &#x27;server-1&#x27;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createArgumentScriptsScriptTest() throws ApiException {
        ArgumentScript body = null;
        ArgumentScript response = api.createArgumentScriptsScript(body);

        // TODO: test validations
    }
    /**
     * Retrieves argument script template by given unique template identifier
     *
     * ### Retrieves argument script template by given unique template identifier  This operation returns argument script template for the specified template id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArgumentScriptsTemplateTest() throws ApiException {
        String id = null;
        ArgumentScriptTemplate response = api.getArgumentScriptsTemplate(id);

        // TODO: test validations
    }
    /**
     * List available argument script templates
     *
     * ### LList available argument script templates  Argument script templates are scripts with placeholders. When placeholders are replaced by values script can be executed in a given script runtime.  Argument script templates are designed to help to convert simple type values to objects of types that can only be produced in a given script runtime. Those object can be used as arguments to scripts&#x27; parameters.    This operation retrieves the available argument script templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listArgumentScriptsTemplatesTest() throws ApiException {
        List<ArgumentScriptTemplate> response = api.listArgumentScriptsTemplates();

        // TODO: test validations
    }
}
